import { insertIf } from 'ngrx-traits';
import { createReducer, on } from '@ngrx/store';
export function createMultiSelectionInitialState(previousInitialState) {
  return Object.assign(Object.assign({}, previousInitialState), {
    selectedIds: {},
  });
}
export function createMultiSelectionTraitReducer(
  initialState,
  allActions,
  allMutators,
  allConfigs
) {
  var _a, _b;
  const { adapter } = allConfigs.loadEntities;
  const sortRemote =
    (_a = allConfigs.sort) === null || _a === void 0 ? void 0 : _a.remote;
  const paginationCacheType =
    (_b = allConfigs.pagination) === null || _b === void 0
      ? void 0
      : _b.cacheType;
  function updateSelectedIdsChanged(state, updates) {
    const changedIds = updates.reduce((acc, updated) => {
      const id = adapter.selectId(updated.changes);
      if (id && id !== updated.id && state.selectedIds[updated.id] != null) {
        acc.push(updated);
        return acc;
      }
      return acc;
    }, []);
    if (changedIds.length) {
      const selectedIds = Object.assign({}, state.selectedIds);
      changedIds.forEach((updated) => {
        const id = adapter.selectId(updated.changes);
        const value = selectedIds[updated.id];
        delete selectedIds[updated.id];
        selectedIds[id] = value;
      });
      return Object.assign(Object.assign({}, state), { selectedIds });
    }
    return state;
  }
  return createReducer(
    initialState,
    on(allActions.multiSelect, (state, { id }) =>
      allMutators.multiSelect(id, state)
    ),
    on(allActions.multiDeselect, (state, { id }) =>
      allMutators.multiDeselect(id, state)
    ),
    on(allActions.multiToggleSelect, (state, { id }) =>
      allMutators.multiToggleSelect(id, state)
    ),
    on(allActions.toggleSelectAll, (state) =>
      allMutators.toggleSelectAll(state)
    ),
    ...insertIf(allActions.remove, () =>
      on(allActions.remove, (state, { keys }) => {
        const selectedIds = Object.assign({}, state.selectedIds);
        keys.forEach((v) => {
          delete selectedIds[v];
        });
        return Object.assign(Object.assign({}, state), { selectedIds });
      })
    ),
    ...insertIf(allActions.update, () =>
      on(allActions.update, (state, { updates }) =>
        updateSelectedIdsChanged(state, updates)
      )
    ),
    on(allActions.multiClearSelection, (state) =>
      allMutators.multiClearSelection(state)
    ),
    ...insertIf(allActions.removeAll, () =>
      on(allActions.removeAll, (state) =>
        allMutators.multiClearSelection(state)
      )
    ),
    ...insertIf(sortRemote, () =>
      on(allActions.sort, (state) => allMutators.multiClearSelection(state))
    ),
    ...insertIf(allActions.filter, () =>
      on(allActions.filter, (state) => allMutators.multiClearSelection(state))
    ),
    ...insertIf(!allActions.loadPageSuccess, () =>
      on(allActions.fetchSuccess, (state) =>
        allMutators.multiClearSelection(state)
      )
    ),
    ...insertIf(
      allActions.loadPageSuccess && paginationCacheType === 'partial',
      () =>
        on(allActions.loadPageSuccess, (state) =>
          allMutators.multiClearSelection(state)
        )
    )
  );
}
//# sourceMappingURL=data:application/json;base64,
