import { createReducer, on } from '@ngrx/store';
import { insertIf } from 'ngrx-traits';
export function createPaginationInitialState(previousInitialState, allConfigs) {
  const { currentPage, pageSize, cacheType, pagesToCache } =
    allConfigs.pagination;
  return Object.assign(Object.assign({}, previousInitialState), {
    pagination: {
      pageSize,
      currentPage,
      requestPage: currentPage,
      pagesToCache,
      cache: {
        type: cacheType,
        start: 0,
        end: 0,
      },
    },
  });
}
export function createPaginationTraitReducer(
  initialState,
  allActions,
  allSelectors,
  allMutators,
  allConfigs
) {
  var _a;
  function addToCacheTotal(state, add) {
    var _a;
    return Object.assign(Object.assign({}, state), {
      pagination: Object.assign(Object.assign({}, state.pagination), {
        total:
          ((_a = state.pagination.total) !== null && _a !== void 0 ? _a : 0) +
          add,
      }),
    });
  }
  function clearPagesCache(state) {
    return Object.assign(Object.assign({}, state), {
      entities: {},
      ids: [],
      pagination: Object.assign(Object.assign({}, state.pagination), {
        currentPage: 0,
        total: 0,
        cache: Object.assign(Object.assign({}, state.pagination.cache), {
          start: 0,
          end: 0,
        }),
      }),
    });
  }
  function recalculateTotal(state) {
    const total = allSelectors.selectTotal(state);
    return Object.assign(Object.assign({}, state), {
      status: 'success',
      pagination: Object.assign(Object.assign({}, state.pagination), {
        currentPage: 0,
        total,
        cache: Object.assign(Object.assign({}, state.pagination.cache), {
          start: 0,
          end: total,
        }),
      }),
    });
  }
  const filterRemote = !((_a =
    allConfigs === null || allConfigs === void 0
      ? void 0
      : allConfigs.filter) === null || _a === void 0
    ? void 0
    : _a.filterFn);
  return createReducer(
    initialState,
    on(allActions.loadPage, (state, { index }) =>
      Object.assign(Object.assign({}, state), {
        pagination: Object.assign(Object.assign({}, state.pagination), {
          currentPage: index,
          requestPage: index,
        }),
        status: 'loading',
      })
    ),
    on(allActions.setRequestPage, (state, { index }) =>
      Object.assign(Object.assign({}, state), {
        pagination: Object.assign(Object.assign({}, state.pagination), {
          requestPage: index,
        }),
        status: 'loading',
      })
    ),
    on(allActions.loadPageSuccess, (state) =>
      Object.assign(Object.assign({}, state), { status: 'success' })
    ),
    on(allActions.loadPageFail, (state) =>
      Object.assign(Object.assign({}, state), { status: 'fail' })
    ),
    on(allActions.clearPagesCache, (state) => clearPagesCache(state)),
    on(allActions.fetchSuccess, (state, { entities, total }) =>
      allMutators.mergePaginatedEntities(
        entities,
        total,
        Object.assign(Object.assign({}, state), { status: 'success' })
      )
    ),
    ...insertIf(allActions.add, () =>
      on(allActions.add, (state, { entities }) =>
        addToCacheTotal(state, entities.length)
      )
    ),
    ...insertIf(allActions.remove, () =>
      on(allActions.remove, (state, { keys }) =>
        addToCacheTotal(state, -keys.length)
      )
    ),
    ...insertIf(filterRemote && allActions.filter, () =>
      on(allActions.filter, (state) => recalculateTotal(state))
    ),
    ...insertIf(allActions.removeAll, () =>
      on(allActions.removeAll, (state) => clearPagesCache(state))
    )
  );
}
//# sourceMappingURL=data:application/json;base64,
