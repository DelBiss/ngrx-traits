import { Injectable } from '@angular/core';
import { TraitEffect } from 'ngrx-traits';
import { concatMap, concatMapTo, filter, first, map } from 'rxjs/operators';
import { concatLatestFrom, createEffect, ofType } from '@ngrx/effects';
export function createPaginationTraitEffects(allActions, allSelectors) {
  class PaginationEffect extends TraitEffect {
    constructor() {
      super(...arguments);
      this.loadPage$ = createEffect(() => {
        return this.actions$.pipe(
          ofType(allActions.loadPage),
          concatLatestFrom(() => this.store.select(allSelectors.isPageInCache)),
          map(([{ forceLoad }, isInCache]) =>
            !forceLoad && isInCache
              ? allActions.loadPageSuccess()
              : allActions.fetch()
          )
        );
      });
      this.preloadNextPage$ = createEffect(() => {
        return this.actions$.pipe(
          ofType(allActions.loadPageSuccess),
          concatMapTo(
            this.store.select(allSelectors.selectPageInfo).pipe(first())
          ),
          filter(
            (pageInfo) =>
              !!pageInfo.total &&
              pageInfo.hasNext &&
              pageInfo.cacheType !== 'full'
          ),
          concatMap((pageInfo) =>
            this.store
              .select(allSelectors.isPageInCache, {
                page: pageInfo.pageIndex + 1,
              })
              .pipe(
                first(),
                map((isInCache) => (!isInCache && pageInfo) || undefined)
              )
          ),
          filter((pageInfo) => !!pageInfo),
          concatMap((pageInfo) => [
            allActions.setRequestPage({ index: pageInfo.pageIndex + 1 }),
            allActions.fetch(),
          ])
        );
      });
      this.loadFirstPage$ = createEffect(() => {
        return this.actions$.pipe(
          ofType(allActions.loadFirstPage),
          map(() => allActions.loadPage({ index: 0 }))
        );
      });
      this.loadPreviousPage$ = createEffect(() => {
        return this.actions$.pipe(
          ofType(allActions.loadPreviousPage),
          concatMapTo(
            this.store.select(allSelectors.selectPageInfo).pipe(first())
          ),
          map((page) =>
            page.hasPrevious
              ? allActions.loadPage({ index: page.pageIndex - 1 })
              : allActions.loadPageFail()
          )
        );
      });
      this.loadNextPage$ = createEffect(() => {
        return this.actions$.pipe(
          ofType(allActions.loadNextPage),
          concatMapTo(
            this.store.select(allSelectors.selectPageInfo).pipe(first())
          ),
          map((page) =>
            page.hasNext
              ? allActions.loadPage({ index: page.pageIndex + 1 })
              : allActions.loadPageFail()
          )
        );
      });
      this.loadLastPage$ = createEffect(() => {
        return this.actions$.pipe(
          ofType(allActions.loadLastPage),
          concatMapTo(
            this.store.select(allSelectors.selectPageInfo).pipe(first())
          ),
          map((page) =>
            page.hasNext && page.pagesCount
              ? allActions.loadPage({ index: page.pagesCount - 1 })
              : allActions.loadPageFail()
          )
        );
      });
    }
  }
  PaginationEffect.decorators = [{ type: Injectable }];
  return [PaginationEffect];
}
//# sourceMappingURL=data:application/json;base64,
