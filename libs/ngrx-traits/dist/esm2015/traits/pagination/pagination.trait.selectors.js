import { createSelector } from '@ngrx/store';
export function createPaginationTraitSelectors(previousSelectors, allConfigs) {
  var _a;
  const { selectAll, isLoading } = previousSelectors;
  const filterFunction =
    (_a =
      allConfigs === null || allConfigs === void 0
        ? void 0
        : allConfigs.filter) === null || _a === void 0
      ? void 0
      : _a.filterFn;
  function selectPagination(state) {
    return state.pagination;
  }
  const selectPaginationFiltered = filterFunction
    ? createSelector(selectAll, selectPagination, (entities, pagination) => {
        return Object.assign(Object.assign({}, pagination), {
          total: entities.length,
          cache: Object.assign(Object.assign({}, pagination.cache), {
            start: 0,
            end: entities.length,
          }),
        });
      })
    : selectPagination;
  const selectPageEntities = createSelector(
    selectAll,
    selectPaginationFiltered,
    (entities, pagination, { page } = { page: pagination.currentPage }) => {
      const startIndex = page * pagination.pageSize - pagination.cache.start;
      let endIndex = startIndex + pagination.pageSize;
      endIndex =
        endIndex < pagination.cache.end ? endIndex : pagination.cache.end;
      return entities.slice(startIndex, endIndex);
    }
  );
  const selectPageInfo = createSelector(
    selectPaginationFiltered,
    (pagination) => {
      const pagesCount =
        pagination.total && pagination.total > 0
          ? Math.ceil(pagination.total / pagination.pageSize)
          : undefined;
      return {
        pageIndex: pagination.currentPage,
        total: pagination.total,
        pageSize: pagination.pageSize,
        pagesCount,
        hasPrevious: pagination.currentPage - 1 >= 0,
        hasNext:
          pagination.total && pagination.total > 0
            ? pagination.currentPage + 1 < pagesCount
            : true,
        cacheType: pagination.cache.type,
      };
    }
  );
  const isPageInCache = createSelector(
    selectPaginationFiltered,
    (pagination, { page } = { page: pagination.currentPage }) => {
      const startIndex = page * pagination.pageSize;
      let endIndex = startIndex + pagination.pageSize - 1;
      endIndex =
        pagination.total && endIndex > pagination.total
          ? pagination.total - 1
          : endIndex;
      return (
        startIndex >= pagination.cache.start && endIndex <= pagination.cache.end
      );
    }
  );
  const selectPage = createSelector(
    selectPageEntities,
    selectPageInfo,
    // props look unsued but they are pass to the selectPageEntities
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    (entities, pageInfo, props = { page: pageInfo.pageIndex }) =>
      Object.assign({ entities }, pageInfo)
  );
  const selectPagedRequest = createSelector(selectPagination, (pagination) => ({
    startIndex: pagination.pageSize * pagination.requestPage,
    size: pagination.pageSize * pagination.pagesToCache,
    page: pagination.requestPage,
  }));
  const isLoadingPage = createSelector(
    isLoading,
    selectPagination,
    (isLoading, pagination) =>
      isLoading && pagination.requestPage === pagination.currentPage
  );
  return {
    selectPageEntities,
    isPageInCache,
    selectPage,
    selectPagedRequest,
    selectPageInfo,
    isLoadingPage,
  };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi50cmFpdC5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90cmFpdHMvc3JjL3BhZ2luYXRpb24vcGFnaW5hdGlvbi50cmFpdC5zZWxlY3RvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQVM3QyxNQUFNLFVBQVUsOEJBQThCLENBQzVDLGlCQUFnRCxFQUNoRCxVQUE4Qzs7SUFFOUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsR0FBRyxpQkFBaUIsQ0FBQztJQUVuRCxNQUFNLGNBQWMsU0FBRyxVQUFVLGFBQVYsVUFBVSx1QkFBVixVQUFVLENBQUUsTUFBTSwwQ0FBRSxRQUFRLENBQUM7SUFFcEQsU0FBUyxnQkFBZ0IsQ0FBQyxLQUF1QztRQUMvRCxPQUFPLEtBQUssQ0FBQyxVQUFVLENBQUM7SUFDMUIsQ0FBQztJQUNELE1BQU0sd0JBQXdCLEdBRU8sY0FBYztRQUNqRCxDQUFDLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUUsRUFBRTtZQUNuRSx1Q0FDSyxVQUFVLEtBQ2IsS0FBSyxFQUFFLFFBQVEsQ0FBQyxNQUFNLEVBQ3RCLEtBQUssa0NBQ0EsVUFBVSxDQUFDLEtBQUssS0FDbkIsS0FBSyxFQUFFLENBQUMsRUFDUixHQUFHLEVBQUUsUUFBUSxDQUFDLE1BQU0sT0FFdEI7UUFDSixDQUFDLENBQUM7UUFDSixDQUFDLENBQUMsZ0JBQWdCLENBQUM7SUFFckIsTUFBTSxrQkFBa0IsR0FBRyxjQUFjLENBQ3ZDLFNBQVMsRUFDVCx3QkFBd0IsRUFDeEIsQ0FDRSxRQUFrQixFQUNsQixVQUFVLEVBQ1YsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxVQUFVLENBQUMsV0FBVyxFQUFFLEVBQzNDLEVBQUU7UUFDRixNQUFNLFVB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QUFDLFdBQVc7S0FDN0IsQ0FBQyxDQUFDLENBQUM7SUFFSixNQUFNLGFBQWEsR0FBRyxjQUFjLENBQ2xDLFNBQVMsRUFDVCxnQkFBZ0IsRUFDaEIsQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLEVBQUUsQ0FDeEIsU0FBUyxJQUFJLFVBQVUsQ0FBQyxXQUFXLEtBQUssVUFBVSxDQUFDLFdBQVcsQ0FDakUsQ0FBQztJQUVGLE9BQU87UUFDTCxrQkFBa0I7UUFDbEIsYUFBYTtRQUNiLFVBQVU7UUFDVixrQkFBa0I7UUFDbEIsY0FBYztRQUNkLGFBQWE7S0FDZCxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHtcbiAgRW50aXR5QW5kUGFnaW5hdGlvblN0YXRlLFxuICBQYWdpbmF0aW9uU2VsZWN0b3JzLFxuICBQYWdpbmF0aW9uU3RhdGUsXG59IGZyb20gJy4vcGFnaW5hdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBMb2FkRW50aXRpZXNTZWxlY3RvcnMgfSBmcm9tICcuLi9sb2FkLWVudGl0aWVzL2xvYWQtZW50aXRpZXMubW9kZWwnO1xuaW1wb3J0IHsgRmlsdGVyS2V5ZWRDb25maWcgfSBmcm9tICcuLi9maWx0ZXIvZmlsdGVyLm1vZGVsJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBhZ2luYXRpb25UcmFpdFNlbGVjdG9yczxFbnRpdHk+KFxuICBwcmV2aW91c1NlbGVjdG9yczogTG9hZEVudGl0aWVzU2VsZWN0b3JzPEVudGl0eT4sXG4gIGFsbENvbmZpZ3M6IEZpbHRlcktleWVkQ29uZmlnPEVudGl0eSwgdW5rbm93bj4sXG4pOiBQYWdpbmF0aW9uU2VsZWN0b3JzPEVudGl0eT4ge1xuICBjb25zdCB7IHNlbGVjdEFsbCwgaXNMb2FkaW5nIH0gPSBwcmV2aW91c1NlbGVjdG9ycztcblxuICBjb25zdCBmaWx0ZXJGdW5jdGlvbiA9IGFsbENvbmZpZ3M/LmZpbHRlcj8uZmlsdGVyRm47XG5cbiAgZnVuY3Rpb24gc2VsZWN0UGFnaW5hdGlvbihzdGF0ZTogRW50aXR5QW5kUGFnaW5hdGlvblN0YXRlPEVudGl0eT4pIHtcbiAgICByZXR1cm4gc3RhdGUucGFnaW5hdGlvbjtcbiAgfVxuICBjb25zdCBzZWxlY3RQYWdpbmF0aW9uRmlsdGVyZWQ6IChcbiAgICBzdGF0ZTogRW50aXR5QW5kUGFnaW5hdGlvblN0YXRlPEVudGl0eT4sXG4gICkgPT4gUGFnaW5hdGlvblN0YXRlWydwYWdpbmF0aW9uJ10gPSBmaWx0ZXJGdW5jdGlvblxuICAgID8gY3JlYXRlU2VsZWN0b3Ioc2VsZWN0QWxsLCBzZWxlY3RQYWdpbmF0aW9uLCAoZW50aXRpZXMsIHBhZ2luYXRpb24pID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5wYWdpbmF0aW9uLFxuICAgICAgICAgIHRvdGFsOiBlbnRpdGllcy5sZW5ndGgsXG4gICAgICAgICAgY2FjaGU6IHtcbiAgICAgICAgICAgIC4uLnBhZ2luYXRpb24uY2FjaGUsXG4gICAgICAgICAgICBzdGFydDogMCxcbiAgICAgICAgICAgIGVuZDogZW50aXRpZXMubGVuZ3RoLFxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICB9KVxuICAgIDogc2VsZWN0UGFnaW5hdGlvbjtcblxuICBjb25zdCBzZWxlY3RQYWdlRW50aXRpZXMgPSBjcmVhdGVTZWxlY3RvcihcbiAgICBzZWxlY3RBbGwsXG4gICAgc2VsZWN0UGFnaW5hdGlvbkZpbHRlcmVkLFxuICAgIChcbiAgICAgIGVudGl0aWVzOiBFbnRpdHlbXSxcbiAgICAgIHBhZ2luYXRpb24sXG4gICAgICB7IHBhZ2UgfSA9IHsgcGFnZTogcGFnaW5hdGlvbi5jdXJyZW50UGFnZSB9LFxuICAgICkgPT4ge1xuICAgICAgY29uc3Qgc3RhcnRJbmRleCA9IHBhZ2UgKiBwYWdpbmF0aW9uLnBhZ2VTaXplIC0gcGFnaW5hdGlvbi5jYWNoZS5zdGFydDtcbiAgICAgIGxldCBlbmRJbmRleCA9IHN0YXJ0SW5kZXggKyBwYWdpbmF0aW9uLnBhZ2VTaXplO1xuICAgICAgZW5kSW5kZXggPVxuICAgICAgICBlbmRJbmRleCA8IHBhZ2luYXRpb24uY2FjaGUuZW5kID8gZW5kSW5kZXggOiBwYWdpbmF0aW9uLmNhY2hlLmVuZDtcbiAgICAgIHJldHVybiBlbnRpdGllcy5zbGljZShzdGFydEluZGV4LCBlbmRJbmRleCk7XG4gICAgfSxcbiAgKTtcblxuICBjb25zdCBzZWxlY3RQYWdlSW5mbyA9IGNyZWF0ZVNlbGVjdG9yKFxuICAgIHNlbGVjdFBhZ2luYXRpb25GaWx0ZXJlZCxcbiAgICAocGFnaW5hdGlvbikgPT4ge1xuICAgICAgY29uc3QgcGFnZXNDb3VudCA9XG4gICAgICAgIHBhZ2luYXRpb24udG90YWwgJiYgcGFnaW5hdGlvbi50b3RhbCA+IDBcbiAgICAgICAgICA/IE1hdGguY2VpbChwYWdpbmF0aW9uLnRvdGFsIC8gcGFnaW5hdGlvbi5wYWdlU2l6ZSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhZ2VJbmRleDogcGFnaW5hdGlvbi5jdXJyZW50UGFnZSxcbiAgICAgICAgdG90YWw6IHBhZ2luYXRpb24udG90YWwsXG4gICAgICAgIHBhZ2VTaXplOiBwYWdpbmF0aW9uLnBhZ2VTaXplLFxuICAgICAgICBwYWdlc0NvdW50LFxuICAgICAgICBoYXNQcmV2aW91czogcGFnaW5hdGlvbi5jdXJyZW50UGFnZSAtIDEgPj0gMCxcbiAgICAgICAgaGFzTmV4dDpcbiAgICAgICAgICBwYWdpbmF0aW9uLnRvdGFsICYmIHBhZ2luYXRpb24udG90YWwgPiAwXG4gICAgICAgICAgICA/IHBhZ2luYXRpb24uY3VycmVudFBhZ2UgKyAxIDwgcGFnZXNDb3VudCFcbiAgICAgICAgICAgIDogdHJ1ZSxcbiAgICAgICAgY2FjaGVUeXBlOiBwYWdpbmF0aW9uLmNhY2hlLnR5cGUsXG4gICAgICB9O1xuICAgIH0sXG4gICk7XG5cbiAgY29uc3QgaXNQYWdlSW5DYWNoZSA9IGNyZWF0ZVNlbGVjdG9yKFxuICAgIHNlbGVjdFBhZ2luYXRpb25GaWx0ZXJlZCxcbiAgICAocGFnaW5hdGlvbiwgeyBwYWdlIH0gPSB7IHBhZ2U6IHBhZ2luYXRpb24uY3VycmVudFBhZ2UgfSkgPT4ge1xuICAgICAgY29uc3Qgc3RhcnRJbmRleCA9IHBhZ2UgKiBwYWdpbmF0aW9uLnBhZ2VTaXplO1xuICAgICAgbGV0IGVuZEluZGV4ID0gc3RhcnRJbmRleCArIHBhZ2luYXRpb24ucGFnZVNpemUgLSAxO1xuICAgICAgZW5kSW5kZXggPVxuICAgICAgICBwYWdpbmF0aW9uLnRvdGFsICYmIGVuZEluZGV4ID4gcGFnaW5hdGlvbi50b3RhbFxuICAgICAgICAgID8gcGFnaW5hdGlvbi50b3RhbCAtIDFcbiAgICAgICAgICA6IGVuZEluZGV4O1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgc3RhcnRJbmRleCA+PSBwYWdpbmF0aW9uLmNhY2hlLnN0YXJ0ICYmIGVuZEluZGV4IDw9IHBhZ2luYXRpb24uY2FjaGUuZW5kXG4gICAgICApO1xuICAgIH0sXG4gICk7XG5cbiAgY29uc3Qgc2VsZWN0UGFnZSA9IGNyZWF0ZVNlbGVjdG9yKFxuICAgIHNlbGVjdFBhZ2VFbnRpdGllcyxcbiAgICBzZWxlY3RQYWdlSW5mbyxcbiAgICAvLyBwcm9wcyBsb29rIHVuc3VlZCBidXQgdGhleSBhcmUgcGFzcyB0byB0aGUgc2VsZWN0UGFnZUVudGl0aWVzXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIChlbnRpdGllcywgcGFnZUluZm8sIHByb3BzID0geyBwYWdlOiBwYWdlSW5mby5wYWdlSW5kZXggfSkgPT4gKHtcbiAgICAgIGVudGl0aWVzLFxuICAgICAgLi4ucGFnZUluZm8sXG4gICAgfSksXG4gICk7XG5cbiAgY29uc3Qgc2VsZWN0UGFnZWRSZXF1ZXN0ID0gY3JlYXRlU2VsZWN0b3Ioc2VsZWN0UGFnaW5hdGlvbiwgKHBhZ2luYXRpb24pID0+ICh7XG4gICAgc3RhcnRJbmRleDogcGFnaW5hdGlvbi5wYWdlU2l6ZSAqIHBhZ2luYXRpb24ucmVxdWVzdFBhZ2UsXG4gICAgc2l6ZTogcGFnaW5hdGlvbi5wYWdlU2l6ZSAqIHBhZ2luYXRpb24ucGFnZXNUb0NhY2hlLFxuICAgIHBhZ2U6IHBhZ2luYXRpb24ucmVxdWVzdFBhZ2UsXG4gIH0pKTtcblxuICBjb25zdCBpc0xvYWRpbmdQYWdlID0gY3JlYXRlU2VsZWN0b3IoXG4gICAgaXNMb2FkaW5nLFxuICAgIHNlbGVjdFBhZ2luYXRpb24sXG4gICAgKGlzTG9hZGluZywgcGFnaW5hdGlvbikgPT5cbiAgICAgIGlzTG9hZGluZyAmJiBwYWdpbmF0aW9uLnJlcXVlc3RQYWdlID09PSBwYWdpbmF0aW9uLmN1cnJlbnRQYWdlLFxuICApO1xuXG4gIHJldHVybiB7XG4gICAgc2VsZWN0UGFnZUVudGl0aWVzLFxuICAgIGlzUGFnZUluQ2FjaGUsXG4gICAgc2VsZWN0UGFnZSxcbiAgICBzZWxlY3RQYWdlZFJlcXVlc3QsXG4gICAgc2VsZWN0UGFnZUluZm8sXG4gICAgaXNMb2FkaW5nUGFnZSxcbiAgfTtcbn1cbiJdfQ==
