import { createReducer, on } from '@ngrx/store';
import { insertIf } from 'ngrx-traits';
export function createSingleSelectionInitialState(
  previousInitialState,
  allConfigs
) {
  var _a;
  const selectedId =
    (_a = allConfigs.singleSelection) === null || _a === void 0
      ? void 0
      : _a.selectedId;
  return Object.assign(Object.assign({}, previousInitialState), { selectedId });
}
export function createSingleSelectionTraitReducer(
  initialState,
  allActions,
  allMutators,
  allConfigs
) {
  var _a, _b;
  const { adapter } = allConfigs.loadEntities;
  const sortRemote =
    (_a = allConfigs.sort) === null || _a === void 0 ? void 0 : _a.remote;
  const paginationCacheType =
    (_b = allConfigs.pagination) === null || _b === void 0
      ? void 0
      : _b.cacheType;
  return createReducer(
    initialState,
    on(allActions.select, (state, { id }) => allMutators.select(id, state)),
    on(allActions.deselect, (state) => allMutators.deselect(state)),
    on(allActions.toggleSelect, (state, { id }) =>
      allMutators.toggleSelect(id, state)
    ),
    ...insertIf(allActions.removeAll, () =>
      on(allActions.removeAll, (state) => allMutators.deselect(state))
    ),
    ...insertIf(sortRemote, () =>
      on(allActions.sort, (state) => allMutators.deselect(state))
    ),
    ...insertIf(allActions.filter, () =>
      on(allActions.filter, (state) => allMutators.deselect(state))
    ),
    ...insertIf(!allActions.loadPageSuccess, () =>
      on(allActions.fetchSuccess, (state) => allMutators.deselect(state))
    ),
    ...insertIf(
      allActions.loadPageSuccess && paginationCacheType === 'partial',
      () =>
        on(allActions.loadPageSuccess, (state) => allMutators.deselect(state))
    ),
    ...insertIf(allActions.remove, () =>
      on(allActions.remove, (state, { keys }) => {
        const shouldDeselect = keys.some((v) => v === state.selectedId);
        return shouldDeselect
          ? Object.assign(Object.assign({}, state), { selectedId: undefined })
          : state;
      })
    ),
    ...insertIf(allActions.update, () =>
      on(allActions.update, (state, { updates }) => {
        const change = updates.find((updated) => {
          const id = adapter.selectId(updated.changes);
          return id && id !== updated.id && state.selectedId === updated.id;
        });
        return change
          ? Object.assign(Object.assign({}, state), {
              selectedId: adapter.selectId(change.changes),
            })
          : state;
      })
    )
  );
}
//# sourceMappingURL=data:application/json;base64,
