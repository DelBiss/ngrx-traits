import { createReducer, on } from '@ngrx/store';
import { insertIf } from 'ngrx-traits';
export function createCrudInitialState(previousInitialState) {
  return Object.assign(Object.assign({}, previousInitialState), {
    changes: [],
  });
}
export function createCrudTraitReducer(
  initialState,
  allActions,
  allMutators,
  allConfigs
) {
  var _a, _b, _c;
  const sortRemote =
    (_a = allConfigs.sort) === null || _a === void 0 ? void 0 : _a.remote;
  const filterRemote =
    allConfigs.filter &&
    !((_b = allConfigs.filter) === null || _b === void 0
      ? void 0
      : _b.filterFn);
  const paginationCacheType =
    (_c = allConfigs.pagination) === null || _c === void 0
      ? void 0
      : _c.cacheType;
  return createReducer(
    initialState,
    on(allActions.add, (state, { entities }) =>
      allMutators.add(entities, state)
    ),
    on(allActions.update, (state, { updates }) =>
      allMutators.update(updates, state)
    ),
    on(allActions.upsert, (state, { entities }) =>
      allMutators.upsert(entities, state)
    ),
    on(allActions.remove, (state, { keys }) => allMutators.remove(keys, state)),
    on(allActions.removeAll, (state, { predicate }) =>
      predicate
        ? allMutators.remove(predicate, state)
        : allMutators.removeAll(state)
    ),
    on(allActions.clearChanges, (state) => allMutators.clearChanges(state)),
    ...insertIf(sortRemote, () =>
      on(allActions.sort, (state) => allMutators.clearChanges(state))
    ),
    ...insertIf(filterRemote, () =>
      on(allActions.filter, (state) => allMutators.clearChanges(state))
    ),
    ...insertIf(!allActions.loadPageSuccess, () =>
      on(allActions.fetchSuccess, (state) => allMutators.clearChanges(state))
    ),
    ...insertIf(
      allActions.loadPageSuccess && paginationCacheType === 'partial',
      () =>
        on(allActions.loadPageSuccess, (state) =>
          allMutators.clearChanges(state)
        )
    )
  );
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3J1ZC50cmFpdC5yZWR1Y2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdHJhaXRzL3NyYy9jcnVkL2NydWQudHJhaXQucmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQVVoRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXZDLE1BQU0sVUFBVSxzQkFBc0IsQ0FDcEMsb0JBQXlCO0lBRXpCLHVDQUNLLG9CQUFvQixLQUN2QixPQUFPLEVBQUUsRUFBRSxJQUNYO0FBQ0osQ0FBQztBQUNELE1BQU0sVUFBVSxzQkFBc0IsQ0FJcEMsWUFBZSxFQUNmLFVBSW1CLEVBQ25CLFdBQWlDLEVBQ2pDLFVBSXVCOztJQUV2QixNQUFNLFVBQVUsU0FBRyxVQUFVLENBQUMsSUFBSSwwQ0FBRSxNQUFNLENBQUM7SUFDM0MsTUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDLE1BQU0sSUFBSSxRQUFDLFVBQVUsQ0FBQyxNQUFNLDBDQUFFLFFBQVEsQ0FBQSxDQUFDO0lBQ3ZFLE1BQU0sbUJBQW1CLFNBQUcsVUFBVSxDQUFDLFVBQVUsMENBQUUsU0FBUyxDQUFDO0lBRTdELE9BQU8sYUFBYSxDQUNsQixZQUFZLEVBQ1osRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLENBQ3pDLFdBQVcsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUNqQyxFQUNELEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUMzQyxXQUFXLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FDbkMsRUFDRCxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FDNUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQ3BDLEVBQ0QsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQ3hDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBYSxFQUFFLEtBQUssQ0FBQyxDQUN6QyxFQUNELEVBQUUsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUNoRCxTQUFTO1FBQ1AsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQztRQUN0QyxDQUFDLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FDakMsRUFDRCxFQUFFLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUN2RSxHQUFHLFFBQVEsQ0FBSSxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQzlCLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQ2hFLEVBQ0QsR0FBRyxRQUFRLENBQUksWUFBWSxFQUFFLEdBQUcsRUFBRSxDQUNoQyxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUNsRSxFQUNELEdBQUcsUUFBUSxDQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUUsQ0FDL0MsRUFBRSxDQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FDeEUsRUFDRCxHQUFHLFFBQVEsQ0FDVCxVQUFVLENBQUMsZUFBZSxJQUFJLG1CQUFtQixLQUFLLFNBQVMsRUFDL0QsR0FBRyxFQUFFLENBQ0gsRUFBRSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUN2QyxXQUFXLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUNoQyxDQUNKLENBQ0YsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWx0ZXJBY3Rpb25zLCBGaWx0ZXJLZXllZENvbmZpZyB9IGZyb20gJy4uL2ZpbHRlci9maWx0ZXIubW9kZWwnO1xuaW1wb3J0IHsgY3JlYXRlUmVkdWNlciwgb24gfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQge1xuICBDcnVkQWN0aW9ucyxcbiAgQ3J1ZEtleWVkQ29uZmlnLFxuICBDcnVkTXV0YXRvcnMsXG4gIEVudGl0eUFuZENydWRTdGF0ZSxcbn0gZnJvbSAnLi9jcnVkLm1vZGVsJztcbmltcG9ydCB7IExvYWRFbnRpdGllc0FjdGlvbnMsIExvYWRFbnRpdGllc0tleWVkQ29uZmlnIH0gZnJvbSAnLi4vbG9hZC1lbnRpdGllcyc7XG5pbXBvcnQgeyBTb3J0QWN0aW9ucywgU29ydEtleWVkQ29uZmlnIH0gZnJvbSAnLi4vc29ydCc7XG5pbXBvcnQgeyBQYWdpbmF0aW9uQWN0aW9ucywgUGFnaW5hdGlvbktleWVkQ29uZmlnIH0gZnJvbSAnLi4vcGFnaW5hdGlvbic7XG5pbXBvcnQgeyBpbnNlcnRJZiB9IGZyb20gJ25ncngtdHJhaXRzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNydWRJbml0aWFsU3RhdGU8RW50aXR5PihcbiAgcHJldmlvdXNJbml0aWFsU3RhdGU6IGFueSxcbik6IEVudGl0eUFuZENydWRTdGF0ZTxFbnRpdHk+IHtcbiAgcmV0dXJuIHtcbiAgICAuLi5wcmV2aW91c0luaXRpYWxTdGF0ZSxcbiAgICBjaGFuZ2VzOiBbXSxcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDcnVkVHJhaXRSZWR1Y2VyPFxuICBFbnRpdHksXG4gIFMgZXh0ZW5kcyBFbnRpdHlBbmRDcnVkU3RhdGU8RW50aXR5Pixcbj4oXG4gIGluaXRpYWxTdGF0ZTogUyxcbiAgYWxsQWN0aW9uczogQ3J1ZEFjdGlvbnM8RW50aXR5PiAmXG4gICAgTG9hZEVudGl0aWVzQWN0aW9uczxFbnRpdHk+ICZcbiAgICBTb3J0QWN0aW9uczxFbnRpdHk+ICZcbiAgICBGaWx0ZXJBY3Rpb25zPGFueT4gJlxuICAgIFBhZ2luYXRpb25BY3Rpb25zLFxuICBhbGxNdXRhdG9yczogQ3J1ZE11dGF0b3JzPEVudGl0eT4sXG4gIGFsbENvbmZpZ3M6IENydWRLZXllZENvbmZpZyAmXG4gICAgRmlsdGVyS2V5ZWRDb25maWc8RW50aXR5LCB1bmtub3duPiAmXG4gICAgTG9hZEVudGl0aWVzS2V5ZWRDb25maWc8RW50aXR5PiAmXG4gICAgU29ydEtleWVkQ29uZmlnPEVudGl0eT4gJlxuICAgIFBhZ2luYXRpb25LZXllZENvbmZpZyxcbikge1xuICBjb25zdCBzb3J0UmVtb3RlID0gYWxsQ29uZmlncy5zb3J0Py5yZW1vdGU7XG4gIGNvbnN0IGZpbHRlclJlbW90ZSA9IGFsbENvbmZpZ3MuZmlsdGVyICYmICFhbGxDb25maWdzLmZpbHRlcj8uZmlsdGVyRm47XG4gIGNvbnN0IHBhZ2luYXRpb25DYWNoZVR5cGUgPSBhbGxDb25maWdzLnBhZ2luYXRpb24/LmNhY2hlVHlwZTtcblxuICByZXR1cm4gY3JlYXRlUmVkdWNlcihcbiAgICBpbml0aWFsU3RhdGUsXG4gICAgb24oYWxsQWN0aW9ucy5hZGQsIChzdGF0ZSwgeyBlbnRpdGllcyB9KSA9PlxuICAgICAgYWxsTXV0YXRvcnMuYWRkKGVudGl0aWVzLCBzdGF0ZSksXG4gICAgKSxcbiAgICBvbihhbGxBY3Rpb25zLnVwZGF0ZSwgKHN0YXRlLCB7IHVwZGF0ZXMgfSkgPT5cbiAgICAgIGFsbE11dGF0b3JzLnVwZGF0ZSh1cGRhdGVzLCBzdGF0ZSksXG4gICAgKSxcbiAgICBvbihhbGxBY3Rpb25zLnVwc2VydCwgKHN0YXRlLCB7IGVudGl0aWVzIH0pID0+XG4gICAgICBhbGxNdXRhdG9ycy51cHNlcnQoZW50aXRpZXMsIHN0YXRlKSxcbiAgICApLFxuICAgIG9uKGFsbEFjdGlvbnMucmVtb3ZlLCAoc3RhdGUsIHsga2V5cyB9KSA9PlxuICAgICAgYWxsTXV0YXRvcnMucmVtb3ZlKGtleXMgYXMgYW55W10sIHN0YXRlKSxcbiAgICApLFxuICAgIG9uKGFsbEFjdGlvbnMucmVtb3ZlQWxsLCAoc3RhdGUsIHsgcHJlZGljYXRlIH0pID0+XG4gICAgICBwcmVkaWNhdGVcbiAgICAgICAgPyBhbGxNdXRhdG9ycy5yZW1vdmUocHJlZGljYXRlLCBzdGF0ZSlcbiAgICAgICAgOiBhbGxNdXRhdG9ycy5yZW1vdmVBbGwoc3RhdGUpLFxuICAgICksXG4gICAgb24oYWxsQWN0aW9ucy5jbGVhckNoYW5nZXMsIChzdGF0ZSkgPT4gYWxsTXV0YXRvcnMuY2xlYXJDaGFuZ2VzKHN0YXRlKSksXG4gICAgLi4uaW5zZXJ0SWY8Uz4oc29ydFJlbW90ZSwgKCkgPT5cbiAgICAgIG9uKGFsbEFjdGlvbnMuc29ydCwgKHN0YXRlKSA9PiBhbGxNdXRhdG9ycy5jbGVhckNoYW5nZXMoc3RhdGUpKSxcbiAgICApLFxuICAgIC4uLmluc2VydElmPFM+KGZpbHRlclJlbW90ZSwgKCkgPT5cbiAgICAgIG9uKGFsbEFjdGlvbnMuZmlsdGVyLCAoc3RhdGUpID0+IGFsbE11dGF0b3JzLmNsZWFyQ2hhbmdlcyhzdGF0ZSkpLFxuICAgICksXG4gICAgLi4uaW5zZXJ0SWY8Uz4oIWFsbEFjdGlvbnMubG9hZFBhZ2VTdWNjZXNzLCAoKSA9PlxuICAgICAgb24oYWxsQWN0aW9ucy5mZXRjaFN1Y2Nlc3MsIChzdGF0ZSkgPT4gYWxsTXV0YXRvcnMuY2xlYXJDaGFuZ2VzKHN0YXRlKSksXG4gICAgKSxcbiAgICAuLi5pbnNlcnRJZjxTPihcbiAgICAgIGFsbEFjdGlvbnMubG9hZFBhZ2VTdWNjZXNzICYmIHBhZ2luYXRpb25DYWNoZVR5cGUgPT09ICdwYXJ0aWFsJyxcbiAgICAgICgpID0+XG4gICAgICAgIG9uKGFsbEFjdGlvbnMubG9hZFBhZ2VTdWNjZXNzLCAoc3RhdGUpID0+XG4gICAgICAgICAgYWxsTXV0YXRvcnMuY2xlYXJDaGFuZ2VzKHN0YXRlKSxcbiAgICAgICAgKSxcbiAgICApLFxuICApO1xufVxuIl19
