import { createSelector } from '@ngrx/store';
import { ChangeType } from './crud.model';
export function createCrudTraitSelectors(previousSelectors) {
  function selectChanges(state) {
    return state.changes;
  }
  function selectFilteredChanges(state) {
    const cache = {};
    return state.changes.reduce((acc, value) => {
      const changes = cache[value.id];
      if (!changes) {
        cache[value.id] = [value.changeType];
        acc.push(value);
        return acc;
      }
      if (value.changeType === ChangeType.UPDATED) {
        return acc;
      }
      if (
        value.changeType === ChangeType.DELETED &&
        changes.includes(ChangeType.CREATED)
      ) {
        delete cache[value.id];
        return acc.filter((v) => v.id !== value.id);
      }
      if (value.changeType === ChangeType.DELETED) {
        delete cache[value.id];
        const newAcc = acc.filter((v) => v.id !== value.id);
        newAcc.push(value);
        return newAcc;
      }
      return acc;
    }, []);
  }
  const { selectEntities } = previousSelectors;
  const selectAllChanges = createSelector(
    (state) => selectEntities(state),
    selectChanges,
    (entities, changed, { type }) => {
      if (type)
        return changed
          .filter((c) => c.changeType === type)
          .map((change) => {
            var _a;
            return {
              changeType: change.changeType,
              entity:
                (_a = entities[change.id]) !== null && _a !== void 0
                  ? _a
                  : {
                      id: change.id,
                    },
            };
          });
      const map = changed.map((change) => {
        var _a;
        return {
          changeType: change.changeType,
          entity:
            (_a = entities[change.id]) !== null && _a !== void 0
              ? _a
              : {
                  id: change.id,
                },
        };
      });
      return map;
    }
  );
  const selectAllFilteredChanges = createSelector(
    selectFilteredChanges,
    (state) => selectEntities(state),
    (changes, entities) =>
      changes.map((c) => {
        var _a;
        return {
          entity:
            (_a = entities[c.id]) !== null && _a !== void 0 ? _a : { id: c.id },
          changeType: c.changeType,
        };
      })
  );
  return {
    selectAllChanges,
    selectAllFilteredChanges,
    selectChanges,
    selectFilteredChanges,
  };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3J1ZC50cmFpdC5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90cmFpdHMvc3JjL2NydWQvY3J1ZC50cmFpdC5zZWxlY3RvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM3QyxPQUFPLEVBRUwsVUFBVSxHQUtYLE1BQU0sY0FBYyxDQUFDO0FBSXRCLE1BQU0sVUFBVSx3QkFBd0IsQ0FDdEMsaUJBQWdEO0lBRWhELFNBQVMsYUFBYSxDQUE4QixLQUFRO1FBQzFELE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQztJQUN2QixDQUFDO0lBRUQsU0FBUyxxQkFBcUIsQ0FBOEIsS0FBUTtRQUNsRSxNQUFNLEtBQUssR0FBbUMsRUFBRSxDQUFDO1FBQ2pELE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDekMsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNoQyxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNaLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQ3JDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ2hCLE9BQU8sR0FBRyxDQUFDO2FBQ1o7WUFFRCxJQUFJLEtBQUssQ0FBQyxVQUFVLEtBQUssVUFBVSxDQUFDLE9BQU8sRUFBRTtnQkFDM0MsT0FBTyxHQUFHLENBQUM7YUFDWjtZQUVELElBQ0UsS0FBSyxDQUFDLFVBQVUsS0FBSyxVQUFVLENBQUMsT0FBTztnQkFDdkMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQ3BDO2dCQUNBLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDdkIsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUM3QztZQUVELElBQUksS0FBSyxDQUFDLFVBQVUsS0FBSyxVQUFVLENBQUMsT0FBTyxFQUFFO2dCQUMzQyxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ3ZCLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNwRCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNuQixPQUFPLE1BQU0sQ0FBQzthQUNmO1lBQ0QsT0FBTyxHQUFHLENBQUM7UUFDYixDQUFDLEVBQUUsRUFBc0IsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxNQUFNLEVBQUUsY0FBYyxFQUFFLEdBQUcsaUJBQWlCLENBQUM7SUFFN0MsTUFBTSxnQkFBZ0IsR0FBRyxjQUFjLENBQ3JDLENBQUMsS0FBaUMsRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxFQUM1RCxhQUFhLEVBQ2IsQ0FDRSxRQUE0QixFQUM1QixPQUF5QixFQUN6QixFQUFFLElBQUksRUFBd0IsRUFDOUIsRUFBRTtRQUNGLElBQUksSUFBSTtZQUNOLE9BQU8sT0FBTztpQkFDWCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLEtBQUssSUFBSSxDQUFDO2lCQUNwQyxHQUFHLENBQ0YsQ0FBQyxNQUFNLEVBQUUsRUFBRTs7Z0JBQ1QsT0FBQSxDQUFDO29CQUNDLFVBQVUsRUFBRSxNQUFNLENBQUMsVUFBVTtvQkFDN0IsTUFBTSxRQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLG1DQUFJO3dCQUM3QixFQUFFLEVBQUUsTUFBTSxDQUFDLEVBQUU7cUJBQ2Q7aUJBQ3VCLENBQUEsQ0FBQTthQUFBLENBQzdCLENBQUM7UUFFTixNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUNyQixDQUFDLE1BQU0sRUFBRSxFQUFFOztZQUNULE9BQUEsQ0FBQztnQkFDQyxVQUFVLEVBQUUsTUFBTSxDQUFDLFVBQVU7Z0JBQzdCLE1BQU0sUUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxtQ0FBSTtvQkFDN0IsRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUFFO2lCQUNkO2FBQ3VCLENBQUEsQ0FBQTtTQUFBLENBQzdCLENBQUM7UUFDRixPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUMsQ0FDRixDQUFDO0lBRUYsTUFBTSx3QkFBd0IsR0FBRyxjQUFjLENBQzdDLHFCQUFxQixFQUNyQixDQUFDLEtBQWlDLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsRUFDNUQsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FDcEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFOztRQUNoQixPQUFPO1lBQ0wsTUFBTSxRQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLG1DQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDdEMsVUFBVSxFQUFFLENBQUMsQ0FBQyxVQUFVO1NBQ0QsQ0FBQztJQUM1QixDQUFDLENBQUMsQ0FDTCxDQUFDO0lBRUYsT0FBTztRQUNMLGdCQUFnQjtRQUNoQix3QkFBd0I7UUFDeEIsYUFBYTtRQUNiLHFCQUFxQjtLQUN0QixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHtcbiAgQ2hhbmdlLFxuICBDaGFuZ2VUeXBlLFxuICBDcnVkU2VsZWN0b3JzLFxuICBDcnVkU3RhdGUsXG4gIEVudGl0eUFuZENydWRTdGF0ZSxcbiAgRW50aXR5Q2hhbmdlLFxufSBmcm9tICcuL2NydWQubW9kZWwnO1xuaW1wb3J0IHsgTG9hZEVudGl0aWVzU2VsZWN0b3JzIH0gZnJvbSAnLi4vbG9hZC1lbnRpdGllcy9sb2FkLWVudGl0aWVzLm1vZGVsJztcbmltcG9ydCB7IERpY3Rpb25hcnkgfSBmcm9tICdAbmdyeC9lbnRpdHknO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ3J1ZFRyYWl0U2VsZWN0b3JzPEVudGl0eT4oXG4gIHByZXZpb3VzU2VsZWN0b3JzOiBMb2FkRW50aXRpZXNTZWxlY3RvcnM8RW50aXR5Pixcbik6IENydWRTZWxlY3RvcnM8RW50aXR5PiB7XG4gIGZ1bmN0aW9uIHNlbGVjdENoYW5nZXM8UyBleHRlbmRzIENydWRTdGF0ZTxFbnRpdHk+PihzdGF0ZTogUykge1xuICAgIHJldHVybiBzdGF0ZS5jaGFuZ2VzO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VsZWN0RmlsdGVyZWRDaGFuZ2VzPFMgZXh0ZW5kcyBDcnVkU3RhdGU8RW50aXR5Pj4oc3RhdGU6IFMpIHtcbiAgICBjb25zdCBjYWNoZTogeyBbaWQ6IHN0cmluZ106IENoYW5nZVR5cGVbXSB9ID0ge307XG4gICAgcmV0dXJuIHN0YXRlLmNoYW5nZXMucmVkdWNlKChhY2MsIHZhbHVlKSA9PiB7XG4gICAgICBjb25zdCBjaGFuZ2VzID0gY2FjaGVbdmFsdWUuaWRdO1xuICAgICAgaWYgKCFjaGFuZ2VzKSB7XG4gICAgICAgIGNhY2hlW3ZhbHVlLmlkXSA9IFt2YWx1ZS5jaGFuZ2VUeXBlXTtcbiAgICAgICAgYWNjLnB1c2godmFsdWUpO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfVxuXG4gICAgICBpZiAodmFsdWUuY2hhbmdlVHlwZSA9PT0gQ2hhbmdlVHlwZS5VUERBVEVEKSB7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgdmFsdWUuY2hhbmdlVHlwZSA9PT0gQ2hhbmdlVHlwZS5ERUxFVEVEICYmXG4gICAgICAgIGNoYW5nZXMuaW5jbHVkZXMoQ2hhbmdlVHlwZS5DUkVBVEVEKVxuICAgICAgKSB7XG4gICAgICAgIGRlbGV0ZSBjYWNoZVt2YWx1ZS5pZF07XG4gICAgICAgIHJldHVybiBhY2MuZmlsdGVyKCh2KSA9PiB2LmlkICE9PSB2YWx1ZS5pZCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWx1ZS5jaGFuZ2VUeXBlID09PSBDaGFuZ2VUeXBlLkRFTEVURUQpIHtcbiAgICAgICAgZGVsZXRlIGNhY2hlW3ZhbHVlLmlkXTtcbiAgICAgICAgY29uc3QgbmV3QWNjID0gYWNjLmZpbHRlcigodikgPT4gdi5pZCAhPT0gdmFsdWUuaWQpO1xuICAgICAgICBuZXdBY2MucHVzaCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiBuZXdBY2M7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIFtdIGFzIENoYW5nZTxFbnRpdHk+W10pO1xuICB9XG5cbiAgY29uc3QgeyBzZWxlY3RFbnRpdGllcyB9ID0gcHJldmlvdXNTZWxlY3RvcnM7XG5cbiAgY29uc3Qgc2VsZWN0QWxsQ2hhbmdlcyA9IGNyZWF0ZVNlbGVjdG9yKFxuICAgIChzdGF0ZTogRW50aXR5QW5kQ3J1ZFN0YXRlPEVudGl0eT4pID0+IHNlbGVjdEVudGl0aWVzKHN0YXRlKSxcbiAgICBzZWxlY3RDaGFuZ2VzLFxuICAgIChcbiAgICAgIGVudGl0aWVzOiBEaWN0aW9uYXJ5PEVudGl0eT4sXG4gICAgICBjaGFuZ2VkOiBDaGFuZ2U8RW50aXR5PltdLFxuICAgICAgeyB0eXBlIH06IHsgdHlwZTogQ2hhbmdlVHlwZSB9LFxuICAgICkgPT4ge1xuICAgICAgaWYgKHR5cGUpXG4gICAgICAgIHJldHVybiBjaGFuZ2VkXG4gICAgICAgICAgLmZpbHRlcigoYykgPT4gYy5jaGFuZ2VUeXBlID09PSB0eXBlKVxuICAgICAgICAgIC5tYXAoXG4gICAgICAgICAgICAoY2hhbmdlKSA9PlxuICAgICAgICAgICAgICAoe1xuICAgICAgICAgICAgICAgIGNoYW5nZVR5cGU6IGNoYW5nZS5jaGFuZ2VUeXBlLFxuICAgICAgICAgICAgICAgIGVudGl0eTogZW50aXRpZXNbY2hhbmdlLmlkXSA/PyB7XG4gICAgICAgICAgICAgICAgICBpZDogY2hhbmdlLmlkLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0gYXMgRW50aXR5Q2hhbmdlPEVudGl0eT4pLFxuICAgICAgICAgICk7XG5cbiAgICAgIGNvbnN0IG1hcCA9IGNoYW5nZWQubWFwKFxuICAgICAgICAoY2hhbmdlKSA9PlxuICAgICAgICAgICh7XG4gICAgICAgICAgICBjaGFuZ2VUeXBlOiBjaGFuZ2UuY2hhbmdlVHlwZSxcbiAgICAgICAgICAgIGVudGl0eTogZW50aXRpZXNbY2hhbmdlLmlkXSA/PyB7XG4gICAgICAgICAgICAgIGlkOiBjaGFuZ2UuaWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0gYXMgRW50aXR5Q2hhbmdlPEVudGl0eT4pLFxuICAgICAgKTtcbiAgICAgIHJldHVybiBtYXA7XG4gICAgfSxcbiAgKTtcblxuICBjb25zdCBzZWxlY3RBbGxGaWx0ZXJlZENoYW5nZXMgPSBjcmVhdGVTZWxlY3RvcihcbiAgICBzZWxlY3RGaWx0ZXJlZENoYW5nZXMsXG4gICAgKHN0YXRlOiBFbnRpdHlBbmRDcnVkU3RhdGU8RW50aXR5PikgPT4gc2VsZWN0RW50aXRpZXMoc3RhdGUpLFxuICAgIChjaGFuZ2VzLCBlbnRpdGllcykgPT5cbiAgICAgIGNoYW5nZXMubWFwKChjKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZW50aXR5OiBlbnRpdGllc1tjLmlkXSA/PyB7IGlkOiBjLmlkIH0sXG4gICAgICAgICAgY2hhbmdlVHlwZTogYy5jaGFuZ2VUeXBlLFxuICAgICAgICB9IGFzIEVudGl0eUNoYW5nZTxFbnRpdHk+O1xuICAgICAgfSksXG4gICk7XG5cbiAgcmV0dXJuIHtcbiAgICBzZWxlY3RBbGxDaGFuZ2VzLFxuICAgIHNlbGVjdEFsbEZpbHRlcmVkQ2hhbmdlcyxcbiAgICBzZWxlY3RDaGFuZ2VzLFxuICAgIHNlbGVjdEZpbHRlcmVkQ2hhbmdlcyxcbiAgfTtcbn1cbiJdfQ==
