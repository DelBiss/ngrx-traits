import { ChangeType } from '../crud/crud.model';
export function createCrudTraitMutators(allConfigs) {
  const { storeChanges } = allConfigs.crud || {};
  const adapter = allConfigs.loadEntities.adapter;
  function generateChangeEntry(entity, changeType, customId) {
    return {
      id:
        customId !== null && customId !== void 0
          ? customId
          : adapter.selectId(entity),
      changeType,
      entityChanges: (storeChanges && entity) || undefined,
    };
  }
  function add(entities, state, addFirst = false) {
    const changes = [
      ...state.changes,
      ...entities.map((entity) =>
        generateChangeEntry(entity, ChangeType.CREATED)
      ),
    ];
    if (!addFirst)
      return adapter.addMany(
        entities,
        Object.assign(Object.assign({}, state), { changes })
      );
    const newIds = entities.map((e) => adapter.selectId(e));
    const newEntities = Object.assign({}, state.entities);
    entities.forEach((e) => {
      const id = adapter.selectId(e);
      newEntities[id] = e;
    });
    return Object.assign(Object.assign({}, state), {
      ids: [...newIds, ...state.ids],
      entities: newEntities,
      changes,
    });
  }
  function upsert(entities, state) {
    const oldChanges = [...state.changes];
    const existingIds = adapter.getSelectors().selectIds(state);
    const [additions, updates] = entities.reduce(
      ([a, u], entity) =>
        existingIds.indexOf(adapter.selectId(entity)) !== -1
          ? [a, [...u, entity]]
          : [[...a, entity], u],
      [new Array(), new Array()]
    );
    return adapter.upsertMany(
      entities,
      Object.assign(Object.assign({}, state), {
        changes: [
          ...oldChanges,
          ...additions.map((entity) =>
            generateChangeEntry(entity, ChangeType.CREATED)
          ),
          ...updates.map((entity) =>
            generateChangeEntry(entity, ChangeType.UPDATED)
          ),
        ],
      })
    );
  }
  function remove(keysOrPredicate, state) {
    if (typeof keysOrPredicate === 'function') {
      return adapter.removeMany(
        keysOrPredicate,
        Object.assign(Object.assign({}, state), {
          changes: [
            ...state.changes,
            ...state.ids.map((id) => ({
              id,
              changeType: ChangeType.DELETED,
            })),
          ],
        })
      );
    }
    return adapter.removeMany(
      keysOrPredicate,
      Object.assign(Object.assign({}, state), {
        changes: [
          ...state.changes,
          ...keysOrPredicate.map((key) => ({
            id: key,
            changeType: ChangeType.DELETED,
          })),
        ],
      })
    );
  }
  function removeAll(state) {
    return adapter.removeAll(
      Object.assign(Object.assign({}, state), {
        changes: [
          ...state.changes,
          ...state.ids.map((id) => ({
            id,
            changeType: ChangeType.DELETED,
          })),
        ],
      })
    );
  }
  function clearChanges(state) {
    return Object.assign(Object.assign({}, state), { changes: [] });
  }
  function update(updates, state) {
    const oldChanges = [...state.changes];
    updates.forEach((updated) => {
      const id = adapter.selectId(updated.changes);
      if (id && id !== updated.id) {
        // if the id changes update the id of pold changes
        const index = oldChanges.findIndex((v) => v.id === updated.id);
        const oldChange = oldChanges[index];
        oldChanges[index] = Object.assign(Object.assign({}, oldChange), { id });
      }
    });
    return adapter.updateMany(
      updates,
      Object.assign(Object.assign({}, state), {
        changes: [
          ...oldChanges,
          ...updates.map((updated) => {
            var _a;
            return {
              id:
                (_a = adapter.selectId(updated.changes)) !== null &&
                _a !== void 0
                  ? _a
                  : updated.id,
              changeType: ChangeType.UPDATED,
              entityChanges: (storeChanges && updated.changes) || undefined,
            };
          }),
        ],
      })
    );
  }
  return {
    add,
    remove,
    update,
    removeAll,
    clearChanges,
    upsert,
  };
}
//# sourceMappingURL=data:application/json;base64,
