import {
  createLoadEntitiesInitialState,
  createLoadEntitiesTraitReducer,
} from './load-entities.trait.reducer';
import { loadEntitiesTraitKey } from './load-entities.model';
import { createLoadEntitiesTraitMutators } from './load-entities.mutators';
import { createTraitFactory } from 'ngrx-traits';
import { createEntityAdapter } from '@ngrx/entity';
import { createLoadEntitiesTraitActions } from './load-entities.trait.actions';
import { createLoadEntitiesTraitSelectors } from './load-entities.trait.selectors';
export function addLoadEntities(traitConfig) {
  const adapter = createEntityAdapter(traitConfig);
  return createTraitFactory({
    key: loadEntitiesTraitKey,
    config: Object.assign(Object.assign({}, traitConfig), { adapter }),
    actions: ({ actionsGroupKey }) =>
      createLoadEntitiesTraitActions(actionsGroupKey),
    selectors: ({ allConfigs }) => createLoadEntitiesTraitSelectors(allConfigs),
    mutators: ({ allConfigs }) => createLoadEntitiesTraitMutators(allConfigs),
    initialState: ({ previousInitialState, allConfigs }) =>
      createLoadEntitiesInitialState(previousInitialState, allConfigs),
    reducer: ({ initialState, allActions, allMutators, allConfigs }) =>
      createLoadEntitiesTraitReducer(
        initialState,
        allActions,
        allMutators,
        allConfigs
      ),
  });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC1lbnRpdGllcy50cmFpdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3RyYWl0cy9zcmMvbG9hZC1lbnRpdGllcy9sb2FkLWVudGl0aWVzLnRyYWl0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCw4QkFBOEIsRUFDOUIsOEJBQThCLEdBQy9CLE1BQU0sK0JBQStCLENBQUM7QUFDdkMsT0FBTyxFQUlMLG9CQUFvQixHQUNyQixNQUFNLHVCQUF1QixDQUFDO0FBUS9CLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzNFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNqRCxPQUFPLEVBQUUsbUJBQW1CLEVBQWlCLE1BQU0sY0FBYyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQy9FLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRW5GLE1BQU0sVUFBVSxlQUFlLENBQzdCLFdBQXlEO0lBRXpELE1BQU0sT0FBTyxHQUEwQixtQkFBbUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUV4RSxPQUFPLGtCQUFrQixDQUFDO1FBQ3hCLEdBQUcsRUFBRSxvQkFBb0I7UUFDekIsTUFBTSxFQUFFLGdDQUFLLFdBQVcsS0FBRSxPQUFPLEdBQWdDO1FBQ2pFLE9BQU8sRUFBRSxDQUFDLEVBQUUsZUFBZSxFQUE2QixFQUFFLEVBQUUsQ0FDMUQsOEJBQThCLENBQVMsZUFBZSxDQUFDO1FBQ3pELFNBQVMsRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUErQixFQUFFLEVBQUUsQ0FDekQsZ0NBQWdDLENBQzlCLFVBQXFFLENBQ3RFO1FBQ0gsUUFBUSxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQW1DLEVBQUUsRUFBRSxDQUM1RCwrQkFBK0IsQ0FDN0IsVUFBcUUsQ0FDdEU7UUFDSCxZQUFZLEVBQUUsQ0FBQyxFQUNiLG9CQUFvQixFQUNwQixVQUFVLEdBQ3FCLEVBQUUsRUFBRSxDQUNuQyw4QkFBOEIsQ0FBUyxvQkFBb0IsRUFBRSxVQUFVLENBQUM7UUFDMUUsT0FBTyxFQUFFLENBQUMsRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLENBQ2pFLDhCQUE4QixDQUM1QixZQUFZLEVBQ1osVUFBVSxFQUNWLFdBQVcsRUFDWCxVQUFxRSxDQUN0RTtLQUNKLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBjcmVhdGVMb2FkRW50aXRpZXNJbml0aWFsU3RhdGUsXG4gIGNyZWF0ZUxvYWRFbnRpdGllc1RyYWl0UmVkdWNlcixcbn0gZnJvbSAnLi9sb2FkLWVudGl0aWVzLnRyYWl0LnJlZHVjZXInO1xuaW1wb3J0IHtcbiAgRW50aXR5QW5kU3RhdHVzU3RhdGUsXG4gIExvYWRFbnRpdGllc0NvbmZpZyxcbiAgTG9hZEVudGl0aWVzS2V5ZWRDb25maWcsXG4gIGxvYWRFbnRpdGllc1RyYWl0S2V5LFxufSBmcm9tICcuL2xvYWQtZW50aXRpZXMubW9kZWwnO1xuaW1wb3J0IHtcbiAgVHJhaXRBY3Rpb25zRmFjdG9yeUNvbmZpZyxcbiAgVHJhaXRJbml0aWFsU3RhdGVGYWN0b3J5Q29uZmlnLFxuICBUcmFpdFNlbGVjdG9yc0ZhY3RvcnlDb25maWcsXG4gIFRyYWl0U3RhdGVNdXRhdG9yc0ZhY3RvcnlDb25maWcsXG59IGZyb20gJ25ncngtdHJhaXRzJztcbmltcG9ydCB7IFBhZ2luYXRpb25LZXllZENvbmZpZyB9IGZyb20gJy4uL3BhZ2luYXRpb24nO1xuaW1wb3J0IHsgY3JlYXRlTG9hZEVudGl0aWVzVHJhaXRNdXRhdG9ycyB9IGZyb20gJy4vbG9hZC1lbnRpdGllcy5tdXRhdG9ycyc7XG5pbXBvcnQgeyBjcmVhdGVUcmFpdEZhY3RvcnkgfSBmcm9tICduZ3J4LXRyYWl0cyc7XG5pbXBvcnQgeyBjcmVhdGVFbnRpdHlBZGFwdGVyLCBFbnRpdHlBZGFwdGVyIH0gZnJvbSAnQG5ncngvZW50aXR5JztcbmltcG9ydCB7IGNyZWF0ZUxvYWRFbnRpdGllc1RyYWl0QWN0aW9ucyB9IGZyb20gJy4vbG9hZC1lbnRpdGllcy50cmFpdC5hY3Rpb25zJztcbmltcG9ydCB7IGNyZWF0ZUxvYWRFbnRpdGllc1RyYWl0U2VsZWN0b3JzIH0gZnJvbSAnLi9sb2FkLWVudGl0aWVzLnRyYWl0LnNlbGVjdG9ycyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRMb2FkRW50aXRpZXM8RW50aXR5PihcbiAgdHJhaXRDb25maWc/OiBPbWl0PExvYWRFbnRpdGllc0NvbmZpZzxFbnRpdHk+LCAnYWRhcHRlcic+LFxuKSB7XG4gIGNvbnN0IGFkYXB0ZXI6IEVudGl0eUFkYXB0ZXI8RW50aXR5PiA9IGNyZWF0ZUVudGl0eUFkYXB0ZXIodHJhaXRDb25maWcpO1xuXG4gIHJldHVybiBjcmVhdGVUcmFpdEZhY3Rvcnkoe1xuICAgIGtleTogbG9hZEVudGl0aWVzVHJhaXRLZXksXG4gICAgY29uZmlnOiB7IC4uLnRyYWl0Q29uZmlnLCBhZGFwdGVyIH0gYXMgTG9hZEVudGl0aWVzQ29uZmlnPEVudGl0eT4sXG4gICAgYWN0aW9uczogKHsgYWN0aW9uc0dyb3VwS2V5IH06IFRyYWl0QWN0aW9uc0ZhY3RvcnlDb25maWcpID0+XG4gICAgICBjcmVhdGVMb2FkRW50aXRpZXNUcmFpdEFjdGlvbnM8RW50aXR5PihhY3Rpb25zR3JvdXBLZXkpLFxuICAgIHNlbGVjdG9yczogKHsgYWxsQ29uZmlncyB9OiBUcmFpdFNlbGVjdG9yc0ZhY3RvcnlDb25maWcpID0+XG4gICAgICBjcmVhdGVMb2FkRW50aXRpZXNUcmFpdFNlbGVjdG9yczxFbnRpdHk+KFxuICAgICAgICBhbGxDb25maWdzIGFzIExvYWRFbnRpdGllc0tleWVkQ29uZmlnPEVudGl0eT4gJiBQYWdpbmF0aW9uS2V5ZWRDb25maWcsXG4gICAgICApLFxuICAgIG11dGF0b3JzOiAoeyBhbGxDb25maWdzIH06IFRyYWl0U3RhdGVNdXRhdG9yc0ZhY3RvcnlDb25maWcpID0+XG4gICAgICBjcmVhdGVMb2FkRW50aXRpZXNUcmFpdE11dGF0b3JzPEVudGl0eT4oXG4gICAgICAgIGFsbENvbmZpZ3MgYXMgTG9hZEVudGl0aWVzS2V5ZWRDb25maWc8RW50aXR5PiAmIFBhZ2luYXRpb25LZXllZENvbmZpZyxcbiAgICAgICksXG4gICAgaW5pdGlhbFN0YXRlOiAoe1xuICAgICAgcHJldmlvdXNJbml0aWFsU3RhdGUsXG4gICAgICBhbGxDb25maWdzLFxuICAgIH06IFRyYWl0SW5pdGlhbFN0YXRlRmFjdG9yeUNvbmZpZykgPT5cbiAgICAgIGNyZWF0ZUxvYWRFbnRpdGllc0luaXRpYWxTdGF0ZTxFbnRpdHk+KHByZXZpb3VzSW5pdGlhbFN0YXRlLCBhbGxDb25maWdzKSxcbiAgICByZWR1Y2VyOiAoeyBpbml0aWFsU3RhdGUsIGFsbEFjdGlvbnMsIGFsbE11dGF0b3JzLCBhbGxDb25maWdzIH0pID0+XG4gICAgICBjcmVhdGVMb2FkRW50aXRpZXNUcmFpdFJlZHVjZXI8RW50aXR5LCBFbnRpdHlBbmRTdGF0dXNTdGF0ZTxFbnRpdHk+PihcbiAgICAgICAgaW5pdGlhbFN0YXRlLFxuICAgICAgICBhbGxBY3Rpb25zLFxuICAgICAgICBhbGxNdXRhdG9ycyxcbiAgICAgICAgYWxsQ29uZmlncyBhcyBMb2FkRW50aXRpZXNLZXllZENvbmZpZzxFbnRpdHk+ICYgUGFnaW5hdGlvbktleWVkQ29uZmlnLFxuICAgICAgKSxcbiAgfSk7XG59XG4iXX0=
