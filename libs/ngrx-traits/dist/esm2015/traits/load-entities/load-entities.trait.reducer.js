import { createReducer, on } from '@ngrx/store';
import { insertIf } from 'ngrx-traits';
export function createLoadEntitiesInitialState(
  previousInitialState = {},
  allConfigs
) {
  const traitConfig = allConfigs.loadEntities;
  const adapter = traitConfig.adapter;
  return Object.assign(
    Object.assign(
      Object.assign({}, previousInitialState),
      adapter.getInitialState()
    ),
    { status: undefined }
  );
}
export function createLoadEntitiesTraitReducer(
  initialState,
  actions,
  allMutators,
  allConfigs
) {
  const handleEntitiesMerge = !(allConfigs === null || allConfigs === void 0
    ? void 0
    : allConfigs.pagination);
  return createReducer(
    initialState,
    on(actions.fetch, (state) =>
      Object.assign(Object.assign({}, state), { status: 'loading' })
    ),
    on(actions.fetchFail, (state) =>
      Object.assign(Object.assign({}, state), { status: 'fail' })
    ),
    on(actions.fetchSuccess, (state) =>
      Object.assign(Object.assign({}, state), { status: 'success' })
    ),
    ...insertIf(handleEntitiesMerge, () =>
      on(actions.fetchSuccess, (state, { entities }) =>
        allMutators.setAll(entities, Object.assign({}, state))
      )
    )
  );
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC1lbnRpdGllcy50cmFpdC5yZWR1Y2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdHJhaXRzL3NyYy9sb2FkLWVudGl0aWVzL2xvYWQtZW50aXRpZXMudHJhaXQucmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxPQUFPLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVoRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXZDLE1BQU0sVUFBVSw4QkFBOEIsQ0FDNUMsb0JBQW9CLEdBQUcsRUFBRSxFQUN6QixVQUEyQztJQUUzQyxNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsWUFBWSxDQUFDO0lBQzVDLE1BQU0sT0FBTyxHQUFHLFdBQVksQ0FBQyxPQUFPLENBQUM7SUFFckMscURBQ0ssb0JBQW9CLEdBQ3BCLE9BQVEsQ0FBQyxlQUFlLEVBQUUsS0FDN0IsTUFBTSxFQUFFLFNBQVMsSUFDakI7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLDhCQUE4QixDQUk1QyxZQUFlLEVBQ2YsT0FBK0IsRUFDL0IsV0FBb0MsRUFDcEMsVUFBOEQ7SUFFOUQsTUFBTSxtQkFBbUIsR0FBRyxFQUFDLFVBQVUsYUFBVixVQUFVLHVCQUFWLFVBQVUsQ0FBRSxVQUFVLENBQUEsQ0FBQztJQUVwRCxPQUFPLGFBQWEsQ0FDbEIsWUFBWSxFQUNaLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxpQ0FDeEIsS0FBSyxLQUNSLE1BQU0sRUFBRSxTQUFTLElBQ2pCLENBQUMsRUFDSCxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsaUNBQzVCLEtBQUssS0FDUixNQUFNLEVBQUUsTUFBTSxJQUNkLENBQUMsRUFDSCxFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsaUNBQy9CLEtBQUssS0FDUixNQUFNLEVBQUUsU0FBUyxJQUNqQixDQUFDLEVBQ0gsR0FBRyxRQUFRLENBQUksbUJBQW1CLEVBQUUsR0FBRyxFQUFFLENBQ3ZDLEVBQUUsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUMvQyxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsb0JBQ3RCLEtBQUssRUFDUixDQUNILENBQ0YsQ0FDRixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb24gKi9cbmltcG9ydCB7XG4gIEVudGl0eUFuZFN0YXR1c1N0YXRlLFxuICBMb2FkRW50aXRpZXNBY3Rpb25zLFxuICBMb2FkRW50aXRpZXNLZXllZENvbmZpZyxcbiAgTG9hZEVudGl0aWVzTXV0YXRvcnMsXG59IGZyb20gJy4vbG9hZC1lbnRpdGllcy5tb2RlbCc7XG5pbXBvcnQgeyBjcmVhdGVSZWR1Y2VyLCBvbiB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IFBhZ2luYXRpb25LZXllZENvbmZpZyB9IGZyb20gJy4uL3BhZ2luYXRpb24nO1xuaW1wb3J0IHsgaW5zZXJ0SWYgfSBmcm9tICduZ3J4LXRyYWl0cyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMb2FkRW50aXRpZXNJbml0aWFsU3RhdGU8RW50aXR5PihcbiAgcHJldmlvdXNJbml0aWFsU3RhdGUgPSB7fSxcbiAgYWxsQ29uZmlnczogTG9hZEVudGl0aWVzS2V5ZWRDb25maWc8RW50aXR5Pixcbik6IEVudGl0eUFuZFN0YXR1c1N0YXRlPEVudGl0eT4ge1xuICBjb25zdCB0cmFpdENvbmZpZyA9IGFsbENvbmZpZ3MubG9hZEVudGl0aWVzO1xuICBjb25zdCBhZGFwdGVyID0gdHJhaXRDb25maWchLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5wcmV2aW91c0luaXRpYWxTdGF0ZSxcbiAgICAuLi5hZGFwdGVyIS5nZXRJbml0aWFsU3RhdGUoKSxcbiAgICBzdGF0dXM6IHVuZGVmaW5lZCxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUxvYWRFbnRpdGllc1RyYWl0UmVkdWNlcjxcbiAgVCxcbiAgUyBleHRlbmRzIEVudGl0eUFuZFN0YXR1c1N0YXRlPFQ+LFxuPihcbiAgaW5pdGlhbFN0YXRlOiBTLFxuICBhY3Rpb25zOiBMb2FkRW50aXRpZXNBY3Rpb25zPFQ+LFxuICBhbGxNdXRhdG9yczogTG9hZEVudGl0aWVzTXV0YXRvcnM8VD4sXG4gIGFsbENvbmZpZ3M6IExvYWRFbnRpdGllc0tleWVkQ29uZmlnPFQ+ICYgUGFnaW5hdGlvbktleWVkQ29uZmlnLFxuKSB7XG4gIGNvbnN0IGhhbmRsZUVudGl0aWVzTWVyZ2UgPSAhYWxsQ29uZmlncz8ucGFnaW5hdGlvbjtcblxuICByZXR1cm4gY3JlYXRlUmVkdWNlcihcbiAgICBpbml0aWFsU3RhdGUsXG4gICAgb24oYWN0aW9ucy5mZXRjaCwgKHN0YXRlKSA9PiAoe1xuICAgICAgLi4uc3RhdGUsXG4gICAgICBzdGF0dXM6ICdsb2FkaW5nJyxcbiAgICB9KSksXG4gICAgb24oYWN0aW9ucy5mZXRjaEZhaWwsIChzdGF0ZSkgPT4gKHtcbiAgICAgIC4uLnN0YXRlLFxuICAgICAgc3RhdHVzOiAnZmFpbCcsXG4gICAgfSkpLFxuICAgIG9uKGFjdGlvbnMuZmV0Y2hTdWNjZXNzLCAoc3RhdGUpID0+ICh7XG4gICAgICAuLi5zdGF0ZSxcbiAgICAgIHN0YXR1czogJ3N1Y2Nlc3MnLFxuICAgIH0pKSxcbiAgICAuLi5pbnNlcnRJZjxTPihoYW5kbGVFbnRpdGllc01lcmdlLCAoKSA9PlxuICAgICAgb24oYWN0aW9ucy5mZXRjaFN1Y2Nlc3MsIChzdGF0ZSwgeyBlbnRpdGllcyB9KSA9PlxuICAgICAgICBhbGxNdXRhdG9ycy5zZXRBbGwoZW50aXRpZXMsIHtcbiAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgfSksXG4gICAgICApLFxuICAgICksXG4gICk7XG59XG4iXX0=
