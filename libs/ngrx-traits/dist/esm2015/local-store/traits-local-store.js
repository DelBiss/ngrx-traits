import { Injectable, Injector } from '@angular/core';
import { createFeatureSelector, ReducerManager, Store } from '@ngrx/store';
import { EffectSources } from '@ngrx/effects';
import { getDestroyActionName } from '../trait-effect';
let id = 0;
function uniqueComponentId() {
  return id++;
}
export function buildLocalTraits(
  injector,
  componentName,
  traitFactory,
  fetchEffectFactory
) {
  var _a;
  const reducers = injector.get(ReducerManager);
  const effects = injector.get(EffectSources);
  const store = injector.get(Store);
  const componentId = `${componentName}_${uniqueComponentId()}`;
  const traits = traitFactory({
    featureSelector: createFeatureSelector(componentId),
    actionsGroupKey: `[${componentId}]`,
  });
  traits.reducer && reducers.addReducer(componentId, traits.reducer);
  const fetchEffect =
    fetchEffectFactory === null || fetchEffectFactory === void 0
      ? void 0
      : fetchEffectFactory(traits.actions, traits.selectors);
  const providers =
    (traits.effects && [...traits.effects.map((e) => ({ provide: e }))]) || [];
  if (fetchEffect) {
    providers.push({ provide: fetchEffect });
  }
  const i = Injector.create({
    providers: providers,
    parent: injector,
  });
  (_a = traits.effects) === null || _a === void 0
    ? void 0
    : _a.forEach((e) => {
        const effect = i.get(e);
        effect.componentId = componentId;
        effects.addEffects(effect);
      });
  if (fetchEffectFactory) {
    const effect = i.get(fetchEffect);
    effect.componentId = componentId;
    effects.addEffects(effect);
  }
  function destroy() {
    store.dispatch({ type: getDestroyActionName(componentId) });
    /**
     * A service that extends TraitsLocalStore and other component service are destroyed
     * before the component that depends on them, this causes that any subscriptions
     * to selectors of the TraitsLocalStore could fail because the store state is removed before
     * they are unsubscribe by the onDestroy of the component. Executing reducers.removeReducer
     * inside setTimeout ensures the state is remove after the component onDestroy was called,
     * avoiding the before mentioned possible issues.
     */
    setTimeout(() => reducers.removeReducer(componentId));
  }
  return Object.assign({ destroy }, traits);
}
export class TraitsLocalStore {
  constructor(injector) {
    this.injector = injector;
    const config = this.setup();
    this.traits = buildLocalTraits(
      this.injector,
      config.componentName,
      config.traitsFactory,
      config.effectFactory
    );
    this.actions = this.traits.actions;
    this.selectors = this.traits.selectors;
  }
  ngOnDestroy() {
    this.traits.destroy();
  }
}
TraitsLocalStore.decorators = [{ type: Injectable }];
TraitsLocalStore.ctorParameters = () => [{ type: Injector }];
//# sourceMappingURL=data:application/json;base64,
