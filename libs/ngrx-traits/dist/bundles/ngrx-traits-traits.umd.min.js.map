{"version":3,"sources":["../../traits/src/load-entities/load-entities.model.ts","../../../../node_modules/tslib/tslib.es6.js","../../traits/src/load-entities/load-entities.utils.ts","../../traits/src/filter/filter.trait.selectors.ts","../../traits/src/pagination/pagination.model.ts","../../traits/src/filter/filter.model.ts","../../traits/src/pagination/pagination.trait.reducer.ts","../../traits/src/multi-selection/multi-selection.utils.ts","../../traits/src/multi-selection/multi-selection.trait.reducer.ts","../../traits/src/crud/crud.model.ts","../../traits/src/sort/sort.model.ts","../../traits/src/sort/sort.utils.ts","../../traits/src/async-action/async-action.trait.ts","../../traits/src/crud/crud.trait.ts","../../traits/src/crud/crud.trait.actions.ts","../../traits/src/crud/crud.trait.selectors.ts","../../traits/src/crud/crud.trait.mutators.ts","../../traits/src/crud/crud.trait.reducer.ts","../../traits/src/filter/filter.trait.ts","../../traits/src/filter/filter.trait.actions.ts","../../traits/src/filter/filter.trait.mutators.ts","../../traits/src/filter/filter.trait.reducer.ts","../../traits/src/filter/filter.trait.effect.ts","../../traits/src/load-entities/load-entities.trait.ts","../../traits/src/load-entities/load-entities.trait.actions.ts","../../traits/src/load-entities/load-entities.trait.selectors.ts","../../traits/src/load-entities/load-entities.mutators.ts","../../traits/src/load-entities/load-entities.trait.reducer.ts","../../traits/src/load-entity/load-entity.trait.ts","../../traits/src/multi-selection/multi-selection.trait.ts","../../traits/src/multi-selection/multi-selection.trait.actions.ts","../../traits/src/multi-selection/multi-selection.trait.selectors.ts","../../traits/src/multi-selection/multi-selection.trait.mutators.ts","../../traits/src/pagination/pagination.trait.ts","../../traits/src/pagination/pagination.trait.actions.ts","../../traits/src/pagination/pagination.trait.selectors.ts","../../traits/src/pagination/pagination.trait.mutators.ts","../../traits/src/pagination/pagination.trait.effects.ts","../../traits/src/reset/reset.trait.ts","../../traits/src/single-selection/single-selection.trait.ts","../../traits/src/single-selection/single-selection.trait.actions.ts","../../traits/src/single-selection/single-selection.trait.selectors.ts","../../traits/src/single-selection/single-selection.trait.mutators.ts","../../traits/src/single-selection/single-selection.trait.reducer.ts","../../traits/src/sort/sort.trait.ts","../../traits/src/sort/sort.trait.actions.ts","../../traits/src/sort/sort.trait.selectors.ts","../../traits/src/sort/sort.trait.mutators.ts","../../traits/src/sort/sort.trait.reducer.ts","../../traits/src/sort/sort.trait.effect.ts","../../traits/src/single-selection/single-selection.model.ts"],"names":["loadEntitiesTraitKey","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","TypeError","String","__","this","constructor","create","__read","o","n","m","Symbol","iterator","r","e","i","ar","next","done","push","value","error","__spread","arguments","length","concat","isLoading","state","status","isSuccess","isFail","selectFilter","filters","paginationTraitKey","filterTraitKey","createPaginationTraitReducer","initialState","allActions","allSelectors","allMutators","allConfigs","addToCacheTotal","add","assign","pagination","total","_a","clearPagesCache","entities","ids","currentPage","cache","start","end","filterRemote","filter","filterFn","createReducer","apply","on","loadPage","_b","index","requestPage","setRequestPage","loadPageSuccess","loadPageFail","fetchSuccess","mergePaginatedEntities","insertIf","remove","keys","selectTotal","recalculateTotal","removeAll","multiDeselect","id","selectedIds","s","t","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__rest","multiSelect","_c","multiToggleSelect","multiClearSelection","selectTotalSelected","createMultiSelectionTraitReducer","adapter","loadEntities","sortRemote","sort","remote","paginationCacheType","cacheType","toggleSelectAll","forEach","v","update","updates","changedIds","reduce","acc","updated","selectId","changes","selectedIds_1","updateSelectedIdsChanged","ChangeType","crudTraitKey","sortTraitKey","sortingDataAccessor","data","sortHeaderId","_isNumberValue","numberValue","Number","sortData","active","direction","a","valueA","valueB","comparatorResult","toString","localeCompare","addAsyncAction","result","internalActions","name","actionProps","actionSuccessProps","actionFailProps","nameAsSentence","replace","charAt","toUpperCase","slice","createTraitFactory","key","config","actions","actionsGroupKey","request","createAction","requestSuccess","requestFail","selectors","capitalizedName","previousInitialState","reducer","storeChanges","depends","_i","upsert","predicate","clearChanges","createCrudTraitActions","previousSelectors","selectChanges","selectFilteredChanges","changeType","UPDATED","DELETED","includes","CREATED","newAcc","selectEntities","selectAllChanges","createSelector","changed","type","c","map","change","entity","selectAllFilteredChanges","createCrudTraitSelectors","mutators","crud","generateChangeEntry","customId","entityChanges","undefined","addFirst","addMany","newIds","newEntities","keysOrPredicate","removeMany","oldChanges","findIndex","oldChange","updateMany","existingIds","getSelectors","selectIds","u","additions","upsertMany","createCrudTraitMutators","createCrudInitialState","_d","createCrudTraitReducer","defaultDebounceTime","defaultFilter","props","forceLoad","patch","storeFilter","createFilterTraitActions","setFilters","createFilterInitialState","createFilterTraitReducer","effects","traitConfig","FilterEffect","_super","_this","storeFilter$","createEffect","debounce","debounceTime","scheduler","asyncScheduler","actions$","pipe","ofType","EMPTY","timer","concatMap","payload","store","select","first","storedFilters","of","distinctUntilChanged","previous","current","JSON","stringify","action","fetch$","loadFirstPage","fetch","TraitEffect","Injectable","createFilterTraitEffects","createEntityAdapter","fetchFail","createLoadEntitiesTraitActions","entitySelectors","filterFunction","selectAll","createLoadEntitiesTraitSelectors","setAll","createLoadEntitiesTraitMutators","getInitialState","createLoadEntitiesInitialState","handleEntitiesMerge","createLoadEntitiesTraitReducer","entityName","createMultiSelectionTraitActions","selectIdsSelected","selectAllIdsSelected","selectEntitiesSelected","acum","selectAllSelected","isAllSelected","totalSelected","createMultiSelectionTraitSelectors","createMultiSelectionInitialState","toMap","createMultiSelectionTraitMutators","pageSize","_e","_f","pagesToCache","loadPreviousPage","loadNextPage","loadLastPage","createPaginationTraitActions","selectPagination","selectPaginationFiltered","selectPageEntities","startIndex","page","endIndex","selectPageInfo","pagesCount","Math","ceil","pageIndex","hasPrevious","hasNext","isPageInCache","selectPage","pageInfo","selectPagedRequest","size","isLoadingPage","createPaginationTraitSelectors","isPreloadNextPages","createPaginationTraitMutators","createPaginationInitialState","PaginationEffect","loadPage$","concatLatestFrom","isInCache","preloadNextPage$","concatMapTo","loadFirstPage$","loadPreviousPage$","loadNextPage$","loadLastPage$","createPaginationTraitEffects","reset","ResetEffect","externalReset$","resetOn","mapTo","deselect","toggleSelect","createSingleSelectionTraitActions","selectIdSelected","selectedId","selectEntitySelected","singleSelection","createSingleSelectionInitialState","some","find","createSingleSelectionTraitReducer","defaultSort","resetSort","createSortTraitActions","selectSort","sortEntities","sortedIds","createSortTraitMutators","default","createSortInitialState","createSortTraitReducer","SortEffect","remoteSort$","createSortTraitEffect"],"mappings":"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","sourcesContent":["import { Comparer, EntityAdapter, EntityState, IdSelector } from '@ngrx/entity';\n\nimport { ActionCreator, TypedAction } from '@ngrx/store/src/models';\nimport { Dictionary } from '@ngrx/entity/src/models';\nimport { KeyedConfig } from 'ngrx-traits';\n\nexport type Status = 'loading' | 'success' | 'fail';\n\nexport interface StatusState {\n  status?: Status;\n}\n\nexport interface EntityAndStatusState<T> extends EntityState<T>, StatusState {}\n\nexport type LoadEntitiesActions<T> = {\n  fetch: ActionCreator<string, () => TypedAction<string>>;\n  fetchSuccess: ActionCreator<\n    string,\n    (props: {\n      entities: T[];\n      total?: number;\n    }) => { entities: T[]; total?: number } & TypedAction<string>\n  >;\n  fetchFail: ActionCreator<\n    string,\n    (props: { error?: string }) => { error?: string } & TypedAction<string>\n  >;\n};\n\nexport type LoadEntitiesSelectors<T> = {\n  selectIds: (state: EntityAndStatusState<T>) => string[] | number[];\n  selectEntities: (state: EntityAndStatusState<T>) => Dictionary<T>;\n  selectAll: (state: EntityAndStatusState<T>) => T[];\n  selectTotal: (state: EntityAndStatusState<T>) => number;\n  isLoading: (state: EntityAndStatusState<T>) => boolean;\n  isSuccess: (state: EntityAndStatusState<T>) => boolean;\n  isFail: (state: EntityAndStatusState<T>) => boolean;\n};\n\nexport type LoadEntitiesMutators<T> = {\n  setAll<S extends EntityAndStatusState<T>>(entities: T[], state: S): S;\n};\n\nexport type GenericActionCreator = ActionCreator<\n  string,\n  (...args: unknown[]) => TypedAction<string>\n>;\n\nexport const loadEntitiesTraitKey = 'loadEntities';\n\nexport type LoadEntitiesConfig<T = unknown> = {\n  selectId?: IdSelector<T>;\n  sortComparer?: false | Comparer<T>;\n  resetOn?: GenericActionCreator[];\n  adapter: EntityAdapter<T>;\n};\n\nexport type LoadEntitiesKeyedConfig<T> = KeyedConfig<\n  typeof loadEntitiesTraitKey,\n  LoadEntitiesConfig<T>\n>;\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || from);\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","import { StatusState } from './load-entities.model';\n\nexport function isLoading<S extends StatusState>(state: S) {\n  return state.status === 'loading';\n}\nexport function isSuccess<S extends StatusState>(state: S) {\n  return state.status === 'success';\n}\nexport function isFail<S extends StatusState>(state: S) {\n  return state.status === 'fail';\n}\n","import { EntityAndFilterState, FilterSelectors } from './filter.model';\nexport function selectFilter<Entity, F>(\n  state: EntityAndFilterState<Entity, F>,\n) {\n  return state.filters;\n}\n\nexport function createFilterTraitSelectors<Entity, F>(): FilterSelectors<\n  Entity,\n  F\n> {\n  return {\n    selectFilter,\n  };\n}\n","/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { EntityAndStatusState } from '../load-entities';\n\nimport { ActionCreator, TypedAction } from '@ngrx/store/src/models';\n\nexport type CacheType = 'full' | 'partial' | 'grow';\nexport interface PaginationState {\n  pagination: {\n    currentPage: number;\n    requestPage: number;\n    pageSize: number;\n    total?: number;\n    pagesToCache: number;\n    cache: {\n      type: CacheType;\n      start: number;\n      end: number;\n    };\n  };\n}\n\nexport interface EntityAndPaginationState<T>\n  extends EntityAndStatusState<T>,\n    PaginationState {}\n\nexport type PaginationActions = {\n  loadPage: ActionCreator<\n    string,\n    (props: {\n      index: number;\n      forceLoad?: boolean;\n    }) => { index: number; forceLoad?: boolean } & TypedAction<string>\n  >;\n  loadPageSuccess: ActionCreator<string, () => TypedAction<string>>;\n  loadPageFail: ActionCreator<string, () => TypedAction<string>>;\n  loadNextPage: ActionCreator<string, () => TypedAction<string>>;\n  loadPreviousPage: ActionCreator<string, () => TypedAction<string>>;\n  loadFirstPage: ActionCreator<\n    string,\n    (forceLoad?: boolean) => { forceLoad?: boolean } & TypedAction<string>\n  >;\n  loadLastPage: ActionCreator<string, () => TypedAction<string>>;\n  clearPagesCache: ActionCreator<string, () => TypedAction<string>>;\n};\n\nexport type PaginationSelectors<T> = {\n  isPageInCache: (\n    state: EntityAndPaginationState<T>,\n    props?: { page?: number },\n  ) => boolean;\n  selectPageEntities: (\n    state: EntityAndPaginationState<T>,\n    props?: { page?: number },\n  ) => T[];\n  selectPage: (\n    state: EntityAndPaginationState<T>,\n    props?: { page?: number },\n  ) => PageModel<T>;\n  selectPagedRequest: (state: EntityAndPaginationState<T>) => PagedRequest;\n  selectPageInfo: (state: EntityAndPaginationState<T>) => PageInfoModel;\n  isLoadingPage: (state: EntityAndPaginationState<T>) => boolean;\n};\n\nexport type PaginationMutators<T> = {\n  mergePaginatedEntities<S extends EntityAndPaginationState<T>>(\n    entities: T[],\n    total: number | undefined,\n    state: S,\n  ): S;\n};\n\nexport interface PageModel<T> {\n  entities: T[];\n  pageIndex: number;\n  total: number | undefined;\n  pageSize: number;\n}\n\nexport interface PageInfoModel {\n  pageIndex: number;\n  total: number | undefined;\n  pageSize: number;\n  pagesCount: number | undefined;\n  hasPrevious: boolean;\n  hasNext: boolean;\n  cacheType: CacheType;\n}\n\nexport interface PagedRequest {\n  startIndex: number;\n  size: number;\n  page: number;\n}\n\nexport const paginationTraitKey = 'pagination';\n\nexport interface PaginationConfig {\n  cacheType?: CacheType;\n  pageSize?: number;\n  currentPage?: number;\n  pagesToCache?: number;\n}\n\nexport interface PaginationKeyedConfig {\n  pagination?: PaginationConfig;\n}\n","import { EntityAndStatusState } from '../load-entities/load-entities.model';\n\nimport { ActionCreator, TypedAction } from '@ngrx/store/src/models';\n\nexport interface FilterState<F> {\n  filters?: F;\n}\nexport interface EntityAndFilterState<T, F>\n  extends EntityAndStatusState<T>,\n    FilterState<F> {}\n\ntype FilterPatchConditionalType<F, P> = P extends true ? Partial<F> : F;\n\nexport interface FilterActionOverload<F> {\n  <P extends boolean>(props?: {\n    filters: FilterPatchConditionalType<F, P>;\n    forceLoad?: boolean;\n    patch: P;\n  }): {\n    filters: FilterPatchConditionalType<F, P>;\n    forceLoad: boolean;\n    patch: P;\n  } & TypedAction<string>;\n  (props?: { filters: F; forceLoad?: boolean }): {\n    filters: F;\n    forceLoad: boolean;\n    patch: boolean;\n  } & TypedAction<string>;\n}\n\nexport type FilterActions<F> = {\n  filter: ActionCreator<string, FilterActionOverload<F>>;\n};\nexport type FilterSelectors<T, F> = {\n  selectFilter: (state: EntityAndFilterState<T, F>) => F | undefined;\n};\n\nexport type FilterMutators<T, F> = {\n  setFilters<S extends EntityAndFilterState<T, F>>(\n    filter: F | undefined,\n    state: S,\n  ): S;\n};\n\nexport const filterTraitKey = 'filter';\n\nexport type FilterConfig<T, F> = {\n  defaultFilter?: F;\n  filterFn?: (filter: F, entity: T) => boolean;\n  defaultDebounceTime?: number;\n};\n\nexport type FilterKeyedConfig<T, F> = {\n  filter?: FilterConfig<T, F>;\n};\n","import { FilterActions, FilterKeyedConfig } from '../filter/filter.model';\nimport { createReducer, on } from '@ngrx/store';\n\nimport {\n  LoadEntitiesActions,\n  LoadEntitiesKeyedConfig,\n  LoadEntitiesMutators,\n  LoadEntitiesSelectors,\n} from '../load-entities/load-entities.model';\nimport {\n  EntityAndPaginationState,\n  PaginationKeyedConfig,\n  PaginationMutators,\n} from './pagination.model';\nimport { CrudActions } from '../crud';\nimport { ƟPaginationActions } from './pagination.model.internal';\nimport { insertIf } from 'ngrx-traits';\n\nexport function createPaginationInitialState<Entity>(\n  previousInitialState: any,\n  allConfigs: PaginationKeyedConfig,\n): EntityAndPaginationState<Entity> {\n  const { currentPage, pageSize, cacheType, pagesToCache } =\n    allConfigs.pagination!;\n\n  return {\n    ...previousInitialState,\n    pagination: {\n      pageSize,\n      currentPage,\n      requestPage: currentPage,\n      pagesToCache,\n      cache: {\n        type: cacheType,\n        start: 0,\n        end: 0,\n      },\n    },\n  };\n}\n\nexport function createPaginationTraitReducer<\n  Entity,\n  S extends EntityAndPaginationState<Entity>,\n>(\n  initialState: S,\n  allActions: ƟPaginationActions &\n    FilterActions<Entity> &\n    LoadEntitiesActions<Entity> &\n    CrudActions<Entity>,\n  allSelectors: LoadEntitiesSelectors<Entity>,\n  allMutators: PaginationMutators<Entity> & LoadEntitiesMutators<Entity>,\n  allConfigs: FilterKeyedConfig<Entity, unknown> &\n    LoadEntitiesKeyedConfig<Entity> &\n    PaginationKeyedConfig,\n) {\n  function addToCacheTotal<S extends EntityAndPaginationState<Entity>>(\n    state: S,\n    add: number,\n  ) {\n    return {\n      ...state,\n      pagination: {\n        ...state.pagination,\n        total: (state.pagination.total ?? 0) + add,\n      },\n    };\n  }\n\n  function clearPagesCache<S extends EntityAndPaginationState<Entity>>(\n    state: S,\n  ): S {\n    return {\n      ...state,\n      entities: {},\n      ids: [],\n      pagination: {\n        ...state.pagination,\n        currentPage: 0,\n        total: 0,\n        cache: { ...state.pagination.cache, start: 0, end: 0 },\n      },\n    };\n  }\n\n  function recalculateTotal<S extends EntityAndPaginationState<Entity>>(\n    state: S,\n  ): S {\n    const total = allSelectors.selectTotal(state);\n    return {\n      ...state,\n      status: 'success',\n      pagination: {\n        ...state.pagination,\n        currentPage: 0,\n        total,\n        cache: {\n          ...state.pagination.cache,\n          start: 0,\n          end: total,\n        },\n      },\n    };\n  }\n\n  const filterRemote = !allConfigs?.filter?.filterFn;\n\n  return createReducer(\n    initialState,\n    on(allActions.loadPage, (state, { index }) => ({\n      ...state,\n      pagination: {\n        ...state.pagination,\n        currentPage: index,\n        requestPage: index,\n      },\n      status: 'loading',\n    })),\n    on(allActions.setRequestPage, (state, { index }) => ({\n      ...state,\n      pagination: {\n        ...state.pagination,\n        requestPage: index,\n      },\n      status: 'loading',\n    })),\n    on(allActions.loadPageSuccess, (state) => ({\n      ...state,\n      status: 'success',\n    })),\n    on(allActions.loadPageFail, (state) => ({\n      ...state,\n      status: 'fail',\n    })),\n    on(allActions.clearPagesCache, (state) => clearPagesCache(state)),\n    on(allActions.fetchSuccess, (state, { entities, total }) =>\n      allMutators.mergePaginatedEntities<S>(entities, total, {\n        ...state,\n        status: 'success',\n      }),\n    ),\n    ...insertIf<S>(allActions.add, () =>\n      on(allActions.add, (state, { entities }) =>\n        addToCacheTotal(state, entities.length),\n      ),\n    ),\n    ...insertIf<S>(allActions.remove, () =>\n      on(allActions.remove, (state, { keys }) =>\n        addToCacheTotal(state, -keys.length),\n      ),\n    ),\n    ...insertIf<S>(filterRemote && allActions.filter, () =>\n      on(allActions.filter, (state) => recalculateTotal(state)),\n    ),\n    ...insertIf<S>(allActions.removeAll, () =>\n      on(allActions.removeAll, (state) => clearPagesCache(state)),\n    ),\n  );\n}\n","import {\n  EntityAndMultipleSelectionState,\n  MultipleSelectionState,\n} from './multi-selection.model';\n\nexport function multiDeselect<S extends MultipleSelectionState>(\n  id: number | string,\n  state: S,\n): S {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { [id]: _value, ...selectedIds } = state.selectedIds;\n  return {\n    ...state,\n    selectedIds: selectedIds,\n  };\n}\n\nexport function multiSelect<S extends MultipleSelectionState>(\n  id: number | string,\n  state: S,\n): S {\n  return {\n    ...state,\n    selectedIds: { ...state.selectedIds, [id]: true },\n  };\n}\n\nexport function multiToggleSelect<S extends MultipleSelectionState>(\n  id: number | string,\n  state: S,\n): S {\n  const selected = state.selectedIds[id];\n  if (selected) {\n    return multiDeselect(id, state);\n  } else {\n    return multiSelect(id, state);\n  }\n}\nexport function multiClearSelection<S extends MultipleSelectionState>(\n  state: S,\n): S {\n  return { ...state, selectedIds: {} };\n}\n\nexport function selectTotalSelected<\n  T,\n  S extends EntityAndMultipleSelectionState<T>,\n>(state: S): number {\n  return Object.keys(state.selectedIds).length;\n}\n\nexport type Selected = 'all' | 'some' | 'none';\n","import {\n  LoadEntitiesActions,\n  LoadEntitiesKeyedConfig,\n} from '../load-entities/load-entities.model';\nimport { SortActions, SortKeyedConfig } from '../sort/sort.model';\nimport {\n  EntityAndMultipleSelectionState,\n  MultipleSelectionMutators,\n  MultiSelectActions,\n} from './multi-selection.model';\nimport { CrudActions } from '../crud/crud.model';\nimport { Update } from '@ngrx/entity/src/models';\nimport { insertIf } from 'ngrx-traits';\nimport { createReducer, on } from '@ngrx/store';\nimport {\n  PaginationActions,\n  PaginationKeyedConfig,\n} from '../pagination/pagination.model';\nimport { FilterActions } from '../filter';\n\nexport function createMultiSelectionInitialState<Entity>(\n  previousInitialState: any,\n): EntityAndMultipleSelectionState<Entity> {\n  return {\n    ...previousInitialState,\n    selectedIds: {},\n  };\n}\n\nexport function createMultiSelectionTraitReducer<\n  Entity,\n  S extends EntityAndMultipleSelectionState<Entity>,\n>(\n  initialState: S,\n  allActions: MultiSelectActions &\n    CrudActions<Entity> &\n    SortActions<Entity> &\n    LoadEntitiesActions<Entity> &\n    FilterActions<any> &\n    PaginationActions,\n  allMutators: MultipleSelectionMutators<Entity>,\n  allConfigs: LoadEntitiesKeyedConfig<Entity> &\n    PaginationKeyedConfig &\n    SortKeyedConfig<Entity>,\n) {\n  const { adapter } = allConfigs.loadEntities!;\n  const sortRemote = allConfigs.sort?.remote;\n  const paginationCacheType = allConfigs.pagination?.cacheType;\n\n  function updateSelectedIdsChanged<\n    S extends EntityAndMultipleSelectionState<Entity>,\n  >(state: S, updates: Update<Entity>[]) {\n    const changedIds = updates.reduce((acc, updated) => {\n      const id = adapter.selectId(updated.changes as Entity);\n      if (id && id !== updated.id && state.selectedIds[updated.id] != null) {\n        acc.push(updated);\n        return acc;\n      }\n      return acc;\n    }, [] as Update<Entity>[]);\n    if (changedIds.length) {\n      const selectedIds = { ...state.selectedIds };\n      changedIds.forEach((updated) => {\n        const id = adapter.selectId(updated.changes as Entity);\n        const value = selectedIds[updated.id];\n        delete selectedIds[updated.id];\n        selectedIds[id] = value;\n      });\n      return { ...state, selectedIds };\n    }\n\n    return state;\n  }\n\n  return createReducer(\n    initialState,\n    on(allActions.multiSelect, (state, { id }) =>\n      allMutators.multiSelect(id, state),\n    ),\n    on(allActions.multiDeselect, (state, { id }) =>\n      allMutators.multiDeselect(id, state),\n    ),\n    on(allActions.multiToggleSelect, (state, { id }) =>\n      allMutators.multiToggleSelect(id, state),\n    ),\n    on(allActions.toggleSelectAll, (state) =>\n      allMutators.toggleSelectAll(state),\n    ),\n    ...insertIf<S>(allActions.remove, () =>\n      on(allActions.remove, (state, { keys }) => {\n        const selectedIds = { ...state.selectedIds };\n        keys.forEach((v: string | number) => {\n          delete selectedIds[v];\n        });\n        return { ...state, selectedIds };\n      }),\n    ),\n    ...insertIf<S>(allActions.update, () =>\n      on(allActions.update, (state, { updates }) =>\n        updateSelectedIdsChanged(state, updates),\n      ),\n    ),\n    on(allActions.multiClearSelection, (state) =>\n      allMutators.multiClearSelection(state),\n    ),\n    ...insertIf<S>(allActions.removeAll, () =>\n      on(allActions.removeAll, (state) =>\n        allMutators.multiClearSelection(state),\n      ),\n    ),\n    ...insertIf<S>(sortRemote, () =>\n      on(allActions.sort, (state) => allMutators.multiClearSelection(state)),\n    ),\n    ...insertIf<S>(allActions.filter, () =>\n      on(allActions.filter, (state) => allMutators.multiClearSelection(state)),\n    ),\n    ...insertIf<S>(!allActions.loadPageSuccess, () =>\n      on(allActions.fetchSuccess, (state) =>\n        allMutators.multiClearSelection(state),\n      ),\n    ),\n    ...insertIf<S>(\n      allActions.loadPageSuccess && paginationCacheType === 'partial',\n      () =>\n        on(allActions.loadPageSuccess, (state) =>\n          allMutators.multiClearSelection(state),\n        ),\n    ),\n  );\n}\n","import { Predicate, Update } from '@ngrx/entity/src/models';\nimport { EntityAndStatusState } from '../load-entities/load-entities.model';\nimport { ActionCreator } from '@ngrx/store';\nimport { TypedAction } from '@ngrx/store/src/models';\n\nexport enum ChangeType {\n  CREATED = 'c',\n  UPDATED = 'u',\n  DELETED = 'd',\n}\nexport interface Change<T> {\n  id: string | number;\n  changeType: ChangeType;\n  entityChanges?: Partial<T>;\n}\nexport interface EntityChange<T> {\n  entity: T;\n  changeType: ChangeType;\n}\nexport interface CrudState<T> {\n  changes: Change<T>[];\n}\nexport interface EntityAndCrudState<T>\n  extends EntityAndStatusState<T>,\n    CrudState<T> {}\n\nexport type CrudActions<T> = {\n  add: ActionCreator<\n    string,\n    (...entities: T[]) => { entities: T[] } & TypedAction<string>\n  >;\n  remove: ActionCreator<\n    string,\n    (\n      ...keys: string[] | number[]\n    ) => { keys: string[] | number[] } & TypedAction<string>\n  >;\n  update: ActionCreator<\n    string,\n    (...updates: Update<T>[]) => { updates: Update<T>[] } & TypedAction<string>\n  >;\n  upsert: ActionCreator<\n    string,\n    (...entities: T[]) => { entities: T[] } & TypedAction<string>\n  >;\n\n  removeAll: ActionCreator<\n    string,\n    (\n      predicate?: Predicate<T>,\n    ) => { predicate?: Predicate<T> } & TypedAction<string>\n  >;\n  clearChanges: ActionCreator<string, () => TypedAction<string>>;\n};\n\nexport type CrudSelectors<T> = {\n  selectChanges: (state: EntityAndCrudState<T>) => Change<T>[];\n  selectAllChanges: (\n    state: EntityAndCrudState<T>,\n    props: { type: ChangeType },\n  ) => EntityChange<T>[];\n  /**\n   * filters redundant changes ideal for a batch update\n   * if you add and remove the same and items this changes are remove from the list\n   * if you add and then update one or more time, the updates are discarded\n   * if you update one or more time and then remove, the updates are discarded\n   * @param state\n   */\n  selectFilteredChanges: (state: EntityAndCrudState<T>) => Change<T>[];\n  /**\n   * Returns the entities plus the kind of change\n   * @param state\n   */\n  selectAllFilteredChanges: (state: EntityAndCrudState<T>) => EntityChange<T>[];\n};\n\nexport type CrudMutators<T> = {\n  add<S extends EntityAndCrudState<T>>(entities: T[], state: S): S;\n\n  remove<S extends EntityAndCrudState<T>>(keys: string[], state: S): S;\n  remove<S extends EntityAndCrudState<T>>(keys: number[], state: S): S;\n  remove<S extends EntityAndCrudState<T>>(predicate: Predicate<T>, state: S): S;\n\n  removeAll<S extends EntityAndCrudState<T>>(state: S): S;\n\n  clearChanges<S extends EntityAndCrudState<T>>(state: S): S;\n\n  update<S extends EntityAndCrudState<T>>(updates: Update<T>[], state: S): S;\n  upsert<S extends EntityAndCrudState<T>>(entities: T[], state: S): S;\n};\n\nexport interface CrudConfig {\n  storeChanges?: boolean;\n}\nexport const crudTraitKey = 'crud';\n\nexport interface CrudKeyedConfig {\n  crud?: CrudConfig;\n}\n","import { EntityAndStatusState } from '../load-entities/load-entities.model';\n\nimport { ActionCreator, TypedAction } from '@ngrx/store/src/models';\nimport { KeyedConfig } from 'ngrx-traits';\n\nexport declare type SortDirection = 'asc' | 'desc' | '';\n\nexport interface Sort<T> {\n  /** The id of the column being sorted. */\n  active: keyof T;\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\nexport interface SortState<T> {\n  sort?: {\n    current: Sort<T>;\n    default: Sort<T>;\n  };\n}\nexport interface EntityAndSortState<T>\n  extends EntityAndStatusState<T>,\n    SortState<T> {}\n\nexport type SortActions<T> = {\n  sort: ActionCreator<\n    string,\n    (props: Sort<T>) => Sort<T> & TypedAction<string>\n  >;\n  resetSort: ActionCreator<string, () => TypedAction<string>>;\n};\n\nexport type SortSelectors<T> = {\n  selectSort: (state: EntityAndSortState<T>) => Sort<T> | undefined;\n};\n\nexport type SortMutators<T> = {\n  sortEntities<S extends EntityAndSortState<T>>(\n    { active, direction }: Sort<T>,\n    state: S,\n  ): S;\n};\n\nexport const sortTraitKey = 'sort';\n\nexport interface SortConfig<T> {\n  defaultSort?: Sort<T>;\n  remote?: boolean;\n}\n\nexport type SortKeyedConfig<T> = KeyedConfig<\n  typeof sortTraitKey,\n  SortConfig<T>\n>;\n","import { _isNumberValue } from '@angular/cdk/coercion';\nimport { Sort } from './sort.model';\n\nconst MAX_SAFE_INTEGER = 9007199254740991;\nfunction sortingDataAccessor<T>(\n  data: T,\n  sortHeaderId: string,\n): string | number {\n  const value = (data as { [key: string]: any })[sortHeaderId];\n\n  if (_isNumberValue(value)) {\n    const numberValue = Number(value);\n\n    // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n    // leave them as strings. For more info: https://goo.gl/y5vbSg\n    return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n  }\n\n  return value;\n}\n\n/**\n * Gets a sorted copy of the data array based on the state of the Sort.\n * @param data The array of data that should be sorted.\n * @param sort The connected MatSort that holds the current sort state.\n */\nexport function sortData<T>(data: T[], sort: Sort<T>): T[] {\n  const active = sort.active;\n  const direction = sort.direction;\n  if (!active || direction === '') {\n    return data;\n  }\n\n  return data.sort((a, b) => {\n    const valueA = sortingDataAccessor(a, active as string);\n    const valueB = sortingDataAccessor(b, active as string);\n\n    // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n    // one value exists while the other doesn't. In this case, existing value should come last.\n    // This avoids inconsistent results when comparing values to undefined/null.\n    // If neither value exists, return 0 (equal).\n    let comparatorResult = 0;\n    if (valueA != null && valueB != null) {\n      // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n\n      if (typeof valueA === 'string' || typeof valueB === 'string') {\n        // if either values are a string, then force both to be strings before localCompare\n        comparatorResult = valueA.toString().localeCompare(valueB.toString());\n      } else {\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      }\n    } else if (valueA != null) {\n      comparatorResult = 1;\n    } else if (valueB != null) {\n      comparatorResult = -1;\n    }\n\n    return comparatorResult * (direction === 'asc' ? 1 : -1);\n  });\n}\n","import { createAction, createReducer, on } from '@ngrx/store';\nimport { ActionCreatorProps } from '@ngrx/store/src/models';\nimport { createTraitFactory } from 'ngrx-traits';\nimport {\n  ActionCreatorWithOptionalProps,\n  AsyncActionActions,\n  AsyncActionSelectors,\n  AsyncActionState,\n} from './async-action.model';\nimport {\n  TraitActionsFactoryConfig,\n  TraitInitialStateFactoryConfig,\n} from 'ngrx-traits';\n\n/**\n * Generates the typical ngrx code need to make a async action with\n * a request, success and failure actions, plus a status property to track its progress\n * and selectors to query the status.\n *\n * @param options - Config object for the trait factory\n * @param options.name - Name of the main request action, should be in camel case\n * @param options.actionProps - Optional param for the main request action, use the props()\n * function for its value, if not present action will have no params,\n * @param options.actionSuccessProps - Optional param for the request success action,\n * use the props() function for its value, if not present action success will have no params\n * @param options.actionFailProps - Optional param for the request fail action,\n * use the props() function for its value, if not present action fail will have no params\n * @returns the trait factory\n *\n * @example\n * // The following trait config\n * const traits = createEntityFeatureFactory(\n * addAsyncAction({\n *        name: 'createClient',\n *        actionProps: props<{ name: string }>(),\n *        actionSuccessProps: props<{ id: string }>(),\n *      }),\n * )({\n *      actionsGroupKey: 'Client',\n *      featureSelector: createFeatureSelector<AsyncActionState<'createClient'>>(\n *        'client',\n *      ),\n *    });\n * // will generate the actions and selectors\n * traits.actions.createClient({name:'Pedro'})\n * traits.actions.createClientSuccess({id:'123'})\n * traits.actions.createClientFail();\n * traits.selectors.isLoadingCreateClient\n * traits.selectors.isSuccessCreateClient\n * traits.selectors.isFailCreateClient\n */\nexport function addAsyncAction<\n  J extends string,\n  Request extends object | undefined = undefined,\n  Response extends object | undefined = undefined,\n  Failure extends object | undefined = undefined,\n>({\n  name,\n  actionProps,\n  actionSuccessProps,\n  actionFailProps,\n}: {\n  name: J;\n  actionProps?: ActionCreatorProps<Request>;\n  actionSuccessProps?: ActionCreatorProps<Response>;\n  actionFailProps?: ActionCreatorProps<Failure>;\n}) {\n  const nameAsSentence = camelCaseToSentence(name);\n\n  let internalActions: AsyncActionActions<\n    Request,\n    Response,\n    Failure,\n    'request'\n  >;\n  return createTraitFactory({\n    key: name + '-call',\n    config: {\n      name,\n      actionProps,\n      actionSuccessProps,\n      actionFailProps,\n    },\n    actions: ({\n      actionsGroupKey,\n    }: TraitActionsFactoryConfig): AsyncActionActions<\n      Request,\n      Response,\n      Failure,\n      J\n    > => {\n      internalActions = {\n        request: (actionProps\n          ? createAction(\n              `${actionsGroupKey} ${nameAsSentence}`,\n              actionProps as any,\n            )\n          : createAction(\n              `${actionsGroupKey} ${nameAsSentence}`,\n            )) as ActionCreatorWithOptionalProps<Request>,\n        requestSuccess: (actionSuccessProps\n          ? createAction(\n              `${actionsGroupKey} ${nameAsSentence} Success`,\n              actionSuccessProps as any,\n            )\n          : createAction(\n              `${actionsGroupKey} ${nameAsSentence} Success`,\n            )) as ActionCreatorWithOptionalProps<Response>,\n        requestFail: (actionFailProps\n          ? createAction(\n              `${actionsGroupKey} ${nameAsSentence} Failure`,\n              actionFailProps as any,\n            )\n          : createAction(\n              `${actionsGroupKey} ${nameAsSentence} Failure`,\n            )) as ActionCreatorWithOptionalProps<Failure>,\n      };\n      if (name) {\n        return {\n          [`${name}`]: internalActions.request,\n          [`${name}Success`]: internalActions.requestSuccess,\n          [`${name}Fail`]: internalActions.requestFail,\n        } as AsyncActionActions<Request, Response, Failure, J>;\n      }\n      return internalActions;\n    },\n    selectors: () => {\n      function isLoadingEntity<S extends AsyncActionState<J>>(state: S) {\n        return (state as any)[`${name}Status`] === 'loading';\n      }\n      function isSuccessEntity<S extends AsyncActionState<J>>(state: S) {\n        return (state as any)[`${name}Status`] === 'success';\n      }\n      function isFailEntity<S extends AsyncActionState<J>>(state: S) {\n        return (state as any)[`${name}Status`] === 'fail';\n      }\n      const capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\n      return {\n        [`isLoading${capitalizedName}`]: isLoadingEntity,\n        [`isSuccess${capitalizedName}`]: isSuccessEntity,\n        [`isFail${capitalizedName}`]: isFailEntity,\n      } as AsyncActionSelectors<J, AsyncActionState<J>>;\n    },\n    initialState: ({ previousInitialState }: TraitInitialStateFactoryConfig) =>\n      previousInitialState as AsyncActionState<J>,\n    reducer: ({ initialState }) => {\n      return createReducer(\n        initialState,\n        on(\n          internalActions.request,\n          (state) =>\n            ({\n              ...state,\n              [`${name}Status`]: 'loading',\n            } as AsyncActionState<J>),\n        ),\n        on(\n          internalActions.requestFail,\n          (state) =>\n            ({\n              ...state,\n              [`${name}Status`]: 'fail',\n            } as AsyncActionState<J>),\n        ),\n        on(\n          internalActions.requestSuccess,\n          (state) =>\n            ({\n              ...state,\n              [`${name}Status`]: 'success',\n            } as AsyncActionState<J>),\n        ),\n      );\n    },\n  });\n}\n\nfunction camelCaseToSentence(text: string) {\n  const result = text.replace(/([A-Z])/g, ' $1');\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n","import {\n  createTraitFactory,\n  TraitActionsFactoryConfig,\n  TraitInitialStateFactoryConfig,\n  TraitSelectorsFactoryConfig,\n  TraitStateMutatorsFactoryConfig,\n} from 'ngrx-traits';\nimport { createCrudTraitActions } from '../crud/crud.trait.actions';\nimport { createCrudTraitSelectors } from '../crud/crud.trait.selectors';\nimport {\n  createCrudInitialState,\n  createCrudTraitReducer,\n} from '../crud/crud.trait.reducer';\nimport { SortActions, SortKeyedConfig } from '../sort/sort.model';\nimport {\n  CrudActions,\n  CrudConfig,\n  CrudKeyedConfig,\n  crudTraitKey,\n} from './crud.model';\nimport { FilterActions, FilterKeyedConfig } from '../filter/filter.model';\nimport {\n  LoadEntitiesActions,\n  LoadEntitiesKeyedConfig,\n  LoadEntitiesSelectors,\n  loadEntitiesTraitKey,\n} from '../load-entities/load-entities.model';\nimport {\n  PaginationActions,\n  PaginationKeyedConfig,\n} from '../pagination/pagination.model';\nimport { createCrudTraitMutators } from './crud.trait.mutators';\n\nexport function addCrudEntities<Entity>({\n  storeChanges = false,\n}: CrudConfig = {}) {\n  return createTraitFactory({\n    key: crudTraitKey,\n    depends: [loadEntitiesTraitKey],\n    config: { storeChanges } as CrudConfig,\n    actions: ({ actionsGroupKey }: TraitActionsFactoryConfig) =>\n      createCrudTraitActions<Entity>(actionsGroupKey),\n    selectors: ({ previousSelectors }: TraitSelectorsFactoryConfig) =>\n      createCrudTraitSelectors<Entity>(\n        previousSelectors as LoadEntitiesSelectors<Entity>,\n      ),\n    mutators: ({ allConfigs }: TraitStateMutatorsFactoryConfig) =>\n      createCrudTraitMutators<Entity>(\n        allConfigs as CrudKeyedConfig & LoadEntitiesKeyedConfig<Entity>,\n      ),\n    initialState: ({ previousInitialState }: TraitInitialStateFactoryConfig) =>\n      createCrudInitialState<Entity>(previousInitialState),\n    reducer: ({ initialState, allActions, allMutators, allConfigs }) =>\n      createCrudTraitReducer(\n        initialState,\n        allActions as CrudActions<Entity> &\n          LoadEntitiesActions<Entity> &\n          SortActions<Entity> &\n          FilterActions<any> &\n          PaginationActions,\n        allMutators,\n        allConfigs as CrudKeyedConfig &\n          FilterKeyedConfig<Entity, unknown> &\n          LoadEntitiesKeyedConfig<Entity> &\n          SortKeyedConfig<Entity> &\n          PaginationKeyedConfig,\n      ),\n  });\n}\n","import { CrudActions } from './crud.model';\nimport { createAction } from '@ngrx/store';\nimport { Predicate, Update } from '@ngrx/entity';\n\nexport function createCrudTraitActions<Entity>(\n  actionsGroupKey: string,\n): CrudActions<Entity> {\n  return {\n    add: createAction(`${actionsGroupKey} Add`, (...entities: Entity[]) => ({\n      entities,\n    })),\n    remove: createAction(\n      `${actionsGroupKey} Remove`,\n      (...keys: string[] | number[]) => ({\n        keys,\n      }),\n    ),\n    update: createAction(\n      `${actionsGroupKey} Update`,\n      (...updates: Update<Entity>[]) => ({\n        updates,\n      }),\n    ),\n    upsert: createAction(\n      `${actionsGroupKey} Upsert`,\n      (...entities: Entity[]) => ({\n        entities,\n      }),\n    ),\n    removeAll: createAction(\n      `${actionsGroupKey} Remove All`,\n      (predicate?: Predicate<Entity>) => ({ predicate }),\n    ),\n    clearChanges: createAction(`${actionsGroupKey} Clear Changes`),\n  };\n}\n","import { createSelector } from '@ngrx/store';\nimport {\n  Change,\n  ChangeType,\n  CrudSelectors,\n  CrudState,\n  EntityAndCrudState,\n  EntityChange,\n} from './crud.model';\nimport { LoadEntitiesSelectors } from '../load-entities/load-entities.model';\nimport { Dictionary } from '@ngrx/entity';\n\nexport function createCrudTraitSelectors<Entity>(\n  previousSelectors: LoadEntitiesSelectors<Entity>,\n): CrudSelectors<Entity> {\n  function selectChanges<S extends CrudState<Entity>>(state: S) {\n    return state.changes;\n  }\n\n  function selectFilteredChanges<S extends CrudState<Entity>>(state: S) {\n    const cache: { [id: string]: ChangeType[] } = {};\n    return state.changes.reduce((acc, value) => {\n      const changes = cache[value.id];\n      if (!changes) {\n        cache[value.id] = [value.changeType];\n        acc.push(value);\n        return acc;\n      }\n\n      if (value.changeType === ChangeType.UPDATED) {\n        return acc;\n      }\n\n      if (\n        value.changeType === ChangeType.DELETED &&\n        changes.includes(ChangeType.CREATED)\n      ) {\n        delete cache[value.id];\n        return acc.filter((v) => v.id !== value.id);\n      }\n\n      if (value.changeType === ChangeType.DELETED) {\n        delete cache[value.id];\n        const newAcc = acc.filter((v) => v.id !== value.id);\n        newAcc.push(value);\n        return newAcc;\n      }\n      return acc;\n    }, [] as Change<Entity>[]);\n  }\n\n  const { selectEntities } = previousSelectors;\n\n  const selectAllChanges = createSelector(\n    (state: EntityAndCrudState<Entity>) => selectEntities(state),\n    selectChanges,\n    (\n      entities: Dictionary<Entity>,\n      changed: Change<Entity>[],\n      { type }: { type: ChangeType },\n    ) => {\n      if (type)\n        return changed\n          .filter((c) => c.changeType === type)\n          .map(\n            (change) =>\n              ({\n                changeType: change.changeType,\n                entity: entities[change.id] ?? {\n                  id: change.id,\n                },\n              } as EntityChange<Entity>),\n          );\n\n      const map = changed.map(\n        (change) =>\n          ({\n            changeType: change.changeType,\n            entity: entities[change.id] ?? {\n              id: change.id,\n            },\n          } as EntityChange<Entity>),\n      );\n      return map;\n    },\n  );\n\n  const selectAllFilteredChanges = createSelector(\n    selectFilteredChanges,\n    (state: EntityAndCrudState<Entity>) => selectEntities(state),\n    (changes, entities) =>\n      changes.map((c) => {\n        return {\n          entity: entities[c.id] ?? { id: c.id },\n          changeType: c.changeType,\n        } as EntityChange<Entity>;\n      }),\n  );\n\n  return {\n    selectAllChanges,\n    selectAllFilteredChanges,\n    selectChanges,\n    selectFilteredChanges,\n  };\n}\n","import {\n  Change,\n  ChangeType,\n  CrudKeyedConfig,\n  CrudMutators,\n  EntityAndCrudState,\n} from '../crud/crud.model';\nimport { Predicate, Update } from '@ngrx/entity';\nimport { LoadEntitiesKeyedConfig } from '../load-entities/load-entities.model';\n\nexport function createCrudTraitMutators<Entity>(\n  allConfigs: CrudKeyedConfig & LoadEntitiesKeyedConfig<Entity>,\n): CrudMutators<Entity> {\n  const { storeChanges } = allConfigs.crud || {};\n  const adapter = allConfigs!.loadEntities!.adapter;\n\n  function generateChangeEntry(\n    entity: Entity,\n    changeType: ChangeType,\n    customId?: string | number,\n  ) {\n    return {\n      id: customId ?? adapter.selectId(entity),\n      changeType,\n      entityChanges: (storeChanges && entity) || undefined,\n    };\n  }\n\n  function add<S extends EntityAndCrudState<Entity>>(\n    entities: Entity[],\n    state: S,\n    addFirst = false,\n  ) {\n    const changes = [\n      ...state.changes,\n      ...entities.map((entity) =>\n        generateChangeEntry(entity, ChangeType.CREATED),\n      ),\n    ];\n    if (!addFirst)\n      return adapter.addMany(entities, {\n        ...state,\n        changes,\n      });\n\n    const newIds = entities.map((e) => adapter.selectId(e));\n    const newEntities = { ...state.entities };\n    entities.forEach((e) => {\n      const id = adapter.selectId(e);\n      newEntities[id] = e;\n    });\n    return {\n      ...state,\n      ids: [...newIds, ...state.ids],\n      entities: newEntities,\n      changes,\n    };\n  }\n\n  function upsert<S extends EntityAndCrudState<Entity>>(\n    entities: Entity[],\n    state: S,\n  ) {\n    const oldChanges = [...state.changes];\n    const existingIds = adapter.getSelectors().selectIds(state) as string[];\n\n    const [additions, updates] = entities.reduce(\n      ([a, u], entity) =>\n        existingIds.indexOf(adapter.selectId(entity as Entity) as string) !== -1\n          ? [a, [...u, entity]]\n          : [[...a, entity], u],\n      [new Array<Entity>(), new Array<Entity>()],\n    );\n\n    return adapter.upsertMany(entities, {\n      ...state,\n      changes: [\n        ...oldChanges,\n\n        ...additions.map((entity) =>\n          generateChangeEntry(entity, ChangeType.CREATED),\n        ),\n        ...updates.map((entity) =>\n          generateChangeEntry(entity, ChangeType.UPDATED),\n        ),\n      ],\n    });\n  }\n\n  function remove<S extends EntityAndCrudState<Entity>>(\n    keys: number[],\n    state: S,\n  ): S;\n  function remove<S extends EntityAndCrudState<Entity>>(\n    keys: string[],\n    state: S,\n  ): S;\n  function remove<S extends EntityAndCrudState<Entity>>(\n    predicate: Predicate<Entity>,\n    state: S,\n  ): S;\n  function remove<S extends EntityAndCrudState<Entity>>(\n    keysOrPredicate: Predicate<Entity> | string[] | number[],\n    state: S,\n  ): S {\n    if (typeof keysOrPredicate === 'function') {\n      return adapter.removeMany(keysOrPredicate, {\n        ...state,\n        changes: [\n          ...state.changes,\n          ...(state.ids as any[]).map((id) => ({\n            id,\n            changeType: ChangeType.DELETED,\n          })),\n        ],\n      });\n    }\n\n    return adapter.removeMany(keysOrPredicate as string[], {\n      ...state,\n      changes: [\n        ...state.changes,\n        ...(keysOrPredicate as string[]).map((key: string) => ({\n          id: key,\n          changeType: ChangeType.DELETED,\n        })),\n      ],\n    });\n  }\n  function removeAll<S extends EntityAndCrudState<Entity>>(state: S): S {\n    return adapter.removeAll({\n      ...state,\n      changes: [\n        ...state.changes,\n        ...(state.ids as any[]).map((id) => ({\n          id,\n          changeType: ChangeType.DELETED,\n        })),\n      ],\n    });\n  }\n  function clearChanges<S extends EntityAndCrudState<Entity>>(state: S) {\n    return { ...state, changes: [] };\n  }\n\n  function update<S extends EntityAndCrudState<Entity>>(\n    updates: Update<Entity>[],\n    state: S,\n  ) {\n    const oldChanges = [...state.changes];\n    updates.forEach((updated) => {\n      const id = adapter.selectId(updated.changes as Entity);\n      if (id && id !== updated.id) {\n        // if the id changes update the id of pold changes\n        const index = oldChanges.findIndex((v) => v.id === updated.id);\n        const oldChange = oldChanges[index];\n        oldChanges[index] = { ...oldChange, id };\n      }\n    });\n    return adapter.updateMany(updates, {\n      ...state,\n      changes: [\n        ...oldChanges,\n        ...updates.map(\n          (updated) =>\n            ({\n              id: adapter.selectId(updated.changes as Entity) ?? updated.id,\n              changeType: ChangeType.UPDATED,\n              entityChanges: (storeChanges && updated.changes) || undefined,\n            } as Change<Entity>),\n        ),\n      ],\n    });\n  }\n\n  return {\n    add,\n    remove,\n    update,\n    removeAll,\n    clearChanges,\n    upsert,\n  };\n}\n","import { FilterActions, FilterKeyedConfig } from '../filter/filter.model';\nimport { createReducer, on } from '@ngrx/store';\nimport {\n  CrudActions,\n  CrudKeyedConfig,\n  CrudMutators,\n  EntityAndCrudState,\n} from './crud.model';\nimport { LoadEntitiesActions, LoadEntitiesKeyedConfig } from '../load-entities';\nimport { SortActions, SortKeyedConfig } from '../sort';\nimport { PaginationActions, PaginationKeyedConfig } from '../pagination';\nimport { insertIf } from 'ngrx-traits';\n\nexport function createCrudInitialState<Entity>(\n  previousInitialState: any,\n): EntityAndCrudState<Entity> {\n  return {\n    ...previousInitialState,\n    changes: [],\n  };\n}\nexport function createCrudTraitReducer<\n  Entity,\n  S extends EntityAndCrudState<Entity>,\n>(\n  initialState: S,\n  allActions: CrudActions<Entity> &\n    LoadEntitiesActions<Entity> &\n    SortActions<Entity> &\n    FilterActions<any> &\n    PaginationActions,\n  allMutators: CrudMutators<Entity>,\n  allConfigs: CrudKeyedConfig &\n    FilterKeyedConfig<Entity, unknown> &\n    LoadEntitiesKeyedConfig<Entity> &\n    SortKeyedConfig<Entity> &\n    PaginationKeyedConfig,\n) {\n  const sortRemote = allConfigs.sort?.remote;\n  const filterRemote = allConfigs.filter && !allConfigs.filter?.filterFn;\n  const paginationCacheType = allConfigs.pagination?.cacheType;\n\n  return createReducer(\n    initialState,\n    on(allActions.add, (state, { entities }) =>\n      allMutators.add(entities, state),\n    ),\n    on(allActions.update, (state, { updates }) =>\n      allMutators.update(updates, state),\n    ),\n    on(allActions.upsert, (state, { entities }) =>\n      allMutators.upsert(entities, state),\n    ),\n    on(allActions.remove, (state, { keys }) =>\n      allMutators.remove(keys as any[], state),\n    ),\n    on(allActions.removeAll, (state, { predicate }) =>\n      predicate\n        ? allMutators.remove(predicate, state)\n        : allMutators.removeAll(state),\n    ),\n    on(allActions.clearChanges, (state) => allMutators.clearChanges(state)),\n    ...insertIf<S>(sortRemote, () =>\n      on(allActions.sort, (state) => allMutators.clearChanges(state)),\n    ),\n    ...insertIf<S>(filterRemote, () =>\n      on(allActions.filter, (state) => allMutators.clearChanges(state)),\n    ),\n    ...insertIf<S>(!allActions.loadPageSuccess, () =>\n      on(allActions.fetchSuccess, (state) => allMutators.clearChanges(state)),\n    ),\n    ...insertIf<S>(\n      allActions.loadPageSuccess && paginationCacheType === 'partial',\n      () =>\n        on(allActions.loadPageSuccess, (state) =>\n          allMutators.clearChanges(state),\n        ),\n    ),\n  );\n}\n","import {\n  PaginationActions,\n  paginationTraitKey,\n} from '../pagination/pagination.model';\nimport { createFilterTraitEffects } from './filter.trait.effect';\nimport {\n  createFilterInitialState,\n  createFilterTraitReducer,\n} from './filter.trait.reducer';\nimport {\n  FilterConfig,\n  FilterKeyedConfig,\n  FilterSelectors,\n  filterTraitKey,\n} from './filter.model';\nimport { createFilterTraitSelectors } from './filter.trait.selectors';\nimport {\n  LoadEntitiesActions,\n  LoadEntitiesSelectors,\n  loadEntitiesTraitKey,\n} from '../load-entities/load-entities.model';\nimport { createFilterTraitMutators } from './filter.trait.mutators';\nimport { createTraitFactory } from 'ngrx-traits';\nimport { createFilterTraitActions } from './filter.trait.actions';\nimport { ƟFilterActions } from './filter.model.internal';\nimport {\n  TraitActionsFactoryConfig,\n  TraitInitialStateFactoryConfig,\n} from 'ngrx-traits';\n\nexport function addFilter<Entity, F>({\n  defaultDebounceTime = 400,\n  defaultFilter,\n  filterFn,\n}: FilterConfig<Entity, F> = {}) {\n  return createTraitFactory({\n    key: filterTraitKey,\n    depends: [paginationTraitKey, loadEntitiesTraitKey],\n    config: { defaultDebounceTime, defaultFilter, filterFn } as FilterConfig<\n      Entity,\n      F\n    >,\n    actions: ({ actionsGroupKey }: TraitActionsFactoryConfig) =>\n      createFilterTraitActions<F>(actionsGroupKey),\n    selectors: () => createFilterTraitSelectors<Entity, F>(),\n    mutators: () => createFilterTraitMutators<Entity, F>(),\n    initialState: ({\n      previousInitialState,\n      allConfigs,\n    }: TraitInitialStateFactoryConfig) =>\n      createFilterInitialState<Entity, F>(\n        previousInitialState,\n        allConfigs as FilterKeyedConfig<Entity, F>,\n      ),\n    reducer: ({ initialState, allActions, allMutators }) =>\n      createFilterTraitReducer(\n        initialState,\n        allActions as ƟFilterActions<F> & LoadEntitiesActions<Entity>,\n        allMutators,\n      ),\n    effects: ({ allActions, allSelectors, allConfigs }) =>\n      createFilterTraitEffects(\n        allActions as ƟFilterActions<F> &\n          LoadEntitiesActions<Entity> &\n          PaginationActions,\n        allSelectors as FilterSelectors<Entity, F> &\n          LoadEntitiesSelectors<Entity>,\n        allConfigs,\n      ),\n  });\n}\n","import { createAction } from '@ngrx/store';\nimport { FilterActionOverload, FilterActions } from './filter.model';\nimport { ActionCreator } from '@ngrx/store/src/models';\nimport { ƟFilterActions } from './filter.model.internal';\n\nexport function createFilterTraitActions<F>(\n  actionsGroupKey: string,\n): FilterActions<F> {\n  const actions: ƟFilterActions<F> = {\n    filter: createAction(\n      `${actionsGroupKey} filter`,\n      (props?: {\n        filters: F | Partial<F>;\n        forceLoad?: boolean;\n        patch?: boolean;\n      }) => ({\n        filters: props?.filters,\n        forceLoad: props?.forceLoad,\n        patch: props?.patch,\n      }),\n    ) as ActionCreator<string, FilterActionOverload<F>>,\n    storeFilter: createAction(\n      `${actionsGroupKey} store filter`,\n      (props: { filters?: F; patch?: boolean }) => ({\n        filters: props?.filters,\n        patch: props?.patch,\n      }),\n    ),\n  };\n  return actions;\n}\n","import { EntityAndFilterState, FilterMutators } from './filter.model';\n\nexport function createFilterTraitMutators<Entity, F>(): FilterMutators<\n  Entity,\n  F\n> {\n  function setFilters<S extends EntityAndFilterState<Entity, F>>(\n    filters: F,\n    state: S,\n  ) {\n    return {\n      ...state,\n      filters,\n    };\n  }\n  return { setFilters };\n}\n","import { createReducer, on } from '@ngrx/store';\nimport { LoadEntitiesActions } from '../load-entities/load-entities.model';\nimport {\n  EntityAndFilterState,\n  FilterKeyedConfig,\n  FilterMutators,\n} from './filter.model';\nimport { ƟFilterActions } from './filter.model.internal';\n\nexport function createFilterInitialState<Entity, F>(\n  previousInitialState: any,\n  allConfigs: FilterKeyedConfig<Entity, F>,\n): EntityAndFilterState<Entity, F> {\n  return {\n    ...previousInitialState,\n    filters: allConfigs?.filter?.defaultFilter,\n  };\n}\n\nexport function createFilterTraitReducer<\n  T,\n  F,\n  S extends EntityAndFilterState<T, F>,\n>(\n  initialState: S,\n  allActions: ƟFilterActions<F> & LoadEntitiesActions<T>,\n  allMutators: FilterMutators<T, F>,\n) {\n  return createReducer(\n    initialState,\n    on(allActions.storeFilter, (state, { filters }) =>\n      allMutators.setFilters(filters, state),\n    ),\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { TraitEffect } from 'ngrx-traits';\nimport { asyncScheduler, EMPTY, of, timer } from 'rxjs';\nimport {\n  concatMap,\n  debounce,\n  distinctUntilChanged,\n  first,\n  map,\n} from 'rxjs/operators';\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { FilterKeyedConfig, FilterSelectors } from './filter.model';\nimport {\n  LoadEntitiesActions,\n  LoadEntitiesSelectors,\n} from '../load-entities/load-entities.model';\nimport { Type } from 'ngrx-traits';\nimport { ƟFilterActions } from './filter.model.internal';\nimport { PaginationActions } from '../pagination';\n\nexport function createFilterTraitEffects<Entity, F>(\n  allActions: ƟFilterActions<F> &\n    LoadEntitiesActions<Entity> &\n    PaginationActions,\n  allSelectors: FilterSelectors<Entity, F> & LoadEntitiesSelectors<Entity>,\n  allConfigs: FilterKeyedConfig<Entity, F>,\n): Type<TraitEffect>[] {\n  const traitConfig = allConfigs.filter;\n  @Injectable()\n  class FilterEffect extends TraitEffect {\n    storeFilter$ = createEffect(\n      () =>\n        ({\n          debounce: debounceTime = traitConfig!.defaultDebounceTime,\n          scheduler = asyncScheduler,\n        } = {}) =>\n          this.actions$.pipe(\n            ofType(allActions.filter),\n            debounce((value) =>\n              value?.forceLoad ? EMPTY : timer(debounceTime, scheduler),\n            ),\n            concatMap((payload) =>\n              payload.patch\n                ? this.store.select(allSelectors.selectFilter).pipe(\n                    first(),\n                    map((storedFilters) => ({\n                      ...payload,\n                      filters: { ...storedFilters, ...payload?.filters },\n                    })),\n                  )\n                : of(payload),\n            ),\n            distinctUntilChanged(\n              (previous, current) =>\n                !current?.forceLoad &&\n                JSON.stringify(previous?.filters) ===\n                  JSON.stringify(current?.filters),\n            ),\n            map((action) =>\n              allActions.storeFilter({\n                filters: action?.filters,\n                patch: action?.patch,\n              }),\n            ),\n          ),\n    );\n\n    fetch$ =\n      !traitConfig?.filterFn &&\n      createEffect(() => {\n        return this.actions$.pipe(\n          ofType(allActions['storeFilter']),\n          concatMap(() =>\n            allActions?.loadFirstPage\n              ? [allActions.clearPagesCache(), allActions.loadFirstPage()]\n              : [allActions.fetch()],\n          ),\n        );\n      });\n  }\n\n  return [FilterEffect];\n}\n","import {\n  createLoadEntitiesInitialState,\n  createLoadEntitiesTraitReducer,\n} from './load-entities.trait.reducer';\nimport {\n  EntityAndStatusState,\n  LoadEntitiesConfig,\n  LoadEntitiesKeyedConfig,\n  loadEntitiesTraitKey,\n} from './load-entities.model';\nimport {\n  TraitActionsFactoryConfig,\n  TraitInitialStateFactoryConfig,\n  TraitSelectorsFactoryConfig,\n  TraitStateMutatorsFactoryConfig,\n} from 'ngrx-traits';\nimport { PaginationKeyedConfig } from '../pagination';\nimport { createLoadEntitiesTraitMutators } from './load-entities.mutators';\nimport { createTraitFactory } from 'ngrx-traits';\nimport { createEntityAdapter, EntityAdapter } from '@ngrx/entity';\nimport { createLoadEntitiesTraitActions } from './load-entities.trait.actions';\nimport { createLoadEntitiesTraitSelectors } from './load-entities.trait.selectors';\n\nexport function addLoadEntities<Entity>(\n  traitConfig?: Omit<LoadEntitiesConfig<Entity>, 'adapter'>,\n) {\n  const adapter: EntityAdapter<Entity> = createEntityAdapter(traitConfig);\n\n  return createTraitFactory({\n    key: loadEntitiesTraitKey,\n    config: { ...traitConfig, adapter } as LoadEntitiesConfig<Entity>,\n    actions: ({ actionsGroupKey }: TraitActionsFactoryConfig) =>\n      createLoadEntitiesTraitActions<Entity>(actionsGroupKey),\n    selectors: ({ allConfigs }: TraitSelectorsFactoryConfig) =>\n      createLoadEntitiesTraitSelectors<Entity>(\n        allConfigs as LoadEntitiesKeyedConfig<Entity> & PaginationKeyedConfig,\n      ),\n    mutators: ({ allConfigs }: TraitStateMutatorsFactoryConfig) =>\n      createLoadEntitiesTraitMutators<Entity>(\n        allConfigs as LoadEntitiesKeyedConfig<Entity> & PaginationKeyedConfig,\n      ),\n    initialState: ({\n      previousInitialState,\n      allConfigs,\n    }: TraitInitialStateFactoryConfig) =>\n      createLoadEntitiesInitialState<Entity>(previousInitialState, allConfigs),\n    reducer: ({ initialState, allActions, allMutators, allConfigs }) =>\n      createLoadEntitiesTraitReducer<Entity, EntityAndStatusState<Entity>>(\n        initialState,\n        allActions,\n        allMutators,\n        allConfigs as LoadEntitiesKeyedConfig<Entity> & PaginationKeyedConfig,\n      ),\n  });\n}\n","import { LoadEntitiesActions } from './load-entities.model';\nimport { createAction, props } from '@ngrx/store';\n\nexport function createLoadEntitiesTraitActions<Entity>(\n  actionsGroupKey: string,\n): LoadEntitiesActions<Entity> {\n  const actions = {\n    fetch: createAction(`${actionsGroupKey} Fetch Entities`),\n    fetchSuccess: createAction(\n      `${actionsGroupKey} Fetch Entities Success`,\n      props<{ entities: Entity[]; total?: number }>(),\n    ),\n    fetchFail: createAction(\n      `${actionsGroupKey} Fetch Entities Fail`,\n      props<{ error?: string }>(),\n    ),\n  };\n\n  return actions;\n}\n","import { Dictionary } from '@ngrx/entity';\nimport {\n  LoadEntitiesKeyedConfig,\n  LoadEntitiesSelectors,\n} from './load-entities.model';\nimport { FilterKeyedConfig } from '../filter';\nimport { isFail, isLoading, isSuccess } from './load-entities.utils';\nimport { createSelector } from '@ngrx/store';\nimport { selectFilter } from '../filter/filter.trait.selectors';\n\nexport function createLoadEntitiesTraitSelectors<Entity>(\n  allConfigs?: LoadEntitiesKeyedConfig<Entity> &\n    FilterKeyedConfig<Entity, unknown>,\n) {\n  const adapter = allConfigs?.loadEntities?.adapter;\n  const entitySelectors = adapter?.getSelectors();\n\n  const filterFunction = allConfigs?.filter?.filterFn;\n  let selectors = entitySelectors;\n  if (filterFunction && entitySelectors) {\n    const selectAll = createSelector(\n      entitySelectors.selectAll,\n      selectFilter,\n      (entities, filters) =>\n        filters ? entities.filter((e) => filterFunction(filters, e)) : entities,\n    );\n\n    selectors = {\n      selectAll,\n      selectEntities: createSelector(\n        entitySelectors.selectEntities,\n        selectFilter,\n        (entities, filters) => {\n          const result: Dictionary<Entity> = {};\n          for (const id in entities) {\n            const e = entities[id];\n            if (filterFunction(filters, e!)) {\n              result[id] = e;\n            }\n          }\n          return result;\n        },\n      ),\n      selectTotal: createSelector(selectAll, (entities) => entities.length),\n      selectIds: createSelector(\n        selectAll,\n        (entities) =>\n          entities.map((e) => adapter?.selectId(e)) as string[] | number[],\n      ),\n    };\n  }\n  return {\n    ...selectors,\n    isFail,\n    isLoading,\n    isSuccess,\n  } as LoadEntitiesSelectors<Entity>;\n}\n","import {\n  LoadEntitiesKeyedConfig,\n  LoadEntitiesMutators,\n} from './load-entities.model';\nimport { PaginationKeyedConfig } from '../pagination';\n\nexport function createLoadEntitiesTraitMutators<Entity>(\n  allConfigs: LoadEntitiesKeyedConfig<Entity> & PaginationKeyedConfig,\n) {\n  const adapter = allConfigs?.loadEntities?.adapter;\n\n  return {\n    setAll: adapter?.setAll,\n  } as LoadEntitiesMutators<Entity>;\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport {\n  EntityAndStatusState,\n  LoadEntitiesActions,\n  LoadEntitiesKeyedConfig,\n  LoadEntitiesMutators,\n} from './load-entities.model';\nimport { createReducer, on } from '@ngrx/store';\nimport { PaginationKeyedConfig } from '../pagination';\nimport { insertIf } from 'ngrx-traits';\n\nexport function createLoadEntitiesInitialState<Entity>(\n  previousInitialState = {},\n  allConfigs: LoadEntitiesKeyedConfig<Entity>,\n): EntityAndStatusState<Entity> {\n  const traitConfig = allConfigs.loadEntities;\n  const adapter = traitConfig!.adapter;\n\n  return {\n    ...previousInitialState,\n    ...adapter!.getInitialState(),\n    status: undefined,\n  };\n}\n\nexport function createLoadEntitiesTraitReducer<\n  T,\n  S extends EntityAndStatusState<T>,\n>(\n  initialState: S,\n  actions: LoadEntitiesActions<T>,\n  allMutators: LoadEntitiesMutators<T>,\n  allConfigs: LoadEntitiesKeyedConfig<T> & PaginationKeyedConfig,\n) {\n  const handleEntitiesMerge = !allConfigs?.pagination;\n\n  return createReducer(\n    initialState,\n    on(actions.fetch, (state) => ({\n      ...state,\n      status: 'loading',\n    })),\n    on(actions.fetchFail, (state) => ({\n      ...state,\n      status: 'fail',\n    })),\n    on(actions.fetchSuccess, (state) => ({\n      ...state,\n      status: 'success',\n    })),\n    ...insertIf<S>(handleEntitiesMerge, () =>\n      on(actions.fetchSuccess, (state, { entities }) =>\n        allMutators.setAll(entities, {\n          ...state,\n        }),\n      ),\n    ),\n  );\n}\n","import { ActionCreatorProps } from '@ngrx/store/src/models';\nimport { createTraitFactory } from 'ngrx-traits';\nimport { createReducer, on } from '@ngrx/store';\n\nimport { addAsyncAction } from '../async-action/async-action.trait';\nimport { LoadEntitySelectors, LoadEntityState } from './load-entity.model';\nimport { TraitInitialStateFactoryConfig } from 'ngrx-traits';\n\ntype RecordEntity<T> = T extends Record<string, infer J> ? J : never;\n\n/**\n * Generates ngrx code needed to load and entity and store it in a state\n * @param entityName - Entity name, should be in camel case\n * @param options.actionProps - Optional param for the main request action,\n * use the props() function for its value, if not present action will have no params,\n * @param options.actionSuccessProps - Optional param for the request success\n * action, use the props() function for its value, if not present action success will have no params\n * @param options.actionFailProps - Optional param for the request fail action,\n * use the props() function for its value, if not present action fail will have no params\n * @returns the trait factory\n *\n * @example\n * const traits = createEntityFeatureFactory(\n * ...addLoadEntity({\n *        entityName: 'client',\n *        requestProps: props<{ id: string }>(),\n *        responseProps: props<{ client: Client }>(),\n *      }),\n * )({\n *      actionsGroupKey: 'Client',\n *      featureSelector: createFeatureSelector<\n *        LoadEntityState<Client, 'client'>\n *        >('client'),\n *    });\n *\n * // will generate\n * traits.actions.loadClient({id:123});\n * traits.actions.loadClientSuccess({client: {id: '123', name: 'gabs'}});\n * traits.actions.loadClientFail();\n * traits.selectors.selectClient\n * traits.selectors.isLoadingLoadClient\n * traits.selectors.isSuccessLoadClient\n * traits.selectors.isFailLoadClient\n */\nexport function addLoadEntity<\n  J extends string,\n  Request extends object | undefined = undefined,\n  Response extends Record<J, any> | undefined = undefined,\n  Failure extends object | undefined = undefined,\n  Entity = RecordEntity<Response>,\n  State = LoadEntityState<Entity, J>,\n>({\n  entityName,\n  actionProps,\n  actionSuccessProps,\n  actionFailProps,\n}: {\n  entityName: J;\n  actionProps?: ActionCreatorProps<Request>;\n  actionSuccessProps?: ActionCreatorProps<Response>;\n  actionFailProps?: ActionCreatorProps<Failure>;\n}) {\n  const capitalizedName =\n    entityName.charAt(0).toUpperCase() + entityName.slice(1);\n\n  type K = `load${Capitalize<J & string>}`;\n\n  return [\n    addAsyncAction<K, Request, Response, Failure>({\n      name: ('load' + capitalizedName) as K,\n      actionProps,\n      actionSuccessProps,\n      actionFailProps,\n    }),\n    createTraitFactory({\n      key: `load${capitalizedName}`,\n      config: { entityName, actionProps, actionSuccessProps, actionFailProps },\n      selectors: () => {\n        function selectEntity(state: State) {\n          return (state as any)[`${entityName}`] as Entity;\n        }\n\n        return {\n          [`select${capitalizedName}`]: selectEntity,\n        } as LoadEntitySelectors<Entity, J>;\n      },\n      initialState: ({\n        previousInitialState,\n      }: TraitInitialStateFactoryConfig) => previousInitialState as State,\n      reducer: ({ initialState, allActions }) => {\n        return createReducer(\n          initialState,\n          on(\n            (allActions as any)[`load${capitalizedName}Success`],\n            (state: any, action: any) => ({\n              ...state,\n              [entityName]: action[entityName],\n            }),\n          ),\n        );\n      },\n    }),\n  ] as const;\n}\n","import { createMultiSelectionTraitActions } from './multi-selection.trait.actions';\nimport { SortActions, SortKeyedConfig } from '../sort';\nimport { createMultiSelectionTraitSelectors } from './multi-selection.trait.selectors';\nimport {\n  MultipleSelectionSelectors,\n  MultiSelectActions,\n} from './multi-selection.model';\nimport {\n  PaginationActions,\n  PaginationKeyedConfig,\n} from '../pagination/pagination.model';\nimport {\n  LoadEntitiesActions,\n  LoadEntitiesKeyedConfig,\n  LoadEntitiesSelectors,\n  loadEntitiesTraitKey,\n} from '../load-entities/load-entities.model';\nimport { createTraitFactory } from 'ngrx-traits';\nimport { CrudActions } from '../crud/crud.model';\nimport {\n  createMultiSelectionInitialState,\n  createMultiSelectionTraitReducer,\n} from './multi-selection.trait.reducer';\nimport { createMultiSelectionTraitMutators } from './multi-selection.trait.mutators';\nimport { FilterActions } from '../filter';\nimport {\n  TraitActionsFactoryConfig,\n  TraitInitialStateFactoryConfig,\n  TraitSelectorsFactoryConfig,\n  TraitStateMutatorsFactoryConfig,\n} from 'ngrx-traits';\n\nexport function addMultiSelection<Entity>() {\n  return createTraitFactory({\n    key: 'multiSelection',\n    depends: [loadEntitiesTraitKey],\n    actions: ({ actionsGroupKey }: TraitActionsFactoryConfig) =>\n      createMultiSelectionTraitActions(actionsGroupKey),\n    selectors: ({ previousSelectors }: TraitSelectorsFactoryConfig) =>\n      createMultiSelectionTraitSelectors<Entity>(\n        previousSelectors as LoadEntitiesSelectors<Entity>,\n      ),\n    initialState: ({ previousInitialState }: TraitInitialStateFactoryConfig) =>\n      createMultiSelectionInitialState<Entity>(previousInitialState),\n    mutators: ({ allSelectors }: TraitStateMutatorsFactoryConfig) =>\n      createMultiSelectionTraitMutators<Entity>(\n        allSelectors as MultipleSelectionSelectors<Entity>,\n      ),\n    reducer: ({ initialState, allActions, allMutators, allConfigs }) =>\n      createMultiSelectionTraitReducer(\n        initialState,\n        allActions as MultiSelectActions &\n          CrudActions<Entity> &\n          SortActions<Entity> &\n          LoadEntitiesActions<Entity> &\n          FilterActions<any> &\n          PaginationActions,\n        allMutators,\n        allConfigs as LoadEntitiesKeyedConfig<Entity> &\n          PaginationKeyedConfig &\n          SortKeyedConfig<Entity>,\n      ),\n  });\n}\n","import { createAction, props } from '@ngrx/store';\nimport { MultiSelectActions } from './multi-selection.model';\n\nexport function createMultiSelectionTraitActions(\n  actionsGroupKey: string,\n): MultiSelectActions {\n  return {\n    multiSelect: createAction(\n      `${actionsGroupKey} Select`,\n      props<{ id: number | string }>(),\n    ),\n    multiDeselect: createAction(\n      `${actionsGroupKey} Deselect`,\n      props<{ id: number | string }>(),\n    ),\n    multiToggleSelect: createAction(\n      `${actionsGroupKey} Toggle Select`,\n      props<{ id: number | string }>(),\n    ),\n    toggleSelectAll: createAction(`${actionsGroupKey} Toggle Select All`),\n    multiClearSelection: createAction(`${actionsGroupKey} Clear Selection`),\n  };\n}\n","import { createSelector } from '@ngrx/store';\nimport { selectTotalSelected } from './multi-selection.utils';\nimport {\n  EntityAndMultipleSelectionState,\n  MultipleSelectionSelectors,\n} from './multi-selection.model';\nimport { LoadEntitiesSelectors } from '../load-entities';\nimport { Dictionary } from '@ngrx/entity/src/models';\n\nexport function createMultiSelectionTraitSelectors<Entity>(\n  previousSelectors: LoadEntitiesSelectors<Entity>,\n): MultipleSelectionSelectors<Entity> {\n  const { selectEntities, selectTotal } = previousSelectors;\n\n  function selectIdsSelected(state: EntityAndMultipleSelectionState<Entity>) {\n    return state.selectedIds;\n  }\n  const selectAllIdsSelected = createSelector(\n    selectIdsSelected,\n    (ids: Dictionary<boolean>) => Object.keys(ids),\n  );\n  const selectEntitiesSelected = createSelector(\n    selectAllIdsSelected,\n    selectEntities,\n    (selectedIds, entities) =>\n      selectedIds.reduce((acum: { [id: string]: Entity | undefined }, id) => {\n        acum[id] = entities[id];\n        return acum;\n      }, {}),\n  );\n  const selectAllSelected = createSelector(\n    selectAllIdsSelected,\n    selectEntities,\n    (selectedIds, entities) => selectedIds.map((id) => entities[id]!),\n  );\n\n  const isAllSelected = createSelector(\n    (state: EntityAndMultipleSelectionState<Entity>) => selectTotal(state),\n    selectTotalSelected,\n    (total, totalSelected) =>\n      totalSelected === total ? 'all' : totalSelected === 0 ? 'none' : 'some',\n  );\n\n  return {\n    selectIdsSelected,\n    selectAllIdsSelected,\n    selectEntitiesSelected,\n    selectAllSelected,\n    selectTotalSelected,\n    isAllSelected,\n  };\n}\n","import {\n  EntityAndMultipleSelectionState,\n  MultipleSelectionMutators,\n  MultipleSelectionSelectors,\n} from './multi-selection.model';\nimport { toMap } from 'ngrx-traits';\nimport {\n  multiClearSelection,\n  multiDeselect,\n  multiSelect,\n  multiToggleSelect,\n} from './multi-selection.utils';\n\nexport function createMultiSelectionTraitMutators<Entity>({\n  isAllSelected,\n}: MultipleSelectionSelectors<Entity>): MultipleSelectionMutators<Entity> {\n  function toggleSelectAll<S extends EntityAndMultipleSelectionState<Entity>>(\n    state: S,\n  ): S {\n    const allSelected = isAllSelected(state);\n    if (allSelected === 'all') {\n      return {\n        ...state,\n        selectedIds: {},\n      };\n    } else {\n      return {\n        ...state,\n        selectedIds: toMap(state.ids),\n      };\n    }\n  }\n\n  return {\n    multiDeselect,\n    multiSelect,\n    multiToggleSelect,\n    toggleSelectAll,\n    multiClearSelection,\n  };\n}\n","import {\n  PaginationConfig,\n  PaginationKeyedConfig,\n  PaginationMutators,\n  PaginationSelectors,\n  paginationTraitKey,\n} from './pagination.model';\nimport { createPaginationTraitSelectors } from './pagination.trait.selectors';\nimport { createPaginationTraitActions } from './pagination.trait.actions';\nimport { FilterActions, FilterKeyedConfig } from '../filter/filter.model';\nimport {\n  LoadEntitiesActions,\n  LoadEntitiesKeyedConfig,\n  LoadEntitiesMutators,\n  LoadEntitiesSelectors,\n  loadEntitiesTraitKey,\n} from '../load-entities/load-entities.model';\nimport {\n  createPaginationInitialState,\n  createPaginationTraitReducer,\n} from './pagination.trait.reducer';\nimport { createPaginationTraitEffects } from './pagination.trait.effects';\nimport { createTraitFactory } from 'ngrx-traits';\nimport { CrudActions } from '../crud/crud.model';\nimport { createPaginationTraitMutators } from './pagination.trait.mutators';\nimport { ƟPaginationActions } from './pagination.model.internal';\nimport {\n  TraitActionsFactoryConfig,\n  TraitInitialStateFactoryConfig,\n  TraitSelectorsFactoryConfig,\n} from 'ngrx-traits';\n\nexport function addPagination<Entity>({\n  cacheType = 'full',\n  pageSize = 20,\n  currentPage = 0,\n  pagesToCache = 3,\n}: PaginationConfig = {}) {\n  return createTraitFactory({\n    key: paginationTraitKey,\n    depends: [loadEntitiesTraitKey],\n    config: {\n      cacheType,\n      pageSize,\n      currentPage,\n      pagesToCache,\n    } as PaginationConfig,\n    actions: ({ actionsGroupKey }: TraitActionsFactoryConfig) =>\n      createPaginationTraitActions(actionsGroupKey),\n    selectors: ({\n      previousSelectors,\n      allConfigs,\n    }: TraitSelectorsFactoryConfig) =>\n      createPaginationTraitSelectors<Entity>(\n        previousSelectors as LoadEntitiesSelectors<Entity>,\n        allConfigs as PaginationKeyedConfig &\n          FilterKeyedConfig<Entity, unknown>,\n      ),\n    mutators: ({ allSelectors, allConfigs }) =>\n      createPaginationTraitMutators<Entity>(\n        allSelectors as PaginationSelectors<Entity> &\n          LoadEntitiesSelectors<Entity>,\n        allConfigs as PaginationKeyedConfig & LoadEntitiesKeyedConfig<Entity>,\n      ),\n    initialState: ({\n      previousInitialState,\n      allConfigs,\n    }: TraitInitialStateFactoryConfig) =>\n      createPaginationInitialState<Entity>(\n        previousInitialState,\n        allConfigs as PaginationKeyedConfig,\n      ),\n    reducer: ({\n      initialState,\n      allActions,\n      allSelectors,\n      allMutators,\n      allConfigs,\n    }) =>\n      createPaginationTraitReducer(\n        initialState,\n        allActions as ƟPaginationActions &\n          FilterActions<Entity> &\n          LoadEntitiesActions<Entity> &\n          CrudActions<Entity>,\n        allSelectors as PaginationSelectors<Entity> &\n          LoadEntitiesSelectors<Entity>,\n        allMutators as PaginationMutators<Entity> &\n          LoadEntitiesMutators<Entity>,\n        allConfigs as FilterKeyedConfig<Entity, unknown> &\n          LoadEntitiesKeyedConfig<Entity> &\n          PaginationKeyedConfig,\n      ),\n    effects: ({ allActions, allSelectors }) =>\n      createPaginationTraitEffects(\n        allActions as ƟPaginationActions &\n          FilterActions<Entity> &\n          LoadEntitiesActions<Entity> &\n          CrudActions<Entity>,\n        allSelectors as PaginationSelectors<Entity> &\n          LoadEntitiesSelectors<Entity>,\n      ),\n  });\n}\n","import { PaginationActions } from './pagination.model';\nimport { createAction, props } from '@ngrx/store';\nimport { ƟPaginationActions } from './pagination.model.internal';\n\nexport function createPaginationTraitActions(\n  actionsGroupKey: string,\n): PaginationActions {\n  const actions: ƟPaginationActions = {\n    loadPage: createAction(\n      `${actionsGroupKey} load page`,\n      ({ index, forceLoad }: { index: number; forceLoad?: boolean }) => ({\n        index,\n        forceLoad,\n      }),\n    ),\n    loadPageSuccess: createAction(\n      `${actionsGroupKey} load\n          page success`,\n    ),\n    loadPageFail: createAction(`${actionsGroupKey} load page fail`),\n    loadPreviousPage: createAction(`${actionsGroupKey} load previous page`),\n    loadNextPage: createAction(`${actionsGroupKey} load next page`),\n    loadFirstPage: createAction(\n      `${actionsGroupKey} load first page`,\n      (forceLoad?: boolean) => ({ forceLoad }),\n    ),\n    loadLastPage: createAction(`${actionsGroupKey} load last page`),\n    clearPagesCache: createAction(`${actionsGroupKey} clear cache`),\n    setRequestPage: createAction(\n      `${actionsGroupKey} set request page`,\n      props<{ index: number }>(),\n    ),\n  };\n  return actions;\n}\n","import { createSelector } from '@ngrx/store';\nimport {\n  EntityAndPaginationState,\n  PaginationSelectors,\n  PaginationState,\n} from './pagination.model';\nimport { LoadEntitiesSelectors } from '../load-entities/load-entities.model';\nimport { FilterKeyedConfig } from '../filter/filter.model';\n\nexport function createPaginationTraitSelectors<Entity>(\n  previousSelectors: LoadEntitiesSelectors<Entity>,\n  allConfigs: FilterKeyedConfig<Entity, unknown>,\n): PaginationSelectors<Entity> {\n  const { selectAll, isLoading } = previousSelectors;\n\n  const filterFunction = allConfigs?.filter?.filterFn;\n\n  function selectPagination(state: EntityAndPaginationState<Entity>) {\n    return state.pagination;\n  }\n  const selectPaginationFiltered: (\n    state: EntityAndPaginationState<Entity>,\n  ) => PaginationState['pagination'] = filterFunction\n    ? createSelector(selectAll, selectPagination, (entities, pagination) => {\n        return {\n          ...pagination,\n          total: entities.length,\n          cache: {\n            ...pagination.cache,\n            start: 0,\n            end: entities.length,\n          },\n        };\n      })\n    : selectPagination;\n\n  const selectPageEntities = createSelector(\n    selectAll,\n    selectPaginationFiltered,\n    (\n      entities: Entity[],\n      pagination,\n      { page } = { page: pagination.currentPage },\n    ) => {\n      const startIndex = page * pagination.pageSize - pagination.cache.start;\n      let endIndex = startIndex + pagination.pageSize;\n      endIndex =\n        endIndex < pagination.cache.end ? endIndex : pagination.cache.end;\n      return entities.slice(startIndex, endIndex);\n    },\n  );\n\n  const selectPageInfo = createSelector(\n    selectPaginationFiltered,\n    (pagination) => {\n      const pagesCount =\n        pagination.total && pagination.total > 0\n          ? Math.ceil(pagination.total / pagination.pageSize)\n          : undefined;\n      return {\n        pageIndex: pagination.currentPage,\n        total: pagination.total,\n        pageSize: pagination.pageSize,\n        pagesCount,\n        hasPrevious: pagination.currentPage - 1 >= 0,\n        hasNext:\n          pagination.total && pagination.total > 0\n            ? pagination.currentPage + 1 < pagesCount!\n            : true,\n        cacheType: pagination.cache.type,\n      };\n    },\n  );\n\n  const isPageInCache = createSelector(\n    selectPaginationFiltered,\n    (pagination, { page } = { page: pagination.currentPage }) => {\n      const startIndex = page * pagination.pageSize;\n      let endIndex = startIndex + pagination.pageSize - 1;\n      endIndex =\n        pagination.total && endIndex > pagination.total\n          ? pagination.total - 1\n          : endIndex;\n      return (\n        startIndex >= pagination.cache.start && endIndex <= pagination.cache.end\n      );\n    },\n  );\n\n  const selectPage = createSelector(\n    selectPageEntities,\n    selectPageInfo,\n    // props look unsued but they are pass to the selectPageEntities\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    (entities, pageInfo, props = { page: pageInfo.pageIndex }) => ({\n      entities,\n      ...pageInfo,\n    }),\n  );\n\n  const selectPagedRequest = createSelector(selectPagination, (pagination) => ({\n    startIndex: pagination.pageSize * pagination.requestPage,\n    size: pagination.pageSize * pagination.pagesToCache,\n    page: pagination.requestPage,\n  }));\n\n  const isLoadingPage = createSelector(\n    isLoading,\n    selectPagination,\n    (isLoading, pagination) =>\n      isLoading && pagination.requestPage === pagination.currentPage,\n  );\n\n  return {\n    selectPageEntities,\n    isPageInCache,\n    selectPage,\n    selectPagedRequest,\n    selectPageInfo,\n    isLoadingPage,\n  };\n}\n","import {\n  EntityAndPaginationState,\n  PaginationMutators,\n  PaginationSelectors,\n} from './pagination.model';\nimport { LoadEntitiesKeyedConfig } from '../load-entities';\n\nexport function createPaginationTraitMutators<Entity>(\n  allSelectors: PaginationSelectors<Entity>,\n  allConfigs: LoadEntitiesKeyedConfig<Entity>,\n): PaginationMutators<Entity> {\n  const adapter = allConfigs.loadEntities!.adapter;\n\n  function mergePaginatedEntities<S extends EntityAndPaginationState<Entity>>(\n    entities: Entity[],\n    total = undefined,\n    state: S,\n  ): S {\n    const cacheType = state.pagination.cache.type;\n\n    switch (cacheType) {\n      case 'full':\n        return adapter.setAll(entities, {\n          ...state,\n          pagination: {\n            ...state.pagination,\n            total: entities.length,\n            cache: {\n              ...state.pagination.cache,\n              start: 0,\n              end: entities.length,\n            },\n          },\n        });\n      case 'partial': {\n        const isPreloadNextPages =\n          state.pagination.currentPage + 1 === state.pagination.requestPage;\n\n        const start = state.pagination.currentPage * state.pagination.pageSize;\n        const newEntities = isPreloadNextPages\n          ? [...allSelectors.selectPageEntities(state), ...entities]\n          : entities;\n        return adapter.setAll(newEntities, {\n          ...state,\n          pagination: {\n            ...state.pagination,\n            total,\n            cache: {\n              ...state.pagination.cache,\n              start,\n              end: start + entities.length,\n            },\n          },\n        });\n      }\n      case 'grow':\n        return adapter.addMany(entities, {\n          ...state,\n          pagination: {\n            ...state.pagination,\n            total,\n            cache: {\n              ...state.pagination.cache,\n              end: state.ids.length + entities.length,\n            },\n          },\n        });\n    }\n\n    return state;\n  }\n  return { mergePaginatedEntities };\n}\n","import { Injectable } from '@angular/core';\nimport { TraitEffect } from 'ngrx-traits';\nimport { concatMap, concatMapTo, filter, first, map } from 'rxjs/operators';\nimport { concatLatestFrom, createEffect, ofType } from '@ngrx/effects';\nimport { FilterActions } from '../filter/filter.model';\nimport { LoadEntitiesActions, LoadEntitiesSelectors } from '../load-entities';\nimport { CrudActions } from '../crud/crud.model';\nimport { PaginationSelectors } from './pagination.model';\nimport { Type } from 'ngrx-traits';\nimport { ƟPaginationActions } from './pagination.model.internal';\n\nexport function createPaginationTraitEffects<Entity>(\n  allActions: ƟPaginationActions &\n    FilterActions<Entity> &\n    LoadEntitiesActions<Entity> &\n    CrudActions<Entity>,\n  allSelectors: LoadEntitiesSelectors<Entity> & PaginationSelectors<Entity>,\n): Type<TraitEffect>[] {\n  @Injectable()\n  class PaginationEffect extends TraitEffect {\n    loadPage$ = createEffect(() => {\n      return this.actions$.pipe(\n        ofType(allActions.loadPage),\n        concatLatestFrom(() => this.store.select(allSelectors.isPageInCache)),\n        map(([{ forceLoad }, isInCache]) =>\n          !forceLoad && isInCache\n            ? allActions.loadPageSuccess()\n            : allActions.fetch(),\n        ),\n      );\n    });\n\n    preloadNextPage$ = createEffect(() => {\n      return this.actions$.pipe(\n        ofType(allActions.loadPageSuccess),\n        concatMapTo(\n          this.store.select(allSelectors.selectPageInfo).pipe(first()),\n        ),\n        filter(\n          (pageInfo) =>\n            !!pageInfo.total &&\n            pageInfo.hasNext &&\n            pageInfo.cacheType !== 'full',\n        ),\n        concatMap((pageInfo) =>\n          this.store\n            .select(allSelectors.isPageInCache, {\n              page: pageInfo.pageIndex + 1,\n            })\n            .pipe(\n              first(),\n              map((isInCache) => (!isInCache && pageInfo) || undefined),\n            ),\n        ),\n        filter((pageInfo) => !!pageInfo),\n        concatMap((pageInfo) => [\n          allActions.setRequestPage({ index: pageInfo!.pageIndex + 1 }),\n          allActions.fetch(),\n        ]),\n      );\n    });\n\n    loadFirstPage$ = createEffect(() => {\n      return this.actions$.pipe(\n        ofType(allActions.loadFirstPage),\n        map(() => allActions.loadPage({ index: 0 })),\n      );\n    });\n\n    loadPreviousPage$ = createEffect(() => {\n      return this.actions$.pipe(\n        ofType(allActions.loadPreviousPage),\n        concatMapTo(\n          this.store.select(allSelectors.selectPageInfo).pipe(first()),\n        ),\n        map((page) =>\n          page.hasPrevious\n            ? allActions.loadPage({ index: page.pageIndex - 1 })\n            : allActions.loadPageFail(),\n        ),\n      );\n    });\n\n    loadNextPage$ = createEffect(() => {\n      return this.actions$.pipe(\n        ofType(allActions.loadNextPage),\n        concatMapTo(\n          this.store.select(allSelectors.selectPageInfo).pipe(first()),\n        ),\n        map((page) =>\n          page.hasNext\n            ? allActions.loadPage({ index: page.pageIndex + 1 })\n            : allActions.loadPageFail(),\n        ),\n      );\n    });\n\n    loadLastPage$ = createEffect(() => {\n      return this.actions$.pipe(\n        ofType(allActions.loadLastPage),\n        concatMapTo(\n          this.store.select(allSelectors.selectPageInfo).pipe(first()),\n        ),\n        map((page) =>\n          page.hasNext && page.pagesCount\n            ? allActions.loadPage({ index: page.pagesCount - 1 })\n            : allActions.loadPageFail(),\n        ),\n      );\n    });\n  }\n  return [PaginationEffect];\n}\n","import { createTraitFactory } from 'ngrx-traits';\nimport { GenericActionCreator } from '../load-entities';\nimport { TraitActionsFactoryConfig } from 'ngrx-traits';\nimport { createAction, createReducer, on } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport { TraitEffect } from 'ngrx-traits';\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { mapTo } from 'rxjs/operators';\n\nexport function addReset(\n  traitConfig: {\n    resetOn?: GenericActionCreator[];\n  } = {},\n) {\n  return createTraitFactory({\n    key: 'reset',\n    config: traitConfig,\n    actions: ({ actionsGroupKey }: TraitActionsFactoryConfig) => ({\n      reset: createAction(`${actionsGroupKey} Reset State`),\n    }),\n    reducer: ({ allActions, initialState }) =>\n      createReducer(\n        initialState,\n        on(allActions.reset, () => initialState),\n      ),\n    effects: ({ allActions }) => {\n      @Injectable()\n      class ResetEffect extends TraitEffect {\n        externalReset$ =\n          traitConfig?.resetOn?.length &&\n          createEffect(() => {\n            return this.actions$.pipe(\n              ofType(...traitConfig?.resetOn),\n              mapTo(allActions.reset()),\n            );\n          });\n      }\n      return traitConfig?.resetOn?.length ? [ResetEffect] : [];\n    },\n  });\n}\n","import {\n  createTraitFactory,\n  TraitActionsFactoryConfig,\n  TraitInitialStateFactoryConfig,\n} from 'ngrx-traits';\n\nimport { createSingleSelectionTraitActions } from './single-selection.trait.actions';\nimport { createSingleSelectionTraitSelectors } from './single-selection.trait.selectors';\nimport {\n  createSingleSelectionInitialState,\n  createSingleSelectionTraitReducer,\n} from './single-selection.trait.reducer';\nimport { createSingleSelectionTraitMutators } from './single-selection.trait.mutators';\nimport {\n  LoadEntitiesActions,\n  LoadEntitiesKeyedConfig,\n  loadEntitiesTraitKey,\n} from '../load-entities/load-entities.model';\nimport { SortActions, SortKeyedConfig } from '../sort/sort.model';\nimport {\n  SingleSelectionActions,\n  SingleSelectionConfig,\n  SingleSelectionKeyedConfig,\n} from './single-selection.model';\nimport { CrudActions } from '../crud/crud.model';\nimport {\n  PaginationActions,\n  PaginationKeyedConfig,\n} from '../pagination/pagination.model';\nimport { FilterActions } from '../filter';\n\nexport function addSingleSelection<Entity>(config?: SingleSelectionConfig) {\n  return createTraitFactory({\n    key: 'singleSelection',\n    depends: [loadEntitiesTraitKey],\n    config,\n    actions: ({ actionsGroupKey }: TraitActionsFactoryConfig) =>\n      createSingleSelectionTraitActions(actionsGroupKey),\n    selectors: () => createSingleSelectionTraitSelectors<Entity>(),\n    mutators: () => createSingleSelectionTraitMutators(),\n    initialState: ({\n      previousInitialState,\n      allConfigs,\n    }: TraitInitialStateFactoryConfig) =>\n      createSingleSelectionInitialState<Entity>(\n        previousInitialState,\n        allConfigs as SingleSelectionKeyedConfig,\n      ),\n    reducer: ({ initialState, allActions, allMutators, allConfigs }) =>\n      createSingleSelectionTraitReducer(\n        initialState,\n        allActions as SingleSelectionActions &\n          CrudActions<Entity> &\n          SortActions<Entity> &\n          PaginationActions &\n          FilterActions<any> &\n          LoadEntitiesActions<Entity>,\n        allMutators,\n        allConfigs as SingleSelectionKeyedConfig &\n          LoadEntitiesKeyedConfig<Entity> &\n          PaginationKeyedConfig &\n          SortKeyedConfig<Entity>,\n      ),\n  });\n}\n","import { createAction, props } from '@ngrx/store';\nimport { SingleSelectionActions } from './single-selection.model';\n\nexport function createSingleSelectionTraitActions(\n  actionsGroupKey: string,\n): SingleSelectionActions {\n  return {\n    select: createAction(\n      `${actionsGroupKey} Select`,\n      props<{ id: string | number }>(),\n    ),\n    deselect: createAction(`${actionsGroupKey} Deselect`),\n    toggleSelect: createAction(\n      `${actionsGroupKey} Toggle Select`,\n      props<{ id: string | number }>(),\n    ),\n  };\n}\n","import {\n  EntityAndSingleSelectionState,\n  SingleSelectionSelectors,\n  SingleSelectionState,\n} from './single-selection.model';\n\nexport function createSingleSelectionTraitSelectors<\n  Entity,\n>(): SingleSelectionSelectors<Entity> {\n  function selectIdSelected(state: SingleSelectionState) {\n    return state.selectedId;\n  }\n  function selectEntitySelected<Entity>(\n    state: EntityAndSingleSelectionState<Entity>,\n  ) {\n    return (state.selectedId && state.entities[state.selectedId]) || undefined;\n  }\n\n  return {\n    selectIdSelected,\n    selectEntitySelected,\n  };\n}\n","import {\n  EntityAndSingleSelectionState,\n  SingleSelectionMutators,\n} from './single-selection.model';\n\nexport function createSingleSelectionTraitMutators<\n  Entity,\n>(): SingleSelectionMutators<Entity> {\n  function select<S extends EntityAndSingleSelectionState<Entity>>(\n    id: string | number,\n    state: S,\n  ) {\n    return {\n      ...state,\n      selectedId: id,\n    };\n  }\n  function deselect<S extends EntityAndSingleSelectionState<Entity>>(state: S) {\n    return {\n      ...state,\n      selectedId: undefined,\n    };\n  }\n  function toggleSelect<S extends EntityAndSingleSelectionState<Entity>>(\n    id: string | number,\n    state: S,\n  ) {\n    return {\n      ...state,\n      selectedId: state.selectedId === id ? undefined : id,\n    };\n  }\n\n  return {\n    select,\n    deselect,\n    toggleSelect,\n  };\n}\n","import { createReducer, on } from '@ngrx/store';\nimport {\n  LoadEntitiesActions,\n  LoadEntitiesKeyedConfig,\n} from '../load-entities/load-entities.model';\nimport { SortActions, SortKeyedConfig } from '../sort/sort.model';\nimport {\n  EntityAndSingleSelectionState,\n  SingleSelectionActions,\n  SingleSelectionKeyedConfig,\n  SingleSelectionMutators,\n} from './single-selection.model';\nimport { CrudActions } from '../crud/crud.model';\nimport { insertIf } from 'ngrx-traits';\nimport {\n  PaginationActions,\n  PaginationKeyedConfig,\n} from '../pagination/pagination.model';\nimport { FilterActions } from '../filter';\n\nexport function createSingleSelectionInitialState<Entity>(\n  previousInitialState: any,\n  allConfigs: SingleSelectionKeyedConfig,\n): EntityAndSingleSelectionState<Entity> {\n  const selectedId = allConfigs.singleSelection?.selectedId;\n  return {\n    ...previousInitialState,\n    selectedId,\n  };\n}\nexport function createSingleSelectionTraitReducer<\n  Entity,\n  S extends EntityAndSingleSelectionState<Entity>,\n>(\n  initialState: S,\n  allActions: SingleSelectionActions &\n    CrudActions<Entity> &\n    SortActions<Entity> &\n    PaginationActions &\n    FilterActions<any> &\n    LoadEntitiesActions<Entity>,\n  allMutators: SingleSelectionMutators<Entity>,\n  allConfigs: SingleSelectionKeyedConfig &\n    LoadEntitiesKeyedConfig<Entity> &\n    PaginationKeyedConfig &\n    SortKeyedConfig<Entity>,\n) {\n  const { adapter } = allConfigs.loadEntities!;\n\n  const sortRemote = allConfigs.sort?.remote;\n  const paginationCacheType = allConfigs.pagination?.cacheType;\n\n  return createReducer(\n    initialState,\n    on(allActions.select, (state, { id }) => allMutators.select(id, state)),\n    on(allActions.deselect, (state) => allMutators.deselect(state)),\n    on(allActions.toggleSelect, (state, { id }) =>\n      allMutators.toggleSelect(id, state),\n    ),\n    ...insertIf<S>(allActions.removeAll, () =>\n      on(allActions.removeAll, (state) => allMutators.deselect(state)),\n    ),\n    ...insertIf<S>(sortRemote, () =>\n      on(allActions.sort, (state) => allMutators.deselect(state)),\n    ),\n    ...insertIf<S>(allActions.filter, () =>\n      on(allActions.filter, (state) => allMutators.deselect(state)),\n    ),\n    ...insertIf<S>(!allActions.loadPageSuccess, () =>\n      on(allActions.fetchSuccess, (state) => allMutators.deselect(state)),\n    ),\n    ...insertIf<S>(\n      allActions.loadPageSuccess && paginationCacheType === 'partial',\n      () =>\n        on(allActions.loadPageSuccess, (state) => allMutators.deselect(state)),\n    ),\n    ...insertIf<S>(allActions.remove, () =>\n      on(allActions.remove, (state, { keys }) => {\n        const shouldDeselect = keys.some(\n          (v: string | number) => v === state.selectedId,\n        );\n        return shouldDeselect\n          ? {\n              ...state,\n              selectedId: undefined,\n            }\n          : state;\n      }),\n    ),\n    ...insertIf<S>(allActions.update, () =>\n      on(allActions.update, (state, { updates }) => {\n        const change = updates.find((updated) => {\n          const id = adapter.selectId(updated.changes as Entity);\n          return id && id !== updated.id && state.selectedId === updated.id;\n        });\n        return change\n          ? {\n              ...state,\n              selectedId: adapter.selectId(change.changes as Entity),\n            }\n          : state;\n      }),\n    ),\n  );\n}\n","import { createSortTraitMutators } from './sort.trait.mutators';\nimport {\n  createSortInitialState,\n  createSortTraitReducer,\n} from './sort.trait.reducer';\nimport { createSortTraitSelectors } from './sort.trait.selectors';\nimport { createSortTraitEffect } from './sort.trait.effect';\nimport {\n  SortActions,\n  SortConfig,\n  SortKeyedConfig,\n  SortSelectors,\n  sortTraitKey,\n} from './sort.model';\nimport {\n  LoadEntitiesActions,\n  LoadEntitiesKeyedConfig,\n  LoadEntitiesSelectors,\n  loadEntitiesTraitKey,\n} from '../load-entities/load-entities.model';\nimport {\n  PaginationActions,\n  PaginationKeyedConfig,\n} from '../pagination/pagination.model';\nimport { createTraitFactory } from 'ngrx-traits';\nimport { createSortTraitActions } from './sort.trait.actions';\nimport {\n  TraitActionsFactoryConfig,\n  TraitInitialStateFactoryConfig,\n  TraitStateMutatorsFactoryConfig,\n} from 'ngrx-traits';\n\nexport function addSort<Entity>({\n  remote = false,\n  defaultSort,\n}: SortConfig<Entity> = {}) {\n  return createTraitFactory({\n    key: sortTraitKey,\n    depends: [loadEntitiesTraitKey],\n    config: { remote, defaultSort } as SortConfig<Entity>,\n    actions: ({ actionsGroupKey }: TraitActionsFactoryConfig) =>\n      createSortTraitActions<Entity>(actionsGroupKey),\n    selectors: () => createSortTraitSelectors<Entity>(),\n    mutators: ({ allSelectors, allConfigs }: TraitStateMutatorsFactoryConfig) =>\n      createSortTraitMutators<Entity>(\n        allSelectors as SortSelectors<Entity> & LoadEntitiesSelectors<Entity>,\n        allConfigs,\n      ),\n    initialState: ({\n      previousInitialState,\n      allConfigs,\n    }: TraitInitialStateFactoryConfig) =>\n      createSortInitialState<Entity>(previousInitialState, allConfigs),\n    reducer: ({ initialState, allActions, allMutators, allConfigs }) =>\n      createSortTraitReducer<Entity>(\n        initialState,\n        allActions as SortActions<Entity> & LoadEntitiesActions<Entity>,\n        allMutators,\n        allConfigs as LoadEntitiesKeyedConfig<Entity> &\n          PaginationKeyedConfig &\n          SortKeyedConfig<Entity>,\n      ),\n    effects: ({ allActions, allConfigs }) =>\n      createSortTraitEffect(\n        allActions as LoadEntitiesActions<Entity> &\n          SortActions<Entity> &\n          PaginationActions,\n        allConfigs as LoadEntitiesKeyedConfig<Entity> & SortKeyedConfig<Entity>,\n      ),\n  });\n}\n","import { createAction, props } from '@ngrx/store';\nimport { Sort, SortActions } from './sort.model';\n\nexport function createSortTraitActions<Entity>(\n  actionsGroupKey: string,\n): SortActions<Entity> {\n  return {\n    sort: createAction(`${actionsGroupKey} sort`, props<Sort<Entity>>()),\n    resetSort: createAction(`${actionsGroupKey} default sort`),\n  };\n}\n","import { SortSelectors, SortState } from './sort.model';\n\nexport function createSortTraitSelectors<Entity>(): SortSelectors<Entity> {\n  function selectSort(state: SortState<Entity>) {\n    return state.sort?.current;\n  }\n  return {\n    selectSort,\n  };\n}\n","import {\n  LoadEntitiesKeyedConfig,\n  LoadEntitiesSelectors,\n} from '../load-entities/load-entities.model';\nimport { EntityAndSortState, Sort, SortMutators } from './sort.model';\nimport { sortData } from './sort.utils';\n\nexport function createSortTraitMutators<Entity>(\n  { selectAll }: LoadEntitiesSelectors<Entity>,\n  allConfigs: LoadEntitiesKeyedConfig<Entity>,\n): SortMutators<Entity> {\n  function sortEntities<S extends EntityAndSortState<Entity>>(\n    { active, direction }: Sort<Entity>,\n    state: S,\n  ) {\n    const { adapter } = allConfigs.loadEntities!;\n    const entities = selectAll(state);\n    const sortedIds = sortData(entities, { active, direction }).map((v) =>\n      adapter.selectId(v),\n    );\n    return {\n      ...state,\n      ids: sortedIds,\n      sort: { ...state.sort, current: { active, direction } },\n    };\n  }\n  return {\n    sortEntities,\n  };\n}\n","import { createReducer, on } from '@ngrx/store';\nimport { LoadEntitiesActions, LoadEntitiesKeyedConfig } from '../load-entities';\nimport {\n  EntityAndSortState,\n  SortActions,\n  SortKeyedConfig,\n  SortMutators,\n} from './sort.model';\n\nexport function createSortInitialState<Entity>(\n  previousInitialState: any,\n  allConfigs: SortKeyedConfig<Entity>,\n): EntityAndSortState<Entity> {\n  const { defaultSort } = allConfigs.sort!;\n\n  return {\n    ...previousInitialState,\n    sort: {\n      current: defaultSort,\n      default: defaultSort,\n    },\n  };\n}\n\nexport function createSortTraitReducer<\n  Entity,\n  S extends EntityAndSortState<Entity> = EntityAndSortState<Entity>,\n>(\n  initialState: S,\n  allActions: SortActions<Entity> & LoadEntitiesActions<Entity>,\n  allMutators: SortMutators<Entity>,\n  allConfigs: LoadEntitiesKeyedConfig<Entity> & SortKeyedConfig<Entity>,\n) {\n  const { remote } = allConfigs.sort!;\n\n  return createReducer(\n    initialState,\n    on(allActions.sort, (state, { active, direction }) =>\n      !remote\n        ? allMutators.sortEntities({ active, direction }, state)\n        : {\n            ...state,\n            sort: { ...state.sort, current: { active, direction } },\n          },\n    ),\n    on(allActions.resetSort, (state) =>\n      state.sort?.default\n        ? !remote\n          ? allMutators.sortEntities(state.sort?.default, state)\n          : {\n              ...state,\n              sort: { ...state.sort, current: state.sort?.default },\n            }\n        : state,\n    ),\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { TraitEffect } from 'ngrx-traits';\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { concatMap } from 'rxjs/operators';\nimport { Type } from 'ngrx-traits';\nimport {\n  LoadEntitiesActions,\n  LoadEntitiesKeyedConfig,\n} from '../load-entities/load-entities.model';\nimport { SortActions, SortKeyedConfig } from './sort.model';\nimport { PaginationActions } from '../pagination/pagination.model';\n\nexport function createSortTraitEffect<Entity>(\n  allActions: LoadEntitiesActions<Entity> &\n    SortActions<Entity> &\n    PaginationActions,\n  allConfigs: LoadEntitiesKeyedConfig<Entity> & SortKeyedConfig<Entity>,\n): Type<TraitEffect>[] {\n  const { remote } = allConfigs.sort!;\n\n  @Injectable()\n  class SortEffect extends TraitEffect {\n    remoteSort$ = createEffect(() => {\n      return this.actions$.pipe(\n        ofType(allActions.sort, allActions.resetSort),\n        concatMap(() =>\n          allActions.loadFirstPage\n            ? [allActions.clearPagesCache(), allActions.loadFirstPage()]\n            : [allActions.fetch()],\n        ),\n      );\n    });\n  }\n  return remote ? [SortEffect] : [];\n}\n","import { ActionCreator, TypedAction } from '@ngrx/store/src/models';\nimport { KeyedConfig } from 'ngrx-traits';\nimport { EntityAndStatusState } from '../load-entities/load-entities.model';\n\nexport interface SingleSelectionState {\n  selectedId?: number | string;\n}\nexport interface EntityAndSingleSelectionState<T>\n  extends EntityAndStatusState<T>,\n    SingleSelectionState {}\n\nexport type SingleSelectionActions = {\n  select: ActionCreator<\n    string,\n    (props: {\n      id: number | string;\n    }) => { id: number | string } & TypedAction<string>\n  >;\n  deselect: ActionCreator<string, () => TypedAction<string>>;\n  toggleSelect: ActionCreator<\n    string,\n    (props: {\n      id: number | string;\n    }) => { id: number | string } & TypedAction<string>\n  >;\n};\n\nexport type SingleSelectionSelectors<T> = {\n  selectIdSelected: (\n    state: EntityAndSingleSelectionState<T>,\n  ) => string | number | undefined;\n  selectEntitySelected: (\n    state: EntityAndSingleSelectionState<T>,\n  ) => T | undefined;\n};\n\nexport type SingleSelectionMutators<T> = {\n  select<S extends EntityAndSingleSelectionState<T>>(\n    id: string | number,\n    state: S,\n  ): S;\n  deselect<S extends EntityAndSingleSelectionState<T>>(state: S): S;\n  toggleSelect<S extends EntityAndSingleSelectionState<T>>(\n    id: string | number,\n    state: S,\n  ): S;\n};\n\nexport interface SingleSelectionConfig {\n  selectedId?: string | number;\n}\n\nexport const singleSelectionTraitKey = 'singleSelection';\nexport type SingleSelectionKeyedConfig = KeyedConfig<\n  typeof singleSelectionTraitKey,\n  SingleSelectionConfig\n>;\n"]}