!(function (e, t) {
  'object' == typeof exports && 'undefined' != typeof module
    ? t(
        exports,
        require('@ngrx/store'),
        require('ngrx-traits'),
        require('@ngrx/entity'),
        require('@angular/core'),
        require('rxjs'),
        require('rxjs/operators'),
        require('@ngrx/effects'),
        require('@angular/cdk/coercion')
      )
    : 'function' == typeof define && define.amd
    ? define(
        'ngrx-traits/traits',
        [
          'exports',
          '@ngrx/store',
          'ngrx-traits',
          '@ngrx/entity',
          '@angular/core',
          'rxjs',
          'rxjs/operators',
          '@ngrx/effects',
          '@angular/cdk/coercion',
        ],
        t
      )
    : t(
        (((e = 'undefined' != typeof globalThis ? globalThis : e || self)[
          'ngrx-traits'
        ] = e['ngrx-traits'] || {}),
        (e['ngrx-traits'].traits = {})),
        e.store,
        e['ngrx-traits'],
        e.entity,
        e.ng.core,
        e.rxjs,
        e.rxjs.operators,
        e.effects,
        e.ng.cdk.coercion
      );
})(this, function (e, t, n, r, i, a, c, o, s) {
  'use strict';
  var u = 'loadEntities',
    l = function (e, t) {
      return (l =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (e, t) {
            e.__proto__ = t;
          }) ||
        function (e, t) {
          for (var n in t)
            Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
        })(e, t);
    };
  /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */ function f(
    e,
    t
  ) {
    if ('function' != typeof t && null !== t)
      throw new TypeError(
        'Class extends value ' + String(t) + ' is not a constructor or null'
      );
    function n() {
      this.constructor = e;
    }
    l(e, t),
      (e.prototype =
        null === t ? Object.create(t) : ((n.prototype = t.prototype), new n()));
  }
  Object.create;
  function d(e, t) {
    var n = 'function' == typeof Symbol && e[Symbol.iterator];
    if (!n) return e;
    var r,
      i,
      a = n.call(e),
      c = [];
    try {
      for (; (void 0 === t || t-- > 0) && !(r = a.next()).done; )
        c.push(r.value);
    } catch (e) {
      i = { error: e };
    } finally {
      try {
        r && !r.done && (n = a.return) && n.call(a);
      } finally {
        if (i) throw i.error;
      }
    }
    return c;
  }
  function g() {
    for (var e = [], t = 0; t < arguments.length; t++)
      e = e.concat(d(arguments[t]));
    return e;
  }
  Object.create;
  function p(e) {
    return 'loading' === e.status;
  }
  function v(e) {
    return 'success' === e.status;
  }
  function h(e) {
    return 'fail' === e.status;
  }
  function b(e) {
    return e.filters;
  }
  var S = 'pagination';
  var O = 'filter';
  function j(e, r, i, a, c) {
    var o;
    function s(e, t) {
      var n;
      return Object.assign(Object.assign({}, e), {
        pagination: Object.assign(Object.assign({}, e.pagination), {
          total:
            (null !== (n = e.pagination.total) && void 0 !== n ? n : 0) + t,
        }),
      });
    }
    function u(e) {
      return Object.assign(Object.assign({}, e), {
        entities: {},
        ids: [],
        pagination: Object.assign(Object.assign({}, e.pagination), {
          currentPage: 0,
          total: 0,
          cache: Object.assign(Object.assign({}, e.pagination.cache), {
            start: 0,
            end: 0,
          }),
        }),
      });
    }
    var l = !(null === (o = null == c ? void 0 : c.filter) || void 0 === o
      ? void 0
      : o.filterFn);
    return t.createReducer.apply(
      void 0,
      g(
        [
          e,
          t.on(r.loadPage, function (e, t) {
            var n = t.index;
            return Object.assign(Object.assign({}, e), {
              pagination: Object.assign(Object.assign({}, e.pagination), {
                currentPage: n,
                requestPage: n,
              }),
              status: 'loading',
            });
          }),
          t.on(r.setRequestPage, function (e, t) {
            var n = t.index;
            return Object.assign(Object.assign({}, e), {
              pagination: Object.assign(Object.assign({}, e.pagination), {
                requestPage: n,
              }),
              status: 'loading',
            });
          }),
          t.on(r.loadPageSuccess, function (e) {
            return Object.assign(Object.assign({}, e), { status: 'success' });
          }),
          t.on(r.loadPageFail, function (e) {
            return Object.assign(Object.assign({}, e), { status: 'fail' });
          }),
          t.on(r.clearPagesCache, function (e) {
            return u(e);
          }),
          t.on(r.fetchSuccess, function (e, t) {
            var n = t.entities,
              r = t.total;
            return a.mergePaginatedEntities(
              n,
              r,
              Object.assign(Object.assign({}, e), { status: 'success' })
            );
          }),
        ],
        n.insertIf(r.add, function () {
          return t.on(r.add, function (e, t) {
            return s(e, t.entities.length);
          });
        }),
        n.insertIf(r.remove, function () {
          return t.on(r.remove, function (e, t) {
            return s(e, -t.keys.length);
          });
        }),
        n.insertIf(l && r.filter, function () {
          return t.on(r.filter, function (e) {
            return (function (e) {
              var t = i.selectTotal(e);
              return Object.assign(Object.assign({}, e), {
                status: 'success',
                pagination: Object.assign(Object.assign({}, e.pagination), {
                  currentPage: 0,
                  total: t,
                  cache: Object.assign(Object.assign({}, e.pagination.cache), {
                    start: 0,
                    end: t,
                  }),
                }),
              });
            })(e);
          });
        }),
        n.insertIf(r.removeAll, function () {
          return t.on(r.removeAll, function (e) {
            return u(e);
          });
        })
      )
    );
  }
  function y(e, t) {
    var n = t.selectedIds,
      r = e,
      i =
        (n[r],
        (function (e, t) {
          var n = {};
          for (var r in e)
            Object.prototype.hasOwnProperty.call(e, r) &&
              t.indexOf(r) < 0 &&
              (n[r] = e[r]);
          if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
            var i = 0;
            for (r = Object.getOwnPropertySymbols(e); i < r.length; i++)
              t.indexOf(r[i]) < 0 &&
                Object.prototype.propertyIsEnumerable.call(e, r[i]) &&
                (n[r[i]] = e[r[i]]);
          }
          return n;
        })(n, ['symbol' == typeof r ? r : r + '']));
    return Object.assign(Object.assign({}, t), { selectedIds: i });
  }
  function P(e, t) {
    var n;
    return Object.assign(Object.assign({}, t), {
      selectedIds: Object.assign(
        Object.assign({}, t.selectedIds),
        ((n = {}), (n[e] = !0), n)
      ),
    });
  }
  function m(e, t) {
    return t.selectedIds[e] ? y(e, t) : P(e, t);
  }
  function T(e) {
    return Object.assign(Object.assign({}, e), { selectedIds: {} });
  }
  function A(e) {
    return Object.keys(e.selectedIds).length;
  }
  function I(e, r, i, a) {
    var c,
      o,
      s = a.loadEntities.adapter,
      u = null === (c = a.sort) || void 0 === c ? void 0 : c.remote,
      l = null === (o = a.pagination) || void 0 === o ? void 0 : o.cacheType;
    return t.createReducer.apply(
      void 0,
      g(
        [
          e,
          t.on(r.multiSelect, function (e, t) {
            var n = t.id;
            return i.multiSelect(n, e);
          }),
          t.on(r.multiDeselect, function (e, t) {
            var n = t.id;
            return i.multiDeselect(n, e);
          }),
          t.on(r.multiToggleSelect, function (e, t) {
            var n = t.id;
            return i.multiToggleSelect(n, e);
          }),
          t.on(r.toggleSelectAll, function (e) {
            return i.toggleSelectAll(e);
          }),
        ],
        n.insertIf(r.remove, function () {
          return t.on(r.remove, function (e, t) {
            var n = t.keys,
              r = Object.assign({}, e.selectedIds);
            return (
              n.forEach(function (e) {
                delete r[e];
              }),
              Object.assign(Object.assign({}, e), { selectedIds: r })
            );
          });
        }),
        n.insertIf(r.update, function () {
          return t.on(r.update, function (e, t) {
            return (function (e, t) {
              var n = t.reduce(function (t, n) {
                var r = s.selectId(n.changes);
                return r && r !== n.id && null != e.selectedIds[n.id]
                  ? (t.push(n), t)
                  : t;
              }, []);
              if (n.length) {
                var r = Object.assign({}, e.selectedIds);
                return (
                  n.forEach(function (e) {
                    var t = s.selectId(e.changes),
                      n = r[e.id];
                    delete r[e.id], (r[t] = n);
                  }),
                  Object.assign(Object.assign({}, e), { selectedIds: r })
                );
              }
              return e;
            })(e, t.updates);
          });
        }),
        [
          t.on(r.multiClearSelection, function (e) {
            return i.multiClearSelection(e);
          }),
        ],
        n.insertIf(r.removeAll, function () {
          return t.on(r.removeAll, function (e) {
            return i.multiClearSelection(e);
          });
        }),
        n.insertIf(u, function () {
          return t.on(r.sort, function (e) {
            return i.multiClearSelection(e);
          });
        }),
        n.insertIf(r.filter, function () {
          return t.on(r.filter, function (e) {
            return i.multiClearSelection(e);
          });
        }),
        n.insertIf(!r.loadPageSuccess, function () {
          return t.on(r.fetchSuccess, function (e) {
            return i.multiClearSelection(e);
          });
        }),
        n.insertIf(r.loadPageSuccess && 'partial' === l, function () {
          return t.on(r.loadPageSuccess, function (e) {
            return i.multiClearSelection(e);
          });
        })
      )
    );
  }
  var C;
  (e.ChangeType = void 0),
    ((C = e.ChangeType || (e.ChangeType = {})).CREATED = 'c'),
    (C.UPDATED = 'u'),
    (C.DELETED = 'd');
  var E = 'crud';
  var F = 'sort';
  function x(e, t) {
    var n = e[t];
    if (s._isNumberValue(n)) {
      var r = Number(n);
      return r < 9007199254740991 ? r : n;
    }
    return n;
  }
  function D(e, t) {
    var n = t.active,
      r = t.direction;
    return n && '' !== r
      ? e.sort(function (e, t) {
          var i = x(e, n),
            a = x(t, n),
            c = 0;
          return (
            null != i && null != a
              ? 'string' == typeof i || 'string' == typeof a
                ? (c = i.toString().localeCompare(a.toString()))
                : i > a
                ? (c = 1)
                : i < a && (c = -1)
              : null != i
              ? (c = 1)
              : null != a && (c = -1),
            c * ('asc' === r ? 1 : -1)
          );
        })
      : e;
  }
  function q(e) {
    var r,
      i,
      a = e.name,
      c = e.actionProps,
      o = e.actionSuccessProps,
      s = e.actionFailProps,
      u =
        (r = a.replace(/([A-Z])/g, ' $1')).charAt(0).toUpperCase() + r.slice(1);
    return n.createTraitFactory({
      key: a + '-call',
      config: {
        name: a,
        actionProps: c,
        actionSuccessProps: o,
        actionFailProps: s,
      },
      actions: function (e) {
        var n,
          r = e.actionsGroupKey;
        return (
          (i = {
            request: c
              ? t.createAction(r + ' ' + u, c)
              : t.createAction(r + ' ' + u),
            requestSuccess: o
              ? t.createAction(r + ' ' + u + ' Success', o)
              : t.createAction(r + ' ' + u + ' Success'),
            requestFail: s
              ? t.createAction(r + ' ' + u + ' Failure', s)
              : t.createAction(r + ' ' + u + ' Failure'),
          }),
          a
            ? (((n = {})['' + a] = i.request),
              (n[a + 'Success'] = i.requestSuccess),
              (n[a + 'Fail'] = i.requestFail),
              n)
            : i
        );
      },
      selectors: function () {
        var e;
        var t = a.charAt(0).toUpperCase() + a.slice(1);
        return (
          ((e = {})['isLoading' + t] = function (e) {
            return 'loading' === e[a + 'Status'];
          }),
          (e['isSuccess' + t] = function (e) {
            return 'success' === e[a + 'Status'];
          }),
          (e['isFail' + t] = function (e) {
            return 'fail' === e[a + 'Status'];
          }),
          e
        );
      },
      initialState: function (e) {
        return e.previousInitialState;
      },
      reducer: function (e) {
        var n = e.initialState;
        return t.createReducer(
          n,
          t.on(i.request, function (e) {
            var t;
            return Object.assign(
              Object.assign({}, e),
              (((t = {})[a + 'Status'] = 'loading'), t)
            );
          }),
          t.on(i.requestFail, function (e) {
            var t;
            return Object.assign(
              Object.assign({}, e),
              (((t = {})[a + 'Status'] = 'fail'), t)
            );
          }),
          t.on(i.requestSuccess, function (e) {
            var t;
            return Object.assign(
              Object.assign({}, e),
              (((t = {})[a + 'Status'] = 'success'), t)
            );
          })
        );
      },
    });
  }
  (e.addAsyncAction = q),
    (e.addCrudEntities = function (r) {
      var i = (void 0 === r ? {} : r).storeChanges,
        a = void 0 !== i && i;
      return n.createTraitFactory({
        key: E,
        depends: [u],
        config: { storeChanges: a },
        actions: function (e) {
          return (function (e) {
            return {
              add: t.createAction(e + ' Add', function () {
                for (var e = [], t = 0; t < arguments.length; t++)
                  e[t] = arguments[t];
                return { entities: e };
              }),
              remove: t.createAction(e + ' Remove', function () {
                for (var e = [], t = 0; t < arguments.length; t++)
                  e[t] = arguments[t];
                return { keys: e };
              }),
              update: t.createAction(e + ' Update', function () {
                for (var e = [], t = 0; t < arguments.length; t++)
                  e[t] = arguments[t];
                return { updates: e };
              }),
              upsert: t.createAction(e + ' Upsert', function () {
                for (var e = [], t = 0; t < arguments.length; t++)
                  e[t] = arguments[t];
                return { entities: e };
              }),
              removeAll: t.createAction(e + ' Remove All', function (e) {
                return { predicate: e };
              }),
              clearChanges: t.createAction(e + ' Clear Changes'),
            };
          })(e.actionsGroupKey);
        },
        selectors: function (n) {
          return (function (n) {
            function r(e) {
              return e.changes;
            }
            function i(t) {
              var n = {};
              return t.changes.reduce(function (t, r) {
                var i = n[r.id];
                if (!i) return (n[r.id] = [r.changeType]), t.push(r), t;
                if (r.changeType === e.ChangeType.UPDATED) return t;
                if (
                  r.changeType === e.ChangeType.DELETED &&
                  i.includes(e.ChangeType.CREATED)
                )
                  return (
                    delete n[r.id],
                    t.filter(function (e) {
                      return e.id !== r.id;
                    })
                  );
                if (r.changeType === e.ChangeType.DELETED) {
                  delete n[r.id];
                  var a = t.filter(function (e) {
                    return e.id !== r.id;
                  });
                  return a.push(r), a;
                }
                return t;
              }, []);
            }
            var a = n.selectEntities;
            return {
              selectAllChanges: t.createSelector(
                function (e) {
                  return a(e);
                },
                r,
                function (e, t, n) {
                  var r = n.type;
                  return r
                    ? t
                        .filter(function (e) {
                          return e.changeType === r;
                        })
                        .map(function (t) {
                          var n;
                          return {
                            changeType: t.changeType,
                            entity:
                              null !== (n = e[t.id]) && void 0 !== n
                                ? n
                                : { id: t.id },
                          };
                        })
                    : t.map(function (t) {
                        var n;
                        return {
                          changeType: t.changeType,
                          entity:
                            null !== (n = e[t.id]) && void 0 !== n
                              ? n
                              : { id: t.id },
                        };
                      });
                }
              ),
              selectAllFilteredChanges: t.createSelector(
                i,
                function (e) {
                  return a(e);
                },
                function (e, t) {
                  return e.map(function (e) {
                    var n;
                    return {
                      entity:
                        null !== (n = t[e.id]) && void 0 !== n
                          ? n
                          : { id: e.id },
                      changeType: e.changeType,
                    };
                  });
                }
              ),
              selectChanges: r,
              selectFilteredChanges: i,
            };
          })(n.previousSelectors);
        },
        mutators: function (t) {
          return (function (t) {
            var n = (t.crud || {}).storeChanges,
              r = t.loadEntities.adapter;
            function i(e, t, i) {
              return {
                id: null != i ? i : r.selectId(e),
                changeType: t,
                entityChanges: (n && e) || void 0,
              };
            }
            return {
              add: function (t, n, a) {
                void 0 === a && (a = !1);
                var c = g(
                  n.changes,
                  t.map(function (t) {
                    return i(t, e.ChangeType.CREATED);
                  })
                );
                if (!a)
                  return r.addMany(
                    t,
                    Object.assign(Object.assign({}, n), { changes: c })
                  );
                var o = t.map(function (e) {
                    return r.selectId(e);
                  }),
                  s = Object.assign({}, n.entities);
                return (
                  t.forEach(function (e) {
                    var t = r.selectId(e);
                    s[t] = e;
                  }),
                  Object.assign(Object.assign({}, n), {
                    ids: g(o, n.ids),
                    entities: s,
                    changes: c,
                  })
                );
              },
              remove: function (t, n) {
                return 'function' == typeof t
                  ? r.removeMany(
                      t,
                      Object.assign(Object.assign({}, n), {
                        changes: g(
                          n.changes,
                          n.ids.map(function (t) {
                            return { id: t, changeType: e.ChangeType.DELETED };
                          })
                        ),
                      })
                    )
                  : r.removeMany(
                      t,
                      Object.assign(Object.assign({}, n), {
                        changes: g(
                          n.changes,
                          t.map(function (t) {
                            return { id: t, changeType: e.ChangeType.DELETED };
                          })
                        ),
                      })
                    );
              },
              update: function (t, i) {
                var a = g(i.changes);
                return (
                  t.forEach(function (e) {
                    var t = r.selectId(e.changes);
                    if (t && t !== e.id) {
                      var n = a.findIndex(function (t) {
                          return t.id === e.id;
                        }),
                        i = a[n];
                      a[n] = Object.assign(Object.assign({}, i), { id: t });
                    }
                  }),
                  r.updateMany(
                    t,
                    Object.assign(Object.assign({}, i), {
                      changes: g(
                        a,
                        t.map(function (t) {
                          var i;
                          return {
                            id:
                              null !== (i = r.selectId(t.changes)) &&
                              void 0 !== i
                                ? i
                                : t.id,
                            changeType: e.ChangeType.UPDATED,
                            entityChanges: (n && t.changes) || void 0,
                          };
                        })
                      ),
                    })
                  )
                );
              },
              removeAll: function (t) {
                return r.removeAll(
                  Object.assign(Object.assign({}, t), {
                    changes: g(
                      t.changes,
                      t.ids.map(function (t) {
                        return { id: t, changeType: e.ChangeType.DELETED };
                      })
                    ),
                  })
                );
              },
              clearChanges: function (e) {
                return Object.assign(Object.assign({}, e), { changes: [] });
              },
              upsert: function (t, n) {
                var a = g(n.changes),
                  c = r.getSelectors().selectIds(n),
                  o = d(
                    t.reduce(
                      function (e, t) {
                        var n = d(e, 2),
                          i = n[0],
                          a = n[1];
                        return -1 !== c.indexOf(r.selectId(t))
                          ? [i, g(a, [t])]
                          : [g(i, [t]), a];
                      },
                      [new Array(), new Array()]
                    ),
                    2
                  ),
                  s = o[0],
                  u = o[1];
                return r.upsertMany(
                  t,
                  Object.assign(Object.assign({}, n), {
                    changes: g(
                      a,
                      s.map(function (t) {
                        return i(t, e.ChangeType.CREATED);
                      }),
                      u.map(function (t) {
                        return i(t, e.ChangeType.UPDATED);
                      })
                    ),
                  })
                );
              },
            };
          })(t.allConfigs);
        },
        initialState: function (e) {
          return (function (e) {
            return Object.assign(Object.assign({}, e), { changes: [] });
          })(e.previousInitialState);
        },
        reducer: function (e) {
          return (function (e, r, i, a) {
            var c,
              o,
              s,
              u = null === (c = a.sort) || void 0 === c ? void 0 : c.remote,
              l =
                a.filter &&
                !(null === (o = a.filter) || void 0 === o
                  ? void 0
                  : o.filterFn),
              f =
                null === (s = a.pagination) || void 0 === s
                  ? void 0
                  : s.cacheType;
            return t.createReducer.apply(
              void 0,
              g(
                [
                  e,
                  t.on(r.add, function (e, t) {
                    var n = t.entities;
                    return i.add(n, e);
                  }),
                  t.on(r.update, function (e, t) {
                    var n = t.updates;
                    return i.update(n, e);
                  }),
                  t.on(r.upsert, function (e, t) {
                    var n = t.entities;
                    return i.upsert(n, e);
                  }),
                  t.on(r.remove, function (e, t) {
                    var n = t.keys;
                    return i.remove(n, e);
                  }),
                  t.on(r.removeAll, function (e, t) {
                    var n = t.predicate;
                    return n ? i.remove(n, e) : i.removeAll(e);
                  }),
                  t.on(r.clearChanges, function (e) {
                    return i.clearChanges(e);
                  }),
                ],
                n.insertIf(u, function () {
                  return t.on(r.sort, function (e) {
                    return i.clearChanges(e);
                  });
                }),
                n.insertIf(l, function () {
                  return t.on(r.filter, function (e) {
                    return i.clearChanges(e);
                  });
                }),
                n.insertIf(!r.loadPageSuccess, function () {
                  return t.on(r.fetchSuccess, function (e) {
                    return i.clearChanges(e);
                  });
                }),
                n.insertIf(r.loadPageSuccess && 'partial' === f, function () {
                  return t.on(r.loadPageSuccess, function (e) {
                    return i.clearChanges(e);
                  });
                })
              )
            );
          })(e.initialState, e.allActions, e.allMutators, e.allConfigs);
        },
      });
    }),
    (e.addFilter = function (e) {
      var r = void 0 === e ? {} : e,
        s = r.defaultDebounceTime,
        l = void 0 === s ? 400 : s,
        d = r.defaultFilter,
        p = r.filterFn;
      return n.createTraitFactory({
        key: O,
        depends: [S, u],
        config: { defaultDebounceTime: l, defaultFilter: d, filterFn: p },
        actions: function (e) {
          return (function (e) {
            return {
              filter: t.createAction(e + ' filter', function (e) {
                return {
                  filters: null == e ? void 0 : e.filters,
                  forceLoad: null == e ? void 0 : e.forceLoad,
                  patch: null == e ? void 0 : e.patch,
                };
              }),
              storeFilter: t.createAction(e + ' store filter', function (e) {
                return {
                  filters: null == e ? void 0 : e.filters,
                  patch: null == e ? void 0 : e.patch,
                };
              }),
            };
          })(e.actionsGroupKey);
        },
        selectors: function () {
          return { selectFilter: b };
        },
        mutators: function () {
          return {
            setFilters: function (e, t) {
              return Object.assign(Object.assign({}, t), { filters: e });
            },
          };
        },
        initialState: function (e) {
          return (function (e, t) {
            var n;
            return Object.assign(Object.assign({}, e), {
              filters:
                null === (n = null == t ? void 0 : t.filter) || void 0 === n
                  ? void 0
                  : n.defaultFilter,
            });
          })(e.previousInitialState, e.allConfigs);
        },
        reducer: function (e) {
          return (function (e, n, r) {
            return t.createReducer(
              e,
              t.on(n.storeFilter, function (e, t) {
                var n = t.filters;
                return r.setFilters(n, e);
              })
            );
          })(e.initialState, e.allActions, e.allMutators);
        },
        effects: function (e) {
          return (function (e, t, r) {
            var s = r.filter,
              u = (function (n) {
                function r() {
                  var r = n.apply(this, g(arguments)) || this;
                  return (
                    (r.storeFilter$ = o.createEffect(function () {
                      return function (n) {
                        var i = void 0 === n ? {} : n,
                          u = i.debounce,
                          l = void 0 === u ? s.defaultDebounceTime : u,
                          f = i.scheduler,
                          d = void 0 === f ? a.asyncScheduler : f;
                        return r.actions$.pipe(
                          o.ofType(e.filter),
                          c.debounce(function (e) {
                            return (null == e ? void 0 : e.forceLoad)
                              ? a.EMPTY
                              : a.timer(l, d);
                          }),
                          c.concatMap(function (e) {
                            return e.patch
                              ? r.store.select(t.selectFilter).pipe(
                                  c.first(),
                                  c.map(function (t) {
                                    return Object.assign(Object.assign({}, e), {
                                      filters: Object.assign(
                                        Object.assign({}, t),
                                        null == e ? void 0 : e.filters
                                      ),
                                    });
                                  })
                                )
                              : a.of(e);
                          }),
                          c.distinctUntilChanged(function (e, t) {
                            return (
                              !(null == t ? void 0 : t.forceLoad) &&
                              JSON.stringify(null == e ? void 0 : e.filters) ===
                                JSON.stringify(null == t ? void 0 : t.filters)
                            );
                          }),
                          c.map(function (t) {
                            return e.storeFilter({
                              filters: null == t ? void 0 : t.filters,
                              patch: null == t ? void 0 : t.patch,
                            });
                          })
                        );
                      };
                    })),
                    (r.fetch$ =
                      !(null == s ? void 0 : s.filterFn) &&
                      o.createEffect(function () {
                        return r.actions$.pipe(
                          o.ofType(e.storeFilter),
                          c.concatMap(function () {
                            return (null == e ? void 0 : e.loadFirstPage)
                              ? [e.clearPagesCache(), e.loadFirstPage()]
                              : [e.fetch()];
                          })
                        );
                      })),
                    r
                  );
                }
                return f(r, n), r;
              })(n.TraitEffect);
            return (u.decorators = [{ type: i.Injectable }]), [u];
          })(e.allActions, e.allSelectors, e.allConfigs);
        },
      });
    }),
    (e.addLoadEntities = function (e) {
      var i = r.createEntityAdapter(e);
      return n.createTraitFactory({
        key: u,
        config: Object.assign(Object.assign({}, e), { adapter: i }),
        actions: function (e) {
          return (function (e) {
            return {
              fetch: t.createAction(e + ' Fetch Entities'),
              fetchSuccess: t.createAction(
                e + ' Fetch Entities Success',
                t.props()
              ),
              fetchFail: t.createAction(e + ' Fetch Entities Fail', t.props()),
            };
          })(e.actionsGroupKey);
        },
        selectors: function (e) {
          return (function (e) {
            var n,
              r,
              i =
                null === (n = null == e ? void 0 : e.loadEntities) ||
                void 0 === n
                  ? void 0
                  : n.adapter,
              a = null == i ? void 0 : i.getSelectors(),
              c =
                null === (r = null == e ? void 0 : e.filter) || void 0 === r
                  ? void 0
                  : r.filterFn,
              o = a;
            if (c && a) {
              var s = t.createSelector(a.selectAll, b, function (e, t) {
                return t
                  ? e.filter(function (e) {
                      return c(t, e);
                    })
                  : e;
              });
              o = {
                selectAll: s,
                selectEntities: t.createSelector(
                  a.selectEntities,
                  b,
                  function (e, t) {
                    var n = {};
                    for (var r in e) {
                      var i = e[r];
                      c(t, i) && (n[r] = i);
                    }
                    return n;
                  }
                ),
                selectTotal: t.createSelector(s, function (e) {
                  return e.length;
                }),
                selectIds: t.createSelector(s, function (e) {
                  return e.map(function (e) {
                    return null == i ? void 0 : i.selectId(e);
                  });
                }),
              };
            }
            return Object.assign(Object.assign({}, o), {
              isFail: h,
              isLoading: p,
              isSuccess: v,
            });
          })(e.allConfigs);
        },
        mutators: function (e) {
          return (function (e) {
            var t,
              n =
                null === (t = null == e ? void 0 : e.loadEntities) ||
                void 0 === t
                  ? void 0
                  : t.adapter;
            return { setAll: null == n ? void 0 : n.setAll };
          })(e.allConfigs);
        },
        initialState: function (e) {
          return (function (e, t) {
            void 0 === e && (e = {});
            var n = t.loadEntities.adapter;
            return Object.assign(
              Object.assign(Object.assign({}, e), n.getInitialState()),
              { status: void 0 }
            );
          })(e.previousInitialState, e.allConfigs);
        },
        reducer: function (e) {
          return (function (e, r, i, a) {
            var c = !(null == a ? void 0 : a.pagination);
            return t.createReducer.apply(
              void 0,
              g(
                [
                  e,
                  t.on(r.fetch, function (e) {
                    return Object.assign(Object.assign({}, e), {
                      status: 'loading',
                    });
                  }),
                  t.on(r.fetchFail, function (e) {
                    return Object.assign(Object.assign({}, e), {
                      status: 'fail',
                    });
                  }),
                  t.on(r.fetchSuccess, function (e) {
                    return Object.assign(Object.assign({}, e), {
                      status: 'success',
                    });
                  }),
                ],
                n.insertIf(c, function () {
                  return t.on(r.fetchSuccess, function (e, t) {
                    var n = t.entities;
                    return i.setAll(n, Object.assign({}, e));
                  });
                })
              )
            );
          })(e.initialState, e.allActions, e.allMutators, e.allConfigs);
        },
      });
    }),
    (e.addLoadEntity = function (e) {
      var r = e.entityName,
        i = e.actionProps,
        a = e.actionSuccessProps,
        c = e.actionFailProps,
        o = r.charAt(0).toUpperCase() + r.slice(1);
      return [
        q({
          name: 'load' + o,
          actionProps: i,
          actionSuccessProps: a,
          actionFailProps: c,
        }),
        n.createTraitFactory({
          key: 'load' + o,
          config: {
            entityName: r,
            actionProps: i,
            actionSuccessProps: a,
            actionFailProps: c,
          },
          selectors: function () {
            var e;
            return (
              ((e = {})['select' + o] = function (e) {
                return e['' + r];
              }),
              e
            );
          },
          initialState: function (e) {
            return e.previousInitialState;
          },
          reducer: function (e) {
            var n = e.initialState,
              i = e.allActions;
            return t.createReducer(
              n,
              t.on(i['load' + o + 'Success'], function (e, t) {
                var n;
                return Object.assign(
                  Object.assign({}, e),
                  (((n = {})[r] = t[r]), n)
                );
              })
            );
          },
        }),
      ];
    }),
    (e.addMultiSelection = function () {
      return n.createTraitFactory({
        key: 'multiSelection',
        depends: [u],
        actions: function (e) {
          return (function (e) {
            return {
              multiSelect: t.createAction(e + ' Select', t.props()),
              multiDeselect: t.createAction(e + ' Deselect', t.props()),
              multiToggleSelect: t.createAction(
                e + ' Toggle Select',
                t.props()
              ),
              toggleSelectAll: t.createAction(e + ' Toggle Select All'),
              multiClearSelection: t.createAction(e + ' Clear Selection'),
            };
          })(e.actionsGroupKey);
        },
        selectors: function (e) {
          return (function (e) {
            var n = e.selectEntities,
              r = e.selectTotal;
            function i(e) {
              return e.selectedIds;
            }
            var a = t.createSelector(i, function (e) {
              return Object.keys(e);
            });
            return {
              selectIdsSelected: i,
              selectAllIdsSelected: a,
              selectEntitiesSelected: t.createSelector(a, n, function (e, t) {
                return e.reduce(function (e, n) {
                  return (e[n] = t[n]), e;
                }, {});
              }),
              selectAllSelected: t.createSelector(a, n, function (e, t) {
                return e.map(function (e) {
                  return t[e];
                });
              }),
              selectTotalSelected: A,
              isAllSelected: t.createSelector(
                function (e) {
                  return r(e);
                },
                A,
                function (e, t) {
                  return t === e ? 'all' : 0 === t ? 'none' : 'some';
                }
              ),
            };
          })(e.previousSelectors);
        },
        initialState: function (e) {
          return (function (e) {
            return Object.assign(Object.assign({}, e), { selectedIds: {} });
          })(e.previousInitialState);
        },
        mutators: function (e) {
          return (function (e) {
            var t = e.isAllSelected;
            return {
              multiDeselect: y,
              multiSelect: P,
              multiToggleSelect: m,
              toggleSelectAll: function (e) {
                return 'all' === t(e)
                  ? Object.assign(Object.assign({}, e), { selectedIds: {} })
                  : Object.assign(Object.assign({}, e), {
                      selectedIds: n.toMap(e.ids),
                    });
              },
              multiClearSelection: T,
            };
          })(e.allSelectors);
        },
        reducer: function (e) {
          return I(e.initialState, e.allActions, e.allMutators, e.allConfigs);
        },
      });
    }),
    (e.addPagination = function (e) {
      var r = void 0 === e ? {} : e,
        a = r.cacheType,
        s = void 0 === a ? 'full' : a,
        l = r.pageSize,
        p = void 0 === l ? 20 : l,
        v = r.currentPage,
        h = void 0 === v ? 0 : v,
        b = r.pagesToCache,
        O = void 0 === b ? 3 : b;
      return n.createTraitFactory({
        key: S,
        depends: [u],
        config: { cacheType: s, pageSize: p, currentPage: h, pagesToCache: O },
        actions: function (e) {
          return (function (e) {
            return {
              loadPage: t.createAction(e + ' load page', function (e) {
                return { index: e.index, forceLoad: e.forceLoad };
              }),
              loadPageSuccess: t.createAction(
                e + ' load\n          page success'
              ),
              loadPageFail: t.createAction(e + ' load page fail'),
              loadPreviousPage: t.createAction(e + ' load previous page'),
              loadNextPage: t.createAction(e + ' load next page'),
              loadFirstPage: t.createAction(
                e + ' load first page',
                function (e) {
                  return { forceLoad: e };
                }
              ),
              loadLastPage: t.createAction(e + ' load last page'),
              clearPagesCache: t.createAction(e + ' clear cache'),
              setRequestPage: t.createAction(
                e + ' set request page',
                t.props()
              ),
            };
          })(e.actionsGroupKey);
        },
        selectors: function (e) {
          return (function (e, n) {
            var r,
              i = e.selectAll,
              a = e.isLoading;
            function c(e) {
              return e.pagination;
            }
            var o = (
                null === (r = null == n ? void 0 : n.filter) || void 0 === r
                  ? void 0
                  : r.filterFn
              )
                ? t.createSelector(i, c, function (e, t) {
                    return Object.assign(Object.assign({}, t), {
                      total: e.length,
                      cache: Object.assign(Object.assign({}, t.cache), {
                        start: 0,
                        end: e.length,
                      }),
                    });
                  })
                : c,
              s = t.createSelector(i, o, function (e, t, n) {
                var r =
                    (void 0 === n ? { page: t.currentPage } : n).page *
                      t.pageSize -
                    t.cache.start,
                  i = r + t.pageSize;
                return (i = i < t.cache.end ? i : t.cache.end), e.slice(r, i);
              }),
              u = t.createSelector(o, function (e) {
                var t =
                  e.total && e.total > 0
                    ? Math.ceil(e.total / e.pageSize)
                    : void 0;
                return {
                  pageIndex: e.currentPage,
                  total: e.total,
                  pageSize: e.pageSize,
                  pagesCount: t,
                  hasPrevious: e.currentPage - 1 >= 0,
                  hasNext: !(e.total && e.total > 0) || e.currentPage + 1 < t,
                  cacheType: e.cache.type,
                };
              });
            return {
              selectPageEntities: s,
              isPageInCache: t.createSelector(o, function (e, t) {
                var n =
                    (void 0 === t ? { page: e.currentPage } : t).page *
                    e.pageSize,
                  r = n + e.pageSize - 1;
                return (
                  (r = e.total && r > e.total ? e.total - 1 : r),
                  n >= e.cache.start && r <= e.cache.end
                );
              }),
              selectPage: t.createSelector(s, u, function (e, t, n) {
                return (
                  void 0 === n && (n = { page: t.pageIndex }),
                  Object.assign({ entities: e }, t)
                );
              }),
              selectPagedRequest: t.createSelector(c, function (e) {
                return {
                  startIndex: e.pageSize * e.requestPage,
                  size: e.pageSize * e.pagesToCache,
                  page: e.requestPage,
                };
              }),
              selectPageInfo: u,
              isLoadingPage: t.createSelector(a, c, function (e, t) {
                return e && t.requestPage === t.currentPage;
              }),
            };
          })(e.previousSelectors, e.allConfigs);
        },
        mutators: function (e) {
          return (function (e, t) {
            var n = t.loadEntities.adapter;
            return {
              mergePaginatedEntities: function (t, r, i) {
                switch (
                  (void 0 === r && (r = void 0), i.pagination.cache.type)
                ) {
                  case 'full':
                    return n.setAll(
                      t,
                      Object.assign(Object.assign({}, i), {
                        pagination: Object.assign(
                          Object.assign({}, i.pagination),
                          {
                            total: t.length,
                            cache: Object.assign(
                              Object.assign({}, i.pagination.cache),
                              { start: 0, end: t.length }
                            ),
                          }
                        ),
                      })
                    );
                  case 'partial':
                    var a =
                        i.pagination.currentPage + 1 ===
                        i.pagination.requestPage,
                      c = i.pagination.currentPage * i.pagination.pageSize,
                      o = a ? g(e.selectPageEntities(i), t) : t;
                    return n.setAll(
                      o,
                      Object.assign(Object.assign({}, i), {
                        pagination: Object.assign(
                          Object.assign({}, i.pagination),
                          {
                            total: r,
                            cache: Object.assign(
                              Object.assign({}, i.pagination.cache),
                              { start: c, end: c + t.length }
                            ),
                          }
                        ),
                      })
                    );
                  case 'grow':
                    return n.addMany(
                      t,
                      Object.assign(Object.assign({}, i), {
                        pagination: Object.assign(
                          Object.assign({}, i.pagination),
                          {
                            total: r,
                            cache: Object.assign(
                              Object.assign({}, i.pagination.cache),
                              { end: i.ids.length + t.length }
                            ),
                          }
                        ),
                      })
                    );
                }
                return i;
              },
            };
          })(e.allSelectors, e.allConfigs);
        },
        initialState: function (e) {
          return (function (e, t) {
            var n = t.pagination,
              r = n.currentPage,
              i = n.pageSize,
              a = n.cacheType,
              c = n.pagesToCache;
            return Object.assign(Object.assign({}, e), {
              pagination: {
                pageSize: i,
                currentPage: r,
                requestPage: r,
                pagesToCache: c,
                cache: { type: a, start: 0, end: 0 },
              },
            });
          })(e.previousInitialState, e.allConfigs);
        },
        reducer: function (e) {
          return j(
            e.initialState,
            e.allActions,
            e.allSelectors,
            e.allMutators,
            e.allConfigs
          );
        },
        effects: function (e) {
          return (function (e, t) {
            var r = (function (n) {
              function r() {
                var r = n.apply(this, g(arguments)) || this;
                return (
                  (r.loadPage$ = o.createEffect(function () {
                    return r.actions$.pipe(
                      o.ofType(e.loadPage),
                      o.concatLatestFrom(function () {
                        return r.store.select(t.isPageInCache);
                      }),
                      c.map(function (t) {
                        var n = d(t, 2),
                          r = n[0].forceLoad,
                          i = n[1];
                        return !r && i ? e.loadPageSuccess() : e.fetch();
                      })
                    );
                  })),
                  (r.preloadNextPage$ = o.createEffect(function () {
                    return r.actions$.pipe(
                      o.ofType(e.loadPageSuccess),
                      c.concatMapTo(
                        r.store.select(t.selectPageInfo).pipe(c.first())
                      ),
                      c.filter(function (e) {
                        return !!e.total && e.hasNext && 'full' !== e.cacheType;
                      }),
                      c.concatMap(function (e) {
                        return r.store
                          .select(t.isPageInCache, { page: e.pageIndex + 1 })
                          .pipe(
                            c.first(),
                            c.map(function (t) {
                              return (!t && e) || void 0;
                            })
                          );
                      }),
                      c.filter(function (e) {
                        return !!e;
                      }),
                      c.concatMap(function (t) {
                        return [
                          e.setRequestPage({ index: t.pageIndex + 1 }),
                          e.fetch(),
                        ];
                      })
                    );
                  })),
                  (r.loadFirstPage$ = o.createEffect(function () {
                    return r.actions$.pipe(
                      o.ofType(e.loadFirstPage),
                      c.map(function () {
                        return e.loadPage({ index: 0 });
                      })
                    );
                  })),
                  (r.loadPreviousPage$ = o.createEffect(function () {
                    return r.actions$.pipe(
                      o.ofType(e.loadPreviousPage),
                      c.concatMapTo(
                        r.store.select(t.selectPageInfo).pipe(c.first())
                      ),
                      c.map(function (t) {
                        return t.hasPrevious
                          ? e.loadPage({ index: t.pageIndex - 1 })
                          : e.loadPageFail();
                      })
                    );
                  })),
                  (r.loadNextPage$ = o.createEffect(function () {
                    return r.actions$.pipe(
                      o.ofType(e.loadNextPage),
                      c.concatMapTo(
                        r.store.select(t.selectPageInfo).pipe(c.first())
                      ),
                      c.map(function (t) {
                        return t.hasNext
                          ? e.loadPage({ index: t.pageIndex + 1 })
                          : e.loadPageFail();
                      })
                    );
                  })),
                  (r.loadLastPage$ = o.createEffect(function () {
                    return r.actions$.pipe(
                      o.ofType(e.loadLastPage),
                      c.concatMapTo(
                        r.store.select(t.selectPageInfo).pipe(c.first())
                      ),
                      c.map(function (t) {
                        return t.hasNext && t.pagesCount
                          ? e.loadPage({ index: t.pagesCount - 1 })
                          : e.loadPageFail();
                      })
                    );
                  })),
                  r
                );
              }
              return f(r, n), r;
            })(n.TraitEffect);
            return (r.decorators = [{ type: i.Injectable }]), [r];
          })(e.allActions, e.allSelectors);
        },
      });
    }),
    (e.addReset = function (e) {
      return (
        void 0 === e && (e = {}),
        n.createTraitFactory({
          key: 'reset',
          config: e,
          actions: function (e) {
            var n = e.actionsGroupKey;
            return { reset: t.createAction(n + ' Reset State') };
          },
          reducer: function (e) {
            var n = e.allActions,
              r = e.initialState;
            return t.createReducer(
              r,
              t.on(n.reset, function () {
                return r;
              })
            );
          },
          effects: function (t) {
            var r,
              a = t.allActions,
              s = (function (t) {
                function n() {
                  var n,
                    r = this;
                  return (
                    ((r = t.apply(this, g(arguments)) || this).externalReset$ =
                      (null === (n = null == e ? void 0 : e.resetOn) ||
                      void 0 === n
                        ? void 0
                        : n.length) &&
                      o.createEffect(function () {
                        return r.actions$.pipe(
                          o.ofType.apply(
                            void 0,
                            g(null == e ? void 0 : e.resetOn)
                          ),
                          c.mapTo(a.reset())
                        );
                      })),
                    r
                  );
                }
                return f(n, t), n;
              })(n.TraitEffect);
            return (
              (s.decorators = [{ type: i.Injectable }]),
              (
                null === (r = null == e ? void 0 : e.resetOn) || void 0 === r
                  ? void 0
                  : r.length
              )
                ? [s]
                : []
            );
          },
        })
      );
    }),
    (e.addSingleSelection = function (e) {
      return n.createTraitFactory({
        key: 'singleSelection',
        depends: [u],
        config: e,
        actions: function (e) {
          return (function (e) {
            return {
              select: t.createAction(e + ' Select', t.props()),
              deselect: t.createAction(e + ' Deselect'),
              toggleSelect: t.createAction(e + ' Toggle Select', t.props()),
            };
          })(e.actionsGroupKey);
        },
        selectors: function () {
          return {
            selectIdSelected: function (e) {
              return e.selectedId;
            },
            selectEntitySelected: function (e) {
              return (e.selectedId && e.entities[e.selectedId]) || void 0;
            },
          };
        },
        mutators: function () {
          return {
            select: function (e, t) {
              return Object.assign(Object.assign({}, t), { selectedId: e });
            },
            deselect: function (e) {
              return Object.assign(Object.assign({}, e), {
                selectedId: void 0,
              });
            },
            toggleSelect: function (e, t) {
              return Object.assign(Object.assign({}, t), {
                selectedId: t.selectedId === e ? void 0 : e,
              });
            },
          };
        },
        initialState: function (e) {
          return (function (e, t) {
            var n,
              r =
                null === (n = t.singleSelection) || void 0 === n
                  ? void 0
                  : n.selectedId;
            return Object.assign(Object.assign({}, e), { selectedId: r });
          })(e.previousInitialState, e.allConfigs);
        },
        reducer: function (e) {
          return (function (e, r, i, a) {
            var c,
              o,
              s = a.loadEntities.adapter,
              u = null === (c = a.sort) || void 0 === c ? void 0 : c.remote,
              l =
                null === (o = a.pagination) || void 0 === o
                  ? void 0
                  : o.cacheType;
            return t.createReducer.apply(
              void 0,
              g(
                [
                  e,
                  t.on(r.select, function (e, t) {
                    var n = t.id;
                    return i.select(n, e);
                  }),
                  t.on(r.deselect, function (e) {
                    return i.deselect(e);
                  }),
                  t.on(r.toggleSelect, function (e, t) {
                    var n = t.id;
                    return i.toggleSelect(n, e);
                  }),
                ],
                n.insertIf(r.removeAll, function () {
                  return t.on(r.removeAll, function (e) {
                    return i.deselect(e);
                  });
                }),
                n.insertIf(u, function () {
                  return t.on(r.sort, function (e) {
                    return i.deselect(e);
                  });
                }),
                n.insertIf(r.filter, function () {
                  return t.on(r.filter, function (e) {
                    return i.deselect(e);
                  });
                }),
                n.insertIf(!r.loadPageSuccess, function () {
                  return t.on(r.fetchSuccess, function (e) {
                    return i.deselect(e);
                  });
                }),
                n.insertIf(r.loadPageSuccess && 'partial' === l, function () {
                  return t.on(r.loadPageSuccess, function (e) {
                    return i.deselect(e);
                  });
                }),
                n.insertIf(r.remove, function () {
                  return t.on(r.remove, function (e, t) {
                    return t.keys.some(function (t) {
                      return t === e.selectedId;
                    })
                      ? Object.assign(Object.assign({}, e), {
                          selectedId: void 0,
                        })
                      : e;
                  });
                }),
                n.insertIf(r.update, function () {
                  return t.on(r.update, function (e, t) {
                    var n = t.updates.find(function (t) {
                      var n = s.selectId(t.changes);
                      return n && n !== t.id && e.selectedId === t.id;
                    });
                    return n
                      ? Object.assign(Object.assign({}, e), {
                          selectedId: s.selectId(n.changes),
                        })
                      : e;
                  });
                })
              )
            );
          })(e.initialState, e.allActions, e.allMutators, e.allConfigs);
        },
      });
    }),
    (e.addSort = function (e) {
      var r = void 0 === e ? {} : e,
        a = r.remote,
        s = void 0 !== a && a,
        l = r.defaultSort;
      return n.createTraitFactory({
        key: F,
        depends: [u],
        config: { remote: s, defaultSort: l },
        actions: function (e) {
          return (function (e) {
            return {
              sort: t.createAction(e + ' sort', t.props()),
              resetSort: t.createAction(e + ' default sort'),
            };
          })(e.actionsGroupKey);
        },
        selectors: function () {
          return {
            selectSort: function (e) {
              var t;
              return null === (t = e.sort) || void 0 === t ? void 0 : t.current;
            },
          };
        },
        mutators: function (e) {
          return (function (e, t) {
            var n = e.selectAll;
            return {
              sortEntities: function (e, r) {
                var i = e.active,
                  a = e.direction,
                  c = t.loadEntities.adapter,
                  o = D(n(r), { active: i, direction: a }).map(function (e) {
                    return c.selectId(e);
                  });
                return Object.assign(Object.assign({}, r), {
                  ids: o,
                  sort: Object.assign(Object.assign({}, r.sort), {
                    current: { active: i, direction: a },
                  }),
                });
              },
            };
          })(e.allSelectors, e.allConfigs);
        },
        initialState: function (e) {
          return (function (e, t) {
            var n = t.sort.defaultSort;
            return Object.assign(Object.assign({}, e), {
              sort: { current: n, default: n },
            });
          })(e.previousInitialState, e.allConfigs);
        },
        reducer: function (e) {
          return (function (e, n, r, i) {
            var a = i.sort.remote;
            return t.createReducer(
              e,
              t.on(n.sort, function (e, t) {
                var n = t.active,
                  i = t.direction;
                return a
                  ? Object.assign(Object.assign({}, e), {
                      sort: Object.assign(Object.assign({}, e.sort), {
                        current: { active: n, direction: i },
                      }),
                    })
                  : r.sortEntities({ active: n, direction: i }, e);
              }),
              t.on(n.resetSort, function (e) {
                var t, n, i;
                return (
                  null === (t = e.sort) || void 0 === t ? void 0 : t.default
                )
                  ? a
                    ? Object.assign(Object.assign({}, e), {
                        sort: Object.assign(Object.assign({}, e.sort), {
                          current:
                            null === (i = e.sort) || void 0 === i
                              ? void 0
                              : i.default,
                        }),
                      })
                    : r.sortEntities(
                        null === (n = e.sort) || void 0 === n
                          ? void 0
                          : n.default,
                        e
                      )
                  : e;
              })
            );
          })(e.initialState, e.allActions, e.allMutators, e.allConfigs);
        },
        effects: function (e) {
          return (function (e, t) {
            var r = t.sort.remote,
              a = (function (t) {
                function n() {
                  var n = t.apply(this, g(arguments)) || this;
                  return (
                    (n.remoteSort$ = o.createEffect(function () {
                      return n.actions$.pipe(
                        o.ofType(e.sort, e.resetSort),
                        c.concatMap(function () {
                          return e.loadFirstPage
                            ? [e.clearPagesCache(), e.loadFirstPage()]
                            : [e.fetch()];
                        })
                      );
                    })),
                    n
                  );
                }
                return f(n, t), n;
              })(n.TraitEffect);
            return (a.decorators = [{ type: i.Injectable }]), r ? [a] : [];
          })(e.allActions, e.allConfigs);
        },
      });
    }),
    (e.crudTraitKey = E),
    (e.filterTraitKey = O),
    (e.loadEntitiesTraitKey = u),
    (e.multiClearSelection = T),
    (e.multiDeselect = y),
    (e.multiSelect = P),
    (e.multiToggleSelect = m),
    (e.paginationTraitKey = S),
    (e.selectTotalSelected = A),
    (e.singleSelectionTraitKey = 'singleSelection'),
    (e.sortData = D),
    (e.sortTraitKey = F),
    Object.defineProperty(e, '__esModule', { value: !0 });
});
//# sourceMappingURL=ngrx-traits-traits.umd.min.js.map
