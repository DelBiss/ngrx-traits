{"version":3,"file":"ngrx-traits.js","sources":["../../src/lib/create-entity-feature.ts","../../src/lib/trait-effect.ts","../../src/lib/local-store/traits-local-store.ts","../../src/lib/util.ts","../../src/lib/ngrx-traits.ts"],"sourcesContent":["import {\n  Config,\n  ExtractActionsType,\n  ExtractMutatorsType,\n  ExtractSelectorsType,\n  ExtractStateType,\n  FeatureFactory,\n  FeatureSelectors,\n  KeyedConfig,\n  TraitActions,\n  TraitFactory,\n  TraitSelectors,\n  TraitStateMutators,\n} from './model';\nimport {\n  Action,\n  ActionType,\n  createReducer,\n  createSelector,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { TraitEffect } from './trait-effect';\nimport { Type } from './local-store';\n\nexport function createTraitFactory<\n  State = {},\n  A extends TraitActions = TraitActions,\n  S extends TraitSelectors<State> = TraitSelectors<State>,\n  M extends TraitStateMutators<State> = TraitStateMutators<State>,\n  KEY extends string = string,\n  C = unknown,\n  KC = KeyedConfig<KEY, C>,\n>(f: TraitFactory<State, A, S, M, KEY, C, KC>) {\n  return f;\n}\n\nexport function createEntityFeatureFactory<F extends readonly TraitFactory[]>(\n  ...traits: F\n): FeatureFactory<\n  ExtractStateType<F>,\n  ExtractActionsType<F>,\n  ExtractSelectorsType<F>,\n  ExtractMutatorsType<F>\n> {\n  return ((config: Config<any, any>) => {\n    const sortedTraits = sortTraits([...traits]);\n\n    const allConfigs = sortedTraits.reduce(\n      (acc: KeyedConfig<string, any>, factory) => {\n        acc[factory.key] = factory.config;\n        return acc;\n      },\n      {},\n    );\n\n    const allActions = sortedTraits.reduce(\n      (previousResult: TraitActions, factory) => {\n        let result =\n          factory?.actions?.({\n            actionsGroupKey: config.actionsGroupKey,\n            allConfigs,\n          }) ?? {};\n        result = previousResult ? { ...previousResult, ...result } : result;\n        return result;\n      },\n      {},\n    );\n\n    const allSelectors = sortedTraits.reduce(\n      (previousResult: TraitSelectors<any>, factory) => {\n        let result =\n          factory?.selectors?.({\n            previousSelectors: previousResult,\n            allConfigs,\n          }) ?? {};\n        result = previousResult ? { ...previousResult, ...result } : result;\n        return result;\n      },\n      {},\n    );\n\n    const allMutators = sortedTraits.reduce(\n      (previousResult: TraitStateMutators<any> | undefined, factory) => {\n        let result =\n          factory?.mutators?.({\n            allSelectors: allSelectors,\n            previousMutators: previousResult,\n            allConfigs,\n          }) ?? {};\n        result = previousResult ? { ...previousResult, ...result } : result;\n        return result;\n      },\n      {},\n    );\n\n    const initialState = sortedTraits.reduce((previousResult: any, factory) => {\n      const result =\n        factory?.initialState?.({\n          previousInitialState: previousResult,\n          allConfigs,\n        }) ??\n        previousResult ??\n        {};\n      return result;\n    }, {});\n\n    const reducer = sortedTraits.reduce(\n      (\n        previousResult: ((state: any, action: Action) => any) | undefined,\n        factory,\n      ) => {\n        const result = factory?.reducer?.({\n          initialState,\n          allActions,\n          allSelectors,\n          allMutators,\n          allConfigs,\n        });\n        return result && previousResult\n          ? (state = initialState, action) => {\n              const aState = previousResult(state, action);\n              return result(aState, action);\n            }\n          : result ?? previousResult;\n      },\n      undefined,\n    );\n\n    const allFeatureSelectors =\n      allSelectors &&\n      getSelectorsForFeature(config.featureSelector, allSelectors);\n\n    const allEffects = sortedTraits.reduce(\n      (previousResult: Type<TraitEffect>[] | undefined, factory) => {\n        let result =\n          factory?.effects?.({\n            allActions,\n            allSelectors: allFeatureSelectors,\n            allConfigs,\n          }) ?? [];\n        result = previousResult ? [...previousResult, ...result] : result;\n        return result;\n      },\n      [],\n    );\n\n    return {\n      actions: allActions,\n      selectors: allFeatureSelectors,\n      mutators: allMutators,\n      initialState,\n      reducer: reducer ?? createReducer(initialState),\n      effects: allEffects,\n    };\n  }) as FeatureFactory<\n    ExtractStateType<F>,\n    ExtractActionsType<F>,\n    ExtractSelectorsType<F>,\n    ExtractMutatorsType<F>\n  >;\n}\n\nfunction sortTraits(\n  traits: TraitFactory<any, any, any, any>[],\n): TraitFactory<any, any, any, any>[] {\n  const sortedTraits: TraitFactory<any, any, any, any>[] = [];\n  for (let i = 0; i < traits.length; i++) {\n    const trait = traits[i];\n    if (!trait.depends?.length) {\n      sortedTraits.push(trait);\n      continue;\n    }\n    if (trait.depends.length > 1)\n      for (const d of trait.depends) {\n        const isTraitPresent = traits.some((tr) => tr.key === d);\n        if (isTraitPresent) {\n          trait.depends = [d];\n          break;\n        }\n      }\n    if (trait.depends.length > 1)\n      throw Error('could not find dependencies ' + trait.depends.join(' '));\n    const isDependencyAlreadyAdded = sortedTraits.some(\n      (tr) => tr.key === trait?.depends?.[0],\n    );\n\n    if (isDependencyAlreadyAdded) sortedTraits.push(trait);\n    else {\n      // move trait to the end\n      delete traits[i];\n      traits.push(trait);\n    }\n  }\n  return sortedTraits;\n}\n\nfunction getSelectorsForFeature<\n  State,\n  S extends TraitSelectors<State>,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  F extends MemoizedSelector<object, any>,\n>(featureSelect: F, selectors: S): FeatureSelectors<State, S> {\n  const ss: { [key in keyof S]?: any } = {};\n  for (const prop in selectors) {\n    ss[prop] = createSelector(featureSelect as any, selectors[prop] as any);\n  }\n  return ss as FeatureSelectors<State, S>;\n}\n\nexport function setPropertyReducer<State, P extends keyof State>(\n  sourceReducer: (state: State, action: ActionType<any>) => State,\n  property: P,\n  propertyReducer: (state: State[P], action: ActionType<any>) => State[P],\n): (state: State, action: ActionType<any>) => State {\n  return function reducer(state: State, action: ActionType<any>): State {\n    const sourceState = sourceReducer(state, action);\n    return {\n      ...sourceState,\n      [property]: propertyReducer(sourceState[property], action),\n    };\n  };\n}\nexport function setPropertiesReducer<State, P extends keyof State>(\n  sourceReducer: (state: State, action: ActionType<any>) => State,\n  propertiesReducers: {\n    [key in P]: (state: State[P], action: ActionType<any>) => State[P];\n  },\n): (state: State, action: ActionType<any>) => State {\n  return function reducer(state: State, action: ActionType<any>): State {\n    const newState = { ...sourceReducer(state, action) };\n    for (const property in propertiesReducers) {\n      newState[property as P] = propertiesReducers[property](\n        newState[property],\n        action,\n      );\n    }\n    return newState;\n  };\n}\n\nexport function joinReducers<State>(\n  firstReducer: (state: State, action: ActionType<any>) => State,\n  secondReducer: (state: any, action: ActionType<any>) => any,\n): (state: State, action: ActionType<any>) => State {\n  return function reducer(state: State, action: ActionType<any>): State {\n    const sourceState = firstReducer(state, action);\n    return secondReducer(sourceState, action);\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport {\n  Actions,\n  ofType,\n  OnIdentifyEffects,\n  OnRunEffects,\n} from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class TraitEffect implements OnIdentifyEffects, OnRunEffects {\n  private name = this.constructor.name;\n  public componentId = '';\n  public constructor(\n    protected actions$: Actions,\n    protected store: Store<any>,\n  ) {}\n\n  ngrxOnIdentifyEffects() {\n    return this.componentId ? this.name + this.componentId : '';\n  }\n\n  ngrxOnRunEffects(resolvedEffects$: Observable<any>) {\n    return this.componentId\n      ? resolvedEffects$.pipe(\n          takeUntil(\n            this.actions$.pipe(ofType(getDestroyActionName(this.componentId))),\n          ),\n        )\n      : resolvedEffects$;\n  }\n}\n\nexport function getDestroyActionName(id: string) {\n  return `[${id}] Destroyed`;\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { FeatureFactory } from '../model';\nimport { createFeatureSelector, ReducerManager, Store } from '@ngrx/store';\nimport { EffectSources } from '@ngrx/effects';\nimport { getDestroyActionName, TraitEffect } from '../trait-effect';\n\nlet id = 0;\nfunction uniqueComponentId() {\n  return id++;\n}\n\nexport function buildLocalTraits<\n  State,\n  F extends FeatureFactory<State, any, any, any>,\n>(\n  injector: Injector,\n  componentName: string,\n  traitFactory: F,\n  fetchEffectFactory?: TraitLocalEffectsFactory<F>,\n) {\n  const reducers = injector.get(ReducerManager);\n  const effects = injector.get(EffectSources);\n  const store = injector.get(Store);\n  const componentId = `${componentName}_${uniqueComponentId()}`;\n\n  const traits = traitFactory({\n    featureSelector: createFeatureSelector<State>(componentId),\n    actionsGroupKey: `[${componentId}]`,\n  }) as ReturnType<F>;\n\n  traits.reducer && reducers.addReducer(componentId, traits.reducer);\n\n  const fetchEffect = fetchEffectFactory?.(traits.actions, traits.selectors);\n\n  const providers =\n    (traits.effects && [...traits.effects.map((e) => ({ provide: e }))]) || [];\n  if (fetchEffect) {\n    providers.push({ provide: fetchEffect });\n  }\n\n  const i = Injector.create({\n    providers: providers,\n    parent: injector,\n  });\n\n  traits.effects?.forEach((e) => {\n    const effect = i.get(e) as TraitEffect;\n    effect.componentId = componentId;\n    effects.addEffects(effect);\n  });\n\n  if (fetchEffectFactory) {\n    const effect = i.get(fetchEffect) as TraitEffect;\n    effect.componentId = componentId;\n    effects.addEffects(effect);\n  }\n\n  function destroy() {\n    store.dispatch({ type: getDestroyActionName(componentId) });\n    /**\n     * A service that extends TraitsLocalStore and other component service are destroyed\n     * before the component that depends on them, this causes that any subscriptions\n     * to selectors of the TraitsLocalStore could fail because the store state is removed before\n     * they are unsubscribe by the onDestroy of the component. Executing reducers.removeReducer\n     * inside setTimeout ensures the state is remove after the component onDestroy was called,\n     * avoiding the before mentioned possible issues.\n     */\n    setTimeout(() => reducers.removeReducer(componentId));\n  }\n\n  return {\n    destroy,\n    ...traits,\n  };\n}\n\nexport interface Type<T> extends Function {\n  new (...args: any[]): T;\n}\n\nexport interface TraitLocalEffectsFactory<F extends FeatureFactory> {\n  (\n    allActions: ReturnType<F>['actions'],\n    allSelectors: ReturnType<F>['selectors'],\n  ): Type<TraitEffect>;\n}\n\nexport interface LocalTraitsConfig<F extends FeatureFactory> {\n  componentName: string;\n  traitsFactory: F;\n  effectFactory?: TraitLocalEffectsFactory<F>;\n}\n\n@Injectable()\nexport abstract class TraitsLocalStore<F extends FeatureFactory> {\n  traits: ReturnType<F> & { destroy: () => void };\n\n  actions: ReturnType<F>['actions'];\n  selectors: ReturnType<F>['selectors'];\n\n  public constructor(public injector: Injector) {\n    const config = this.setup();\n    this.traits = buildLocalTraits(\n      this.injector,\n      config.componentName,\n      config.traitsFactory,\n      config.effectFactory,\n    );\n    this.actions = this.traits.actions;\n    this.selectors = this.traits.selectors;\n  }\n\n  abstract setup(): LocalTraitsConfig<F>;\n\n  ngOnDestroy() {\n    this.traits.destroy();\n  }\n}\n","import { ReducerTypes } from '@ngrx/store/src/reducer_creator';\nimport { ActionCreator } from '@ngrx/store/src/models';\n\nexport function insertIf<State>(\n  condition,\n  getElement: () => ReducerTypes<State, ActionCreator[]>,\n): ReducerTypes<State, ActionCreator[]>[] {\n  return condition ? [getElement()] : [];\n}\nexport function toMap(a: Array<string | number>) {\n  return a.reduce((acum, value) => {\n    acum[value] = true;\n    return acum;\n  }, {});\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}