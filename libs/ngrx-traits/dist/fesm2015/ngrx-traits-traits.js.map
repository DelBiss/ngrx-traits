{"version":3,"file":"ngrx-traits-traits.js","sources":["../../traits/src/load-entities/load-entities.model.ts","../../traits/src/load-entities/load-entities.trait.reducer.ts","../../traits/src/load-entities/load-entities.mutators.ts","../../traits/src/load-entities/load-entities.trait.actions.ts","../../traits/src/load-entities/load-entities.utils.ts","../../traits/src/filter/filter.trait.selectors.ts","../../traits/src/load-entities/load-entities.trait.selectors.ts","../../traits/src/load-entities/load-entities.trait.ts","../../traits/src/pagination/pagination.model.ts","../../traits/src/filter/filter.trait.effect.ts","../../traits/src/filter/filter.trait.reducer.ts","../../traits/src/filter/filter.model.ts","../../traits/src/filter/filter.trait.mutators.ts","../../traits/src/filter/filter.trait.actions.ts","../../traits/src/filter/filter.trait.ts","../../traits/src/pagination/pagination.trait.selectors.ts","../../traits/src/pagination/pagination.trait.actions.ts","../../traits/src/pagination/pagination.trait.reducer.ts","../../traits/src/pagination/pagination.trait.effects.ts","../../traits/src/pagination/pagination.trait.mutators.ts","../../traits/src/pagination/pagination.trait.ts","../../traits/src/multi-selection/multi-selection.trait.actions.ts","../../traits/src/multi-selection/multi-selection.utils.ts","../../traits/src/multi-selection/multi-selection.trait.selectors.ts","../../traits/src/multi-selection/multi-selection.trait.reducer.ts","../../traits/src/multi-selection/multi-selection.trait.mutators.ts","../../traits/src/multi-selection/multi-selection.trait.ts","../../traits/src/single-selection/single-selection.trait.actions.ts","../../traits/src/single-selection/single-selection.trait.selectors.ts","../../traits/src/single-selection/single-selection.trait.reducer.ts","../../traits/src/single-selection/single-selection.trait.mutators.ts","../../traits/src/single-selection/single-selection.trait.ts","../../traits/src/single-selection/single-selection.model.ts","../../traits/src/crud/crud.model.ts","../../traits/src/crud/crud.trait.actions.ts","../../traits/src/crud/crud.trait.selectors.ts","../../traits/src/crud/crud.trait.reducer.ts","../../traits/src/crud/crud.trait.mutators.ts","../../traits/src/crud/crud.trait.ts","../../traits/src/sort/sort.model.ts","../../traits/src/sort/sort.utils.ts","../../traits/src/sort/sort.trait.mutators.ts","../../traits/src/sort/sort.trait.reducer.ts","../../traits/src/sort/sort.trait.selectors.ts","../../traits/src/sort/sort.trait.effect.ts","../../traits/src/sort/sort.trait.actions.ts","../../traits/src/sort/sort.trait.ts","../../traits/src/reset/reset.trait.ts","../../traits/src/async-action/async-action.trait.ts","../../traits/src/load-entity/load-entity.trait.ts","../../traits/src/ngrx-traits-traits.ts"],"sourcesContent":["import { Comparer, EntityAdapter, EntityState, IdSelector } from '@ngrx/entity';\n\nimport { ActionCreator, TypedAction } from '@ngrx/store/src/models';\nimport { Dictionary } from '@ngrx/entity/src/models';\nimport { KeyedConfig } from 'ngrx-traits';\n\nexport type Status = 'loading' | 'success' | 'fail';\n\nexport interface StatusState {\n  status?: Status;\n}\n\nexport interface EntityAndStatusState<T> extends EntityState<T>, StatusState {}\n\nexport type LoadEntitiesActions<T> = {\n  fetch: ActionCreator<string, () => TypedAction<string>>;\n  fetchSuccess: ActionCreator<\n    string,\n    (props: {\n      entities: T[];\n      total?: number;\n    }) => { entities: T[]; total?: number } & TypedAction<string>\n  >;\n  fetchFail: ActionCreator<\n    string,\n    (props: { error?: string }) => { error?: string } & TypedAction<string>\n  >;\n};\n\nexport type LoadEntitiesSelectors<T> = {\n  selectIds: (state: EntityAndStatusState<T>) => string[] | number[];\n  selectEntities: (state: EntityAndStatusState<T>) => Dictionary<T>;\n  selectAll: (state: EntityAndStatusState<T>) => T[];\n  selectTotal: (state: EntityAndStatusState<T>) => number;\n  isLoading: (state: EntityAndStatusState<T>) => boolean;\n  isSuccess: (state: EntityAndStatusState<T>) => boolean;\n  isFail: (state: EntityAndStatusState<T>) => boolean;\n};\n\nexport type LoadEntitiesMutators<T> = {\n  setAll<S extends EntityAndStatusState<T>>(entities: T[], state: S): S;\n};\n\nexport type GenericActionCreator = ActionCreator<\n  string,\n  (...args: unknown[]) => TypedAction<string>\n>;\n\nexport const loadEntitiesTraitKey = 'loadEntities';\n\nexport type LoadEntitiesConfig<T = unknown> = {\n  selectId?: IdSelector<T>;\n  sortComparer?: false | Comparer<T>;\n  resetOn?: GenericActionCreator[];\n  adapter: EntityAdapter<T>;\n};\n\nexport type LoadEntitiesKeyedConfig<T> = KeyedConfig<\n  typeof loadEntitiesTraitKey,\n  LoadEntitiesConfig<T>\n>;\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport {\n  EntityAndStatusState,\n  LoadEntitiesActions,\n  LoadEntitiesKeyedConfig,\n  LoadEntitiesMutators,\n} from './load-entities.model';\nimport { createReducer, on } from '@ngrx/store';\nimport { PaginationKeyedConfig } from '../pagination';\nimport { insertIf } from 'ngrx-traits';\n\nexport function createLoadEntitiesInitialState<Entity>(\n  previousInitialState = {},\n  allConfigs: LoadEntitiesKeyedConfig<Entity>,\n): EntityAndStatusState<Entity> {\n  const traitConfig = allConfigs.loadEntities;\n  const adapter = traitConfig!.adapter;\n\n  return {\n    ...previousInitialState,\n    ...adapter!.getInitialState(),\n    status: undefined,\n  };\n}\n\nexport function createLoadEntitiesTraitReducer<\n  T,\n  S extends EntityAndStatusState<T>,\n>(\n  initialState: S,\n  actions: LoadEntitiesActions<T>,\n  allMutators: LoadEntitiesMutators<T>,\n  allConfigs: LoadEntitiesKeyedConfig<T> & PaginationKeyedConfig,\n) {\n  const handleEntitiesMerge = !allConfigs?.pagination;\n\n  return createReducer(\n    initialState,\n    on(actions.fetch, (state) => ({\n      ...state,\n      status: 'loading',\n    })),\n    on(actions.fetchFail, (state) => ({\n      ...state,\n      status: 'fail',\n    })),\n    on(actions.fetchSuccess, (state) => ({\n      ...state,\n      status: 'success',\n    })),\n    ...insertIf<S>(handleEntitiesMerge, () =>\n      on(actions.fetchSuccess, (state, { entities }) =>\n        allMutators.setAll(entities, {\n          ...state,\n        }),\n      ),\n    ),\n  );\n}\n","import {\n  LoadEntitiesKeyedConfig,\n  LoadEntitiesMutators,\n} from './load-entities.model';\nimport { PaginationKeyedConfig } from '../pagination';\n\nexport function createLoadEntitiesTraitMutators<Entity>(\n  allConfigs: LoadEntitiesKeyedConfig<Entity> & PaginationKeyedConfig,\n) {\n  const adapter = allConfigs?.loadEntities?.adapter;\n\n  return {\n    setAll: adapter?.setAll,\n  } as LoadEntitiesMutators<Entity>;\n}\n","import { LoadEntitiesActions } from './load-entities.model';\nimport { createAction, props } from '@ngrx/store';\n\nexport function createLoadEntitiesTraitActions<Entity>(\n  actionsGroupKey: string,\n): LoadEntitiesActions<Entity> {\n  const actions = {\n    fetch: createAction(`${actionsGroupKey} Fetch Entities`),\n    fetchSuccess: createAction(\n      `${actionsGroupKey} Fetch Entities Success`,\n      props<{ entities: Entity[]; total?: number }>(),\n    ),\n    fetchFail: createAction(\n      `${actionsGroupKey} Fetch Entities Fail`,\n      props<{ error?: string }>(),\n    ),\n  };\n\n  return actions;\n}\n","import { StatusState } from './load-entities.model';\n\nexport function isLoading<S extends StatusState>(state: S) {\n  return state.status === 'loading';\n}\nexport function isSuccess<S extends StatusState>(state: S) {\n  return state.status === 'success';\n}\nexport function isFail<S extends StatusState>(state: S) {\n  return state.status === 'fail';\n}\n","import { EntityAndFilterState, FilterSelectors } from './filter.model';\nexport function selectFilter<Entity, F>(\n  state: EntityAndFilterState<Entity, F>,\n) {\n  return state.filters;\n}\n\nexport function createFilterTraitSelectors<Entity, F>(): FilterSelectors<\n  Entity,\n  F\n> {\n  return {\n    selectFilter,\n  };\n}\n","import { Dictionary } from '@ngrx/entity';\nimport {\n  LoadEntitiesKeyedConfig,\n  LoadEntitiesSelectors,\n} from './load-entities.model';\nimport { FilterKeyedConfig } from '../filter';\nimport { isFail, isLoading, isSuccess } from './load-entities.utils';\nimport { createSelector } from '@ngrx/store';\nimport { selectFilter } from '../filter/filter.trait.selectors';\n\nexport function createLoadEntitiesTraitSelectors<Entity>(\n  allConfigs?: LoadEntitiesKeyedConfig<Entity> &\n    FilterKeyedConfig<Entity, unknown>,\n) {\n  const adapter = allConfigs?.loadEntities?.adapter;\n  const entitySelectors = adapter?.getSelectors();\n\n  const filterFunction = allConfigs?.filter?.filterFn;\n  let selectors = entitySelectors;\n  if (filterFunction && entitySelectors) {\n    const selectAll = createSelector(\n      entitySelectors.selectAll,\n      selectFilter,\n      (entities, filters) =>\n        filters ? entities.filter((e) => filterFunction(filters, e)) : entities,\n    );\n\n    selectors = {\n      selectAll,\n      selectEntities: createSelector(\n        entitySelectors.selectEntities,\n        selectFilter,\n        (entities, filters) => {\n          const result: Dictionary<Entity> = {};\n          for (const id in entities) {\n            const e = entities[id];\n            if (filterFunction(filters, e!)) {\n              result[id] = e;\n            }\n          }\n          return result;\n        },\n      ),\n      selectTotal: createSelector(selectAll, (entities) => entities.length),\n      selectIds: createSelector(\n        selectAll,\n        (entities) =>\n          entities.map((e) => adapter?.selectId(e)) as string[] | number[],\n      ),\n    };\n  }\n  return {\n    ...selectors,\n    isFail,\n    isLoading,\n    isSuccess,\n  } as LoadEntitiesSelectors<Entity>;\n}\n","import {\n  createLoadEntitiesInitialState,\n  createLoadEntitiesTraitReducer,\n} from './load-entities.trait.reducer';\nimport {\n  EntityAndStatusState,\n  LoadEntitiesConfig,\n  LoadEntitiesKeyedConfig,\n  loadEntitiesTraitKey,\n} from './load-entities.model';\nimport {\n  TraitActionsFactoryConfig,\n  TraitInitialStateFactoryConfig,\n  TraitSelectorsFactoryConfig,\n  TraitStateMutatorsFactoryConfig,\n} from 'ngrx-traits';\nimport { PaginationKeyedConfig } from '../pagination';\nimport { createLoadEntitiesTraitMutators } from './load-entities.mutators';\nimport { createTraitFactory } from 'ngrx-traits';\nimport { createEntityAdapter, EntityAdapter } from '@ngrx/entity';\nimport { createLoadEntitiesTraitActions } from './load-entities.trait.actions';\nimport { createLoadEntitiesTraitSelectors } from './load-entities.trait.selectors';\n\nexport function addLoadEntities<Entity>(\n  traitConfig?: Omit<LoadEntitiesConfig<Entity>, 'adapter'>,\n) {\n  const adapter: EntityAdapter<Entity> = createEntityAdapter(traitConfig);\n\n  return createTraitFactory({\n    key: loadEntitiesTraitKey,\n    config: { ...traitConfig, adapter } as LoadEntitiesConfig<Entity>,\n    actions: ({ actionsGroupKey }: TraitActionsFactoryConfig) =>\n      createLoadEntitiesTraitActions<Entity>(actionsGroupKey),\n    selectors: ({ allConfigs }: TraitSelectorsFactoryConfig) =>\n      createLoadEntitiesTraitSelectors<Entity>(\n        allConfigs as LoadEntitiesKeyedConfig<Entity> & PaginationKeyedConfig,\n      ),\n    mutators: ({ allConfigs }: TraitStateMutatorsFactoryConfig) =>\n      createLoadEntitiesTraitMutators<Entity>(\n        allConfigs as LoadEntitiesKeyedConfig<Entity> & PaginationKeyedConfig,\n      ),\n    initialState: ({\n      previousInitialState,\n      allConfigs,\n    }: TraitInitialStateFactoryConfig) =>\n      createLoadEntitiesInitialState<Entity>(previousInitialState, allConfigs),\n    reducer: ({ initialState, allActions, allMutators, allConfigs }) =>\n      createLoadEntitiesTraitReducer<Entity, EntityAndStatusState<Entity>>(\n        initialState,\n        allActions,\n        allMutators,\n        allConfigs as LoadEntitiesKeyedConfig<Entity> & PaginationKeyedConfig,\n      ),\n  });\n}\n","/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { EntityAndStatusState } from '../load-entities';\n\nimport { ActionCreator, TypedAction } from '@ngrx/store/src/models';\n\nexport type CacheType = 'full' | 'partial' | 'grow';\nexport interface PaginationState {\n  pagination: {\n    currentPage: number;\n    requestPage: number;\n    pageSize: number;\n    total?: number;\n    pagesToCache: number;\n    cache: {\n      type: CacheType;\n      start: number;\n      end: number;\n    };\n  };\n}\n\nexport interface EntityAndPaginationState<T>\n  extends EntityAndStatusState<T>,\n    PaginationState {}\n\nexport type PaginationActions = {\n  loadPage: ActionCreator<\n    string,\n    (props: {\n      index: number;\n      forceLoad?: boolean;\n    }) => { index: number; forceLoad?: boolean } & TypedAction<string>\n  >;\n  loadPageSuccess: ActionCreator<string, () => TypedAction<string>>;\n  loadPageFail: ActionCreator<string, () => TypedAction<string>>;\n  loadNextPage: ActionCreator<string, () => TypedAction<string>>;\n  loadPreviousPage: ActionCreator<string, () => TypedAction<string>>;\n  loadFirstPage: ActionCreator<\n    string,\n    (forceLoad?: boolean) => { forceLoad?: boolean } & TypedAction<string>\n  >;\n  loadLastPage: ActionCreator<string, () => TypedAction<string>>;\n  clearPagesCache: ActionCreator<string, () => TypedAction<string>>;\n};\n\nexport type PaginationSelectors<T> = {\n  isPageInCache: (\n    state: EntityAndPaginationState<T>,\n    props?: { page?: number },\n  ) => boolean;\n  selectPageEntities: (\n    state: EntityAndPaginationState<T>,\n    props?: { page?: number },\n  ) => T[];\n  selectPage: (\n    state: EntityAndPaginationState<T>,\n    props?: { page?: number },\n  ) => PageModel<T>;\n  selectPagedRequest: (state: EntityAndPaginationState<T>) => PagedRequest;\n  selectPageInfo: (state: EntityAndPaginationState<T>) => PageInfoModel;\n  isLoadingPage: (state: EntityAndPaginationState<T>) => boolean;\n};\n\nexport type PaginationMutators<T> = {\n  mergePaginatedEntities<S extends EntityAndPaginationState<T>>(\n    entities: T[],\n    total: number | undefined,\n    state: S,\n  ): S;\n};\n\nexport interface PageModel<T> {\n  entities: T[];\n  pageIndex: number;\n  total: number | undefined;\n  pageSize: number;\n}\n\nexport interface PageInfoModel {\n  pageIndex: number;\n  total: number | undefined;\n  pageSize: number;\n  pagesCount: number | undefined;\n  hasPrevious: boolean;\n  hasNext: boolean;\n  cacheType: CacheType;\n}\n\nexport interface PagedRequest {\n  startIndex: number;\n  size: number;\n  page: number;\n}\n\nexport const paginationTraitKey = 'pagination';\n\nexport interface PaginationConfig {\n  cacheType?: CacheType;\n  pageSize?: number;\n  currentPage?: number;\n  pagesToCache?: number;\n}\n\nexport interface PaginationKeyedConfig {\n  pagination?: PaginationConfig;\n}\n","import { Injectable } from '@angular/core';\nimport { TraitEffect } from 'ngrx-traits';\nimport { asyncScheduler, EMPTY, of, timer } from 'rxjs';\nimport {\n  concatMap,\n  debounce,\n  distinctUntilChanged,\n  first,\n  map,\n} from 'rxjs/operators';\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { FilterKeyedConfig, FilterSelectors } from './filter.model';\nimport {\n  LoadEntitiesActions,\n  LoadEntitiesSelectors,\n} from '../load-entities/load-entities.model';\nimport { Type } from 'ngrx-traits';\nimport { ƟFilterActions } from './filter.model.internal';\nimport { PaginationActions } from '../pagination';\n\nexport function createFilterTraitEffects<Entity, F>(\n  allActions: ƟFilterActions<F> &\n    LoadEntitiesActions<Entity> &\n    PaginationActions,\n  allSelectors: FilterSelectors<Entity, F> & LoadEntitiesSelectors<Entity>,\n  allConfigs: FilterKeyedConfig<Entity, F>,\n): Type<TraitEffect>[] {\n  const traitConfig = allConfigs.filter;\n  @Injectable()\n  class FilterEffect extends TraitEffect {\n    storeFilter$ = createEffect(\n      () =>\n        ({\n          debounce: debounceTime = traitConfig!.defaultDebounceTime,\n          scheduler = asyncScheduler,\n        } = {}) =>\n          this.actions$.pipe(\n            ofType(allActions.filter),\n            debounce((value) =>\n              value?.forceLoad ? EMPTY : timer(debounceTime, scheduler),\n            ),\n            concatMap((payload) =>\n              payload.patch\n                ? this.store.select(allSelectors.selectFilter).pipe(\n                    first(),\n                    map((storedFilters) => ({\n                      ...payload,\n                      filters: { ...storedFilters, ...payload?.filters },\n                    })),\n                  )\n                : of(payload),\n            ),\n            distinctUntilChanged(\n              (previous, current) =>\n                !current?.forceLoad &&\n                JSON.stringify(previous?.filters) ===\n                  JSON.stringify(current?.filters),\n            ),\n            map((action) =>\n              allActions.storeFilter({\n                filters: action?.filters,\n                patch: action?.patch,\n              }),\n            ),\n          ),\n    );\n\n    fetch$ =\n      !traitConfig?.filterFn &&\n      createEffect(() => {\n        return this.actions$.pipe(\n          ofType(allActions['storeFilter']),\n          concatMap(() =>\n            allActions?.loadFirstPage\n              ? [allActions.clearPagesCache(), allActions.loadFirstPage()]\n              : [allActions.fetch()],\n          ),\n        );\n      });\n  }\n\n  return [FilterEffect];\n}\n","import { createReducer, on } from '@ngrx/store';\nimport { LoadEntitiesActions } from '../load-entities/load-entities.model';\nimport {\n  EntityAndFilterState,\n  FilterKeyedConfig,\n  FilterMutators,\n} from './filter.model';\nimport { ƟFilterActions } from './filter.model.internal';\n\nexport function createFilterInitialState<Entity, F>(\n  previousInitialState: any,\n  allConfigs: FilterKeyedConfig<Entity, F>,\n): EntityAndFilterState<Entity, F> {\n  return {\n    ...previousInitialState,\n    filters: allConfigs?.filter?.defaultFilter,\n  };\n}\n\nexport function createFilterTraitReducer<\n  T,\n  F,\n  S extends EntityAndFilterState<T, F>,\n>(\n  initialState: S,\n  allActions: ƟFilterActions<F> & LoadEntitiesActions<T>,\n  allMutators: FilterMutators<T, F>,\n) {\n  return createReducer(\n    initialState,\n    on(allActions.storeFilter, (state, { filters }) =>\n      allMutators.setFilters(filters, state),\n    ),\n  );\n}\n","import { EntityAndStatusState } from '../load-entities/load-entities.model';\n\nimport { ActionCreator, TypedAction } from '@ngrx/store/src/models';\n\nexport interface FilterState<F> {\n  filters?: F;\n}\nexport interface EntityAndFilterState<T, F>\n  extends EntityAndStatusState<T>,\n    FilterState<F> {}\n\ntype FilterPatchConditionalType<F, P> = P extends true ? Partial<F> : F;\n\nexport interface FilterActionOverload<F> {\n  <P extends boolean>(props?: {\n    filters: FilterPatchConditionalType<F, P>;\n    forceLoad?: boolean;\n    patch: P;\n  }): {\n    filters: FilterPatchConditionalType<F, P>;\n    forceLoad: boolean;\n    patch: P;\n  } & TypedAction<string>;\n  (props?: { filters: F; forceLoad?: boolean }): {\n    filters: F;\n    forceLoad: boolean;\n    patch: boolean;\n  } & TypedAction<string>;\n}\n\nexport type FilterActions<F> = {\n  filter: ActionCreator<string, FilterActionOverload<F>>;\n};\nexport type FilterSelectors<T, F> = {\n  selectFilter: (state: EntityAndFilterState<T, F>) => F | undefined;\n};\n\nexport type FilterMutators<T, F> = {\n  setFilters<S extends EntityAndFilterState<T, F>>(\n    filter: F | undefined,\n    state: S,\n  ): S;\n};\n\nexport const filterTraitKey = 'filter';\n\nexport type FilterConfig<T, F> = {\n  defaultFilter?: F;\n  filterFn?: (filter: F, entity: T) => boolean;\n  defaultDebounceTime?: number;\n};\n\nexport type FilterKeyedConfig<T, F> = {\n  filter?: FilterConfig<T, F>;\n};\n","import { EntityAndFilterState, FilterMutators } from './filter.model';\n\nexport function createFilterTraitMutators<Entity, F>(): FilterMutators<\n  Entity,\n  F\n> {\n  function setFilters<S extends EntityAndFilterState<Entity, F>>(\n    filters: F,\n    state: S,\n  ) {\n    return {\n      ...state,\n      filters,\n    };\n  }\n  return { setFilters };\n}\n","import { createAction } from '@ngrx/store';\nimport { FilterActionOverload, FilterActions } from './filter.model';\nimport { ActionCreator } from '@ngrx/store/src/models';\nimport { ƟFilterActions } from './filter.model.internal';\n\nexport function createFilterTraitActions<F>(\n  actionsGroupKey: string,\n): FilterActions<F> {\n  const actions: ƟFilterActions<F> = {\n    filter: createAction(\n      `${actionsGroupKey} filter`,\n      (props?: {\n        filters: F | Partial<F>;\n        forceLoad?: boolean;\n        patch?: boolean;\n      }) => ({\n        filters: props?.filters,\n        forceLoad: props?.forceLoad,\n        patch: props?.patch,\n      }),\n    ) as ActionCreator<string, FilterActionOverload<F>>,\n    storeFilter: createAction(\n      `${actionsGroupKey} store filter`,\n      (props: { filters?: F; patch?: boolean }) => ({\n        filters: props?.filters,\n        patch: props?.patch,\n      }),\n    ),\n  };\n  return actions;\n}\n","import {\n  PaginationActions,\n  paginationTraitKey,\n} from '../pagination/pagination.model';\nimport { createFilterTraitEffects } from './filter.trait.effect';\nimport {\n  createFilterInitialState,\n  createFilterTraitReducer,\n} from './filter.trait.reducer';\nimport {\n  FilterConfig,\n  FilterKeyedConfig,\n  FilterSelectors,\n  filterTraitKey,\n} from './filter.model';\nimport { createFilterTraitSelectors } from './filter.trait.selectors';\nimport {\n  LoadEntitiesActions,\n  LoadEntitiesSelectors,\n  loadEntitiesTraitKey,\n} from '../load-entities/load-entities.model';\nimport { createFilterTraitMutators } from './filter.trait.mutators';\nimport { createTraitFactory } from 'ngrx-traits';\nimport { createFilterTraitActions } from './filter.trait.actions';\nimport { ƟFilterActions } from './filter.model.internal';\nimport {\n  TraitActionsFactoryConfig,\n  TraitInitialStateFactoryConfig,\n} from 'ngrx-traits';\n\nexport function addFilter<Entity, F>({\n  defaultDebounceTime = 400,\n  defaultFilter,\n  filterFn,\n}: FilterConfig<Entity, F> = {}) {\n  return createTraitFactory({\n    key: filterTraitKey,\n    depends: [paginationTraitKey, loadEntitiesTraitKey],\n    config: { defaultDebounceTime, defaultFilter, filterFn } as FilterConfig<\n      Entity,\n      F\n    >,\n    actions: ({ actionsGroupKey }: TraitActionsFactoryConfig) =>\n      createFilterTraitActions<F>(actionsGroupKey),\n    selectors: () => createFilterTraitSelectors<Entity, F>(),\n    mutators: () => createFilterTraitMutators<Entity, F>(),\n    initialState: ({\n      previousInitialState,\n      allConfigs,\n    }: TraitInitialStateFactoryConfig) =>\n      createFilterInitialState<Entity, F>(\n        previousInitialState,\n        allConfigs as FilterKeyedConfig<Entity, F>,\n      ),\n    reducer: ({ initialState, allActions, allMutators }) =>\n      createFilterTraitReducer(\n        initialState,\n        allActions as ƟFilterActions<F> & LoadEntitiesActions<Entity>,\n        allMutators,\n      ),\n    effects: ({ allActions, allSelectors, allConfigs }) =>\n      createFilterTraitEffects(\n        allActions as ƟFilterActions<F> &\n          LoadEntitiesActions<Entity> &\n          PaginationActions,\n        allSelectors as FilterSelectors<Entity, F> &\n          LoadEntitiesSelectors<Entity>,\n        allConfigs,\n      ),\n  });\n}\n","import { createSelector } from '@ngrx/store';\nimport {\n  EntityAndPaginationState,\n  PaginationSelectors,\n  PaginationState,\n} from './pagination.model';\nimport { LoadEntitiesSelectors } from '../load-entities/load-entities.model';\nimport { FilterKeyedConfig } from '../filter/filter.model';\n\nexport function createPaginationTraitSelectors<Entity>(\n  previousSelectors: LoadEntitiesSelectors<Entity>,\n  allConfigs: FilterKeyedConfig<Entity, unknown>,\n): PaginationSelectors<Entity> {\n  const { selectAll, isLoading } = previousSelectors;\n\n  const filterFunction = allConfigs?.filter?.filterFn;\n\n  function selectPagination(state: EntityAndPaginationState<Entity>) {\n    return state.pagination;\n  }\n  const selectPaginationFiltered: (\n    state: EntityAndPaginationState<Entity>,\n  ) => PaginationState['pagination'] = filterFunction\n    ? createSelector(selectAll, selectPagination, (entities, pagination) => {\n        return {\n          ...pagination,\n          total: entities.length,\n          cache: {\n            ...pagination.cache,\n            start: 0,\n            end: entities.length,\n          },\n        };\n      })\n    : selectPagination;\n\n  const selectPageEntities = createSelector(\n    selectAll,\n    selectPaginationFiltered,\n    (\n      entities: Entity[],\n      pagination,\n      { page } = { page: pagination.currentPage },\n    ) => {\n      const startIndex = page * pagination.pageSize - pagination.cache.start;\n      let endIndex = startIndex + pagination.pageSize;\n      endIndex =\n        endIndex < pagination.cache.end ? endIndex : pagination.cache.end;\n      return entities.slice(startIndex, endIndex);\n    },\n  );\n\n  const selectPageInfo = createSelector(\n    selectPaginationFiltered,\n    (pagination) => {\n      const pagesCount =\n        pagination.total && pagination.total > 0\n          ? Math.ceil(pagination.total / pagination.pageSize)\n          : undefined;\n      return {\n        pageIndex: pagination.currentPage,\n        total: pagination.total,\n        pageSize: pagination.pageSize,\n        pagesCount,\n        hasPrevious: pagination.currentPage - 1 >= 0,\n        hasNext:\n          pagination.total && pagination.total > 0\n            ? pagination.currentPage + 1 < pagesCount!\n            : true,\n        cacheType: pagination.cache.type,\n      };\n    },\n  );\n\n  const isPageInCache = createSelector(\n    selectPaginationFiltered,\n    (pagination, { page } = { page: pagination.currentPage }) => {\n      const startIndex = page * pagination.pageSize;\n      let endIndex = startIndex + pagination.pageSize - 1;\n      endIndex =\n        pagination.total && endIndex > pagination.total\n          ? pagination.total - 1\n          : endIndex;\n      return (\n        startIndex >= pagination.cache.start && endIndex <= pagination.cache.end\n      );\n    },\n  );\n\n  const selectPage = createSelector(\n    selectPageEntities,\n    selectPageInfo,\n    // props look unsued but they are pass to the selectPageEntities\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    (entities, pageInfo, props = { page: pageInfo.pageIndex }) => ({\n      entities,\n      ...pageInfo,\n    }),\n  );\n\n  const selectPagedRequest = createSelector(selectPagination, (pagination) => ({\n    startIndex: pagination.pageSize * pagination.requestPage,\n    size: pagination.pageSize * pagination.pagesToCache,\n    page: pagination.requestPage,\n  }));\n\n  const isLoadingPage = createSelector(\n    isLoading,\n    selectPagination,\n    (isLoading, pagination) =>\n      isLoading && pagination.requestPage === pagination.currentPage,\n  );\n\n  return {\n    selectPageEntities,\n    isPageInCache,\n    selectPage,\n    selectPagedRequest,\n    selectPageInfo,\n    isLoadingPage,\n  };\n}\n","import { PaginationActions } from './pagination.model';\nimport { createAction, props } from '@ngrx/store';\nimport { ƟPaginationActions } from './pagination.model.internal';\n\nexport function createPaginationTraitActions(\n  actionsGroupKey: string,\n): PaginationActions {\n  const actions: ƟPaginationActions = {\n    loadPage: createAction(\n      `${actionsGroupKey} load page`,\n      ({ index, forceLoad }: { index: number; forceLoad?: boolean }) => ({\n        index,\n        forceLoad,\n      }),\n    ),\n    loadPageSuccess: createAction(\n      `${actionsGroupKey} load\n          page success`,\n    ),\n    loadPageFail: createAction(`${actionsGroupKey} load page fail`),\n    loadPreviousPage: createAction(`${actionsGroupKey} load previous page`),\n    loadNextPage: createAction(`${actionsGroupKey} load next page`),\n    loadFirstPage: createAction(\n      `${actionsGroupKey} load first page`,\n      (forceLoad?: boolean) => ({ forceLoad }),\n    ),\n    loadLastPage: createAction(`${actionsGroupKey} load last page`),\n    clearPagesCache: createAction(`${actionsGroupKey} clear cache`),\n    setRequestPage: createAction(\n      `${actionsGroupKey} set request page`,\n      props<{ index: number }>(),\n    ),\n  };\n  return actions;\n}\n","import { FilterActions, FilterKeyedConfig } from '../filter/filter.model';\nimport { createReducer, on } from '@ngrx/store';\n\nimport {\n  LoadEntitiesActions,\n  LoadEntitiesKeyedConfig,\n  LoadEntitiesMutators,\n  LoadEntitiesSelectors,\n} from '../load-entities/load-entities.model';\nimport {\n  EntityAndPaginationState,\n  PaginationKeyedConfig,\n  PaginationMutators,\n} from './pagination.model';\nimport { CrudActions } from '../crud';\nimport { ƟPaginationActions } from './pagination.model.internal';\nimport { insertIf } from 'ngrx-traits';\n\nexport function createPaginationInitialState<Entity>(\n  previousInitialState: any,\n  allConfigs: PaginationKeyedConfig,\n): EntityAndPaginationState<Entity> {\n  const { currentPage, pageSize, cacheType, pagesToCache } =\n    allConfigs.pagination!;\n\n  return {\n    ...previousInitialState,\n    pagination: {\n      pageSize,\n      currentPage,\n      requestPage: currentPage,\n      pagesToCache,\n      cache: {\n        type: cacheType,\n        start: 0,\n        end: 0,\n      },\n    },\n  };\n}\n\nexport function createPaginationTraitReducer<\n  Entity,\n  S extends EntityAndPaginationState<Entity>,\n>(\n  initialState: S,\n  allActions: ƟPaginationActions &\n    FilterActions<Entity> &\n    LoadEntitiesActions<Entity> &\n    CrudActions<Entity>,\n  allSelectors: LoadEntitiesSelectors<Entity>,\n  allMutators: PaginationMutators<Entity> & LoadEntitiesMutators<Entity>,\n  allConfigs: FilterKeyedConfig<Entity, unknown> &\n    LoadEntitiesKeyedConfig<Entity> &\n    PaginationKeyedConfig,\n) {\n  function addToCacheTotal<S extends EntityAndPaginationState<Entity>>(\n    state: S,\n    add: number,\n  ) {\n    return {\n      ...state,\n      pagination: {\n        ...state.pagination,\n        total: (state.pagination.total ?? 0) + add,\n      },\n    };\n  }\n\n  function clearPagesCache<S extends EntityAndPaginationState<Entity>>(\n    state: S,\n  ): S {\n    return {\n      ...state,\n      entities: {},\n      ids: [],\n      pagination: {\n        ...state.pagination,\n        currentPage: 0,\n        total: 0,\n        cache: { ...state.pagination.cache, start: 0, end: 0 },\n      },\n    };\n  }\n\n  function recalculateTotal<S extends EntityAndPaginationState<Entity>>(\n    state: S,\n  ): S {\n    const total = allSelectors.selectTotal(state);\n    return {\n      ...state,\n      status: 'success',\n      pagination: {\n        ...state.pagination,\n        currentPage: 0,\n        total,\n        cache: {\n          ...state.pagination.cache,\n          start: 0,\n          end: total,\n        },\n      },\n    };\n  }\n\n  const filterRemote = !allConfigs?.filter?.filterFn;\n\n  return createReducer(\n    initialState,\n    on(allActions.loadPage, (state, { index }) => ({\n      ...state,\n      pagination: {\n        ...state.pagination,\n        currentPage: index,\n        requestPage: index,\n      },\n      status: 'loading',\n    })),\n    on(allActions.setRequestPage, (state, { index }) => ({\n      ...state,\n      pagination: {\n        ...state.pagination,\n        requestPage: index,\n      },\n      status: 'loading',\n    })),\n    on(allActions.loadPageSuccess, (state) => ({\n      ...state,\n      status: 'success',\n    })),\n    on(allActions.loadPageFail, (state) => ({\n      ...state,\n      status: 'fail',\n    })),\n    on(allActions.clearPagesCache, (state) => clearPagesCache(state)),\n    on(allActions.fetchSuccess, (state, { entities, total }) =>\n      allMutators.mergePaginatedEntities<S>(entities, total, {\n        ...state,\n        status: 'success',\n      }),\n    ),\n    ...insertIf<S>(allActions.add, () =>\n      on(allActions.add, (state, { entities }) =>\n        addToCacheTotal(state, entities.length),\n      ),\n    ),\n    ...insertIf<S>(allActions.remove, () =>\n      on(allActions.remove, (state, { keys }) =>\n        addToCacheTotal(state, -keys.length),\n      ),\n    ),\n    ...insertIf<S>(filterRemote && allActions.filter, () =>\n      on(allActions.filter, (state) => recalculateTotal(state)),\n    ),\n    ...insertIf<S>(allActions.removeAll, () =>\n      on(allActions.removeAll, (state) => clearPagesCache(state)),\n    ),\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { TraitEffect } from 'ngrx-traits';\nimport { concatMap, concatMapTo, filter, first, map } from 'rxjs/operators';\nimport { concatLatestFrom, createEffect, ofType } from '@ngrx/effects';\nimport { FilterActions } from '../filter/filter.model';\nimport { LoadEntitiesActions, LoadEntitiesSelectors } from '../load-entities';\nimport { CrudActions } from '../crud/crud.model';\nimport { PaginationSelectors } from './pagination.model';\nimport { Type } from 'ngrx-traits';\nimport { ƟPaginationActions } from './pagination.model.internal';\n\nexport function createPaginationTraitEffects<Entity>(\n  allActions: ƟPaginationActions &\n    FilterActions<Entity> &\n    LoadEntitiesActions<Entity> &\n    CrudActions<Entity>,\n  allSelectors: LoadEntitiesSelectors<Entity> & PaginationSelectors<Entity>,\n): Type<TraitEffect>[] {\n  @Injectable()\n  class PaginationEffect extends TraitEffect {\n    loadPage$ = createEffect(() => {\n      return this.actions$.pipe(\n        ofType(allActions.loadPage),\n        concatLatestFrom(() => this.store.select(allSelectors.isPageInCache)),\n        map(([{ forceLoad }, isInCache]) =>\n          !forceLoad && isInCache\n            ? allActions.loadPageSuccess()\n            : allActions.fetch(),\n        ),\n      );\n    });\n\n    preloadNextPage$ = createEffect(() => {\n      return this.actions$.pipe(\n        ofType(allActions.loadPageSuccess),\n        concatMapTo(\n          this.store.select(allSelectors.selectPageInfo).pipe(first()),\n        ),\n        filter(\n          (pageInfo) =>\n            !!pageInfo.total &&\n            pageInfo.hasNext &&\n            pageInfo.cacheType !== 'full',\n        ),\n        concatMap((pageInfo) =>\n          this.store\n            .select(allSelectors.isPageInCache, {\n              page: pageInfo.pageIndex + 1,\n            })\n            .pipe(\n              first(),\n              map((isInCache) => (!isInCache && pageInfo) || undefined),\n            ),\n        ),\n        filter((pageInfo) => !!pageInfo),\n        concatMap((pageInfo) => [\n          allActions.setRequestPage({ index: pageInfo!.pageIndex + 1 }),\n          allActions.fetch(),\n        ]),\n      );\n    });\n\n    loadFirstPage$ = createEffect(() => {\n      return this.actions$.pipe(\n        ofType(allActions.loadFirstPage),\n        map(() => allActions.loadPage({ index: 0 })),\n      );\n    });\n\n    loadPreviousPage$ = createEffect(() => {\n      return this.actions$.pipe(\n        ofType(allActions.loadPreviousPage),\n        concatMapTo(\n          this.store.select(allSelectors.selectPageInfo).pipe(first()),\n        ),\n        map((page) =>\n          page.hasPrevious\n            ? allActions.loadPage({ index: page.pageIndex - 1 })\n            : allActions.loadPageFail(),\n        ),\n      );\n    });\n\n    loadNextPage$ = createEffect(() => {\n      return this.actions$.pipe(\n        ofType(allActions.loadNextPage),\n        concatMapTo(\n          this.store.select(allSelectors.selectPageInfo).pipe(first()),\n        ),\n        map((page) =>\n          page.hasNext\n            ? allActions.loadPage({ index: page.pageIndex + 1 })\n            : allActions.loadPageFail(),\n        ),\n      );\n    });\n\n    loadLastPage$ = createEffect(() => {\n      return this.actions$.pipe(\n        ofType(allActions.loadLastPage),\n        concatMapTo(\n          this.store.select(allSelectors.selectPageInfo).pipe(first()),\n        ),\n        map((page) =>\n          page.hasNext && page.pagesCount\n            ? allActions.loadPage({ index: page.pagesCount - 1 })\n            : allActions.loadPageFail(),\n        ),\n      );\n    });\n  }\n  return [PaginationEffect];\n}\n","import {\n  EntityAndPaginationState,\n  PaginationMutators,\n  PaginationSelectors,\n} from './pagination.model';\nimport { LoadEntitiesKeyedConfig } from '../load-entities';\n\nexport function createPaginationTraitMutators<Entity>(\n  allSelectors: PaginationSelectors<Entity>,\n  allConfigs: LoadEntitiesKeyedConfig<Entity>,\n): PaginationMutators<Entity> {\n  const adapter = allConfigs.loadEntities!.adapter;\n\n  function mergePaginatedEntities<S extends EntityAndPaginationState<Entity>>(\n    entities: Entity[],\n    total = undefined,\n    state: S,\n  ): S {\n    const cacheType = state.pagination.cache.type;\n\n    switch (cacheType) {\n      case 'full':\n        return adapter.setAll(entities, {\n          ...state,\n          pagination: {\n            ...state.pagination,\n            total: entities.length,\n            cache: {\n              ...state.pagination.cache,\n              start: 0,\n              end: entities.length,\n            },\n          },\n        });\n      case 'partial': {\n        const isPreloadNextPages =\n          state.pagination.currentPage + 1 === state.pagination.requestPage;\n\n        const start = state.pagination.currentPage * state.pagination.pageSize;\n        const newEntities = isPreloadNextPages\n          ? [...allSelectors.selectPageEntities(state), ...entities]\n          : entities;\n        return adapter.setAll(newEntities, {\n          ...state,\n          pagination: {\n            ...state.pagination,\n            total,\n            cache: {\n              ...state.pagination.cache,\n              start,\n              end: start + entities.length,\n            },\n          },\n        });\n      }\n      case 'grow':\n        return adapter.addMany(entities, {\n          ...state,\n          pagination: {\n            ...state.pagination,\n            total,\n            cache: {\n              ...state.pagination.cache,\n              end: state.ids.length + entities.length,\n            },\n          },\n        });\n    }\n\n    return state;\n  }\n  return { mergePaginatedEntities };\n}\n","import {\n  PaginationConfig,\n  PaginationKeyedConfig,\n  PaginationMutators,\n  PaginationSelectors,\n  paginationTraitKey,\n} from './pagination.model';\nimport { createPaginationTraitSelectors } from './pagination.trait.selectors';\nimport { createPaginationTraitActions } from './pagination.trait.actions';\nimport { FilterActions, FilterKeyedConfig } from '../filter/filter.model';\nimport {\n  LoadEntitiesActions,\n  LoadEntitiesKeyedConfig,\n  LoadEntitiesMutators,\n  LoadEntitiesSelectors,\n  loadEntitiesTraitKey,\n} from '../load-entities/load-entities.model';\nimport {\n  createPaginationInitialState,\n  createPaginationTraitReducer,\n} from './pagination.trait.reducer';\nimport { createPaginationTraitEffects } from './pagination.trait.effects';\nimport { createTraitFactory } from 'ngrx-traits';\nimport { CrudActions } from '../crud/crud.model';\nimport { createPaginationTraitMutators } from './pagination.trait.mutators';\nimport { ƟPaginationActions } from './pagination.model.internal';\nimport {\n  TraitActionsFactoryConfig,\n  TraitInitialStateFactoryConfig,\n  TraitSelectorsFactoryConfig,\n} from 'ngrx-traits';\n\nexport function addPagination<Entity>({\n  cacheType = 'full',\n  pageSize = 20,\n  currentPage = 0,\n  pagesToCache = 3,\n}: PaginationConfig = {}) {\n  return createTraitFactory({\n    key: paginationTraitKey,\n    depends: [loadEntitiesTraitKey],\n    config: {\n      cacheType,\n      pageSize,\n      currentPage,\n      pagesToCache,\n    } as PaginationConfig,\n    actions: ({ actionsGroupKey }: TraitActionsFactoryConfig) =>\n      createPaginationTraitActions(actionsGroupKey),\n    selectors: ({\n      previousSelectors,\n      allConfigs,\n    }: TraitSelectorsFactoryConfig) =>\n      createPaginationTraitSelectors<Entity>(\n        previousSelectors as LoadEntitiesSelectors<Entity>,\n        allConfigs as PaginationKeyedConfig &\n          FilterKeyedConfig<Entity, unknown>,\n      ),\n    mutators: ({ allSelectors, allConfigs }) =>\n      createPaginationTraitMutators<Entity>(\n        allSelectors as PaginationSelectors<Entity> &\n          LoadEntitiesSelectors<Entity>,\n        allConfigs as PaginationKeyedConfig & LoadEntitiesKeyedConfig<Entity>,\n      ),\n    initialState: ({\n      previousInitialState,\n      allConfigs,\n    }: TraitInitialStateFactoryConfig) =>\n      createPaginationInitialState<Entity>(\n        previousInitialState,\n        allConfigs as PaginationKeyedConfig,\n      ),\n    reducer: ({\n      initialState,\n      allActions,\n      allSelectors,\n      allMutators,\n      allConfigs,\n    }) =>\n      createPaginationTraitReducer(\n        initialState,\n        allActions as ƟPaginationActions &\n          FilterActions<Entity> &\n          LoadEntitiesActions<Entity> &\n          CrudActions<Entity>,\n        allSelectors as PaginationSelectors<Entity> &\n          LoadEntitiesSelectors<Entity>,\n        allMutators as PaginationMutators<Entity> &\n          LoadEntitiesMutators<Entity>,\n        allConfigs as FilterKeyedConfig<Entity, unknown> &\n          LoadEntitiesKeyedConfig<Entity> &\n          PaginationKeyedConfig,\n      ),\n    effects: ({ allActions, allSelectors }) =>\n      createPaginationTraitEffects(\n        allActions as ƟPaginationActions &\n          FilterActions<Entity> &\n          LoadEntitiesActions<Entity> &\n          CrudActions<Entity>,\n        allSelectors as PaginationSelectors<Entity> &\n          LoadEntitiesSelectors<Entity>,\n      ),\n  });\n}\n","import { createAction, props } from '@ngrx/store';\nimport { MultiSelectActions } from './multi-selection.model';\n\nexport function createMultiSelectionTraitActions(\n  actionsGroupKey: string,\n): MultiSelectActions {\n  return {\n    multiSelect: createAction(\n      `${actionsGroupKey} Select`,\n      props<{ id: number | string }>(),\n    ),\n    multiDeselect: createAction(\n      `${actionsGroupKey} Deselect`,\n      props<{ id: number | string }>(),\n    ),\n    multiToggleSelect: createAction(\n      `${actionsGroupKey} Toggle Select`,\n      props<{ id: number | string }>(),\n    ),\n    toggleSelectAll: createAction(`${actionsGroupKey} Toggle Select All`),\n    multiClearSelection: createAction(`${actionsGroupKey} Clear Selection`),\n  };\n}\n","import {\n  EntityAndMultipleSelectionState,\n  MultipleSelectionState,\n} from './multi-selection.model';\n\nexport function multiDeselect<S extends MultipleSelectionState>(\n  id: number | string,\n  state: S,\n): S {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { [id]: _value, ...selectedIds } = state.selectedIds;\n  return {\n    ...state,\n    selectedIds: selectedIds,\n  };\n}\n\nexport function multiSelect<S extends MultipleSelectionState>(\n  id: number | string,\n  state: S,\n): S {\n  return {\n    ...state,\n    selectedIds: { ...state.selectedIds, [id]: true },\n  };\n}\n\nexport function multiToggleSelect<S extends MultipleSelectionState>(\n  id: number | string,\n  state: S,\n): S {\n  const selected = state.selectedIds[id];\n  if (selected) {\n    return multiDeselect(id, state);\n  } else {\n    return multiSelect(id, state);\n  }\n}\nexport function multiClearSelection<S extends MultipleSelectionState>(\n  state: S,\n): S {\n  return { ...state, selectedIds: {} };\n}\n\nexport function selectTotalSelected<\n  T,\n  S extends EntityAndMultipleSelectionState<T>,\n>(state: S): number {\n  return Object.keys(state.selectedIds).length;\n}\n\nexport type Selected = 'all' | 'some' | 'none';\n","import { createSelector } from '@ngrx/store';\nimport { selectTotalSelected } from './multi-selection.utils';\nimport {\n  EntityAndMultipleSelectionState,\n  MultipleSelectionSelectors,\n} from './multi-selection.model';\nimport { LoadEntitiesSelectors } from '../load-entities';\nimport { Dictionary } from '@ngrx/entity/src/models';\n\nexport function createMultiSelectionTraitSelectors<Entity>(\n  previousSelectors: LoadEntitiesSelectors<Entity>,\n): MultipleSelectionSelectors<Entity> {\n  const { selectEntities, selectTotal } = previousSelectors;\n\n  function selectIdsSelected(state: EntityAndMultipleSelectionState<Entity>) {\n    return state.selectedIds;\n  }\n  const selectAllIdsSelected = createSelector(\n    selectIdsSelected,\n    (ids: Dictionary<boolean>) => Object.keys(ids),\n  );\n  const selectEntitiesSelected = createSelector(\n    selectAllIdsSelected,\n    selectEntities,\n    (selectedIds, entities) =>\n      selectedIds.reduce((acum: { [id: string]: Entity | undefined }, id) => {\n        acum[id] = entities[id];\n        return acum;\n      }, {}),\n  );\n  const selectAllSelected = createSelector(\n    selectAllIdsSelected,\n    selectEntities,\n    (selectedIds, entities) => selectedIds.map((id) => entities[id]!),\n  );\n\n  const isAllSelected = createSelector(\n    (state: EntityAndMultipleSelectionState<Entity>) => selectTotal(state),\n    selectTotalSelected,\n    (total, totalSelected) =>\n      totalSelected === total ? 'all' : totalSelected === 0 ? 'none' : 'some',\n  );\n\n  return {\n    selectIdsSelected,\n    selectAllIdsSelected,\n    selectEntitiesSelected,\n    selectAllSelected,\n    selectTotalSelected,\n    isAllSelected,\n  };\n}\n","import {\n  LoadEntitiesActions,\n  LoadEntitiesKeyedConfig,\n} from '../load-entities/load-entities.model';\nimport { SortActions, SortKeyedConfig } from '../sort/sort.model';\nimport {\n  EntityAndMultipleSelectionState,\n  MultipleSelectionMutators,\n  MultiSelectActions,\n} from './multi-selection.model';\nimport { CrudActions } from '../crud/crud.model';\nimport { Update } from '@ngrx/entity/src/models';\nimport { insertIf } from 'ngrx-traits';\nimport { createReducer, on } from '@ngrx/store';\nimport {\n  PaginationActions,\n  PaginationKeyedConfig,\n} from '../pagination/pagination.model';\nimport { FilterActions } from '../filter';\n\nexport function createMultiSelectionInitialState<Entity>(\n  previousInitialState: any,\n): EntityAndMultipleSelectionState<Entity> {\n  return {\n    ...previousInitialState,\n    selectedIds: {},\n  };\n}\n\nexport function createMultiSelectionTraitReducer<\n  Entity,\n  S extends EntityAndMultipleSelectionState<Entity>,\n>(\n  initialState: S,\n  allActions: MultiSelectActions &\n    CrudActions<Entity> &\n    SortActions<Entity> &\n    LoadEntitiesActions<Entity> &\n    FilterActions<any> &\n    PaginationActions,\n  allMutators: MultipleSelectionMutators<Entity>,\n  allConfigs: LoadEntitiesKeyedConfig<Entity> &\n    PaginationKeyedConfig &\n    SortKeyedConfig<Entity>,\n) {\n  const { adapter } = allConfigs.loadEntities!;\n  const sortRemote = allConfigs.sort?.remote;\n  const paginationCacheType = allConfigs.pagination?.cacheType;\n\n  function updateSelectedIdsChanged<\n    S extends EntityAndMultipleSelectionState<Entity>,\n  >(state: S, updates: Update<Entity>[]) {\n    const changedIds = updates.reduce((acc, updated) => {\n      const id = adapter.selectId(updated.changes as Entity);\n      if (id && id !== updated.id && state.selectedIds[updated.id] != null) {\n        acc.push(updated);\n        return acc;\n      }\n      return acc;\n    }, [] as Update<Entity>[]);\n    if (changedIds.length) {\n      const selectedIds = { ...state.selectedIds };\n      changedIds.forEach((updated) => {\n        const id = adapter.selectId(updated.changes as Entity);\n        const value = selectedIds[updated.id];\n        delete selectedIds[updated.id];\n        selectedIds[id] = value;\n      });\n      return { ...state, selectedIds };\n    }\n\n    return state;\n  }\n\n  return createReducer(\n    initialState,\n    on(allActions.multiSelect, (state, { id }) =>\n      allMutators.multiSelect(id, state),\n    ),\n    on(allActions.multiDeselect, (state, { id }) =>\n      allMutators.multiDeselect(id, state),\n    ),\n    on(allActions.multiToggleSelect, (state, { id }) =>\n      allMutators.multiToggleSelect(id, state),\n    ),\n    on(allActions.toggleSelectAll, (state) =>\n      allMutators.toggleSelectAll(state),\n    ),\n    ...insertIf<S>(allActions.remove, () =>\n      on(allActions.remove, (state, { keys }) => {\n        const selectedIds = { ...state.selectedIds };\n        keys.forEach((v: string | number) => {\n          delete selectedIds[v];\n        });\n        return { ...state, selectedIds };\n      }),\n    ),\n    ...insertIf<S>(allActions.update, () =>\n      on(allActions.update, (state, { updates }) =>\n        updateSelectedIdsChanged(state, updates),\n      ),\n    ),\n    on(allActions.multiClearSelection, (state) =>\n      allMutators.multiClearSelection(state),\n    ),\n    ...insertIf<S>(allActions.removeAll, () =>\n      on(allActions.removeAll, (state) =>\n        allMutators.multiClearSelection(state),\n      ),\n    ),\n    ...insertIf<S>(sortRemote, () =>\n      on(allActions.sort, (state) => allMutators.multiClearSelection(state)),\n    ),\n    ...insertIf<S>(allActions.filter, () =>\n      on(allActions.filter, (state) => allMutators.multiClearSelection(state)),\n    ),\n    ...insertIf<S>(!allActions.loadPageSuccess, () =>\n      on(allActions.fetchSuccess, (state) =>\n        allMutators.multiClearSelection(state),\n      ),\n    ),\n    ...insertIf<S>(\n      allActions.loadPageSuccess && paginationCacheType === 'partial',\n      () =>\n        on(allActions.loadPageSuccess, (state) =>\n          allMutators.multiClearSelection(state),\n        ),\n    ),\n  );\n}\n","import {\n  EntityAndMultipleSelectionState,\n  MultipleSelectionMutators,\n  MultipleSelectionSelectors,\n} from './multi-selection.model';\nimport { toMap } from 'ngrx-traits';\nimport {\n  multiClearSelection,\n  multiDeselect,\n  multiSelect,\n  multiToggleSelect,\n} from './multi-selection.utils';\n\nexport function createMultiSelectionTraitMutators<Entity>({\n  isAllSelected,\n}: MultipleSelectionSelectors<Entity>): MultipleSelectionMutators<Entity> {\n  function toggleSelectAll<S extends EntityAndMultipleSelectionState<Entity>>(\n    state: S,\n  ): S {\n    const allSelected = isAllSelected(state);\n    if (allSelected === 'all') {\n      return {\n        ...state,\n        selectedIds: {},\n      };\n    } else {\n      return {\n        ...state,\n        selectedIds: toMap(state.ids),\n      };\n    }\n  }\n\n  return {\n    multiDeselect,\n    multiSelect,\n    multiToggleSelect,\n    toggleSelectAll,\n    multiClearSelection,\n  };\n}\n","import { createMultiSelectionTraitActions } from './multi-selection.trait.actions';\nimport { SortActions, SortKeyedConfig } from '../sort';\nimport { createMultiSelectionTraitSelectors } from './multi-selection.trait.selectors';\nimport {\n  MultipleSelectionSelectors,\n  MultiSelectActions,\n} from './multi-selection.model';\nimport {\n  PaginationActions,\n  PaginationKeyedConfig,\n} from '../pagination/pagination.model';\nimport {\n  LoadEntitiesActions,\n  LoadEntitiesKeyedConfig,\n  LoadEntitiesSelectors,\n  loadEntitiesTraitKey,\n} from '../load-entities/load-entities.model';\nimport { createTraitFactory } from 'ngrx-traits';\nimport { CrudActions } from '../crud/crud.model';\nimport {\n  createMultiSelectionInitialState,\n  createMultiSelectionTraitReducer,\n} from './multi-selection.trait.reducer';\nimport { createMultiSelectionTraitMutators } from './multi-selection.trait.mutators';\nimport { FilterActions } from '../filter';\nimport {\n  TraitActionsFactoryConfig,\n  TraitInitialStateFactoryConfig,\n  TraitSelectorsFactoryConfig,\n  TraitStateMutatorsFactoryConfig,\n} from 'ngrx-traits';\n\nexport function addMultiSelection<Entity>() {\n  return createTraitFactory({\n    key: 'multiSelection',\n    depends: [loadEntitiesTraitKey],\n    actions: ({ actionsGroupKey }: TraitActionsFactoryConfig) =>\n      createMultiSelectionTraitActions(actionsGroupKey),\n    selectors: ({ previousSelectors }: TraitSelectorsFactoryConfig) =>\n      createMultiSelectionTraitSelectors<Entity>(\n        previousSelectors as LoadEntitiesSelectors<Entity>,\n      ),\n    initialState: ({ previousInitialState }: TraitInitialStateFactoryConfig) =>\n      createMultiSelectionInitialState<Entity>(previousInitialState),\n    mutators: ({ allSelectors }: TraitStateMutatorsFactoryConfig) =>\n      createMultiSelectionTraitMutators<Entity>(\n        allSelectors as MultipleSelectionSelectors<Entity>,\n      ),\n    reducer: ({ initialState, allActions, allMutators, allConfigs }) =>\n      createMultiSelectionTraitReducer(\n        initialState,\n        allActions as MultiSelectActions &\n          CrudActions<Entity> &\n          SortActions<Entity> &\n          LoadEntitiesActions<Entity> &\n          FilterActions<any> &\n          PaginationActions,\n        allMutators,\n        allConfigs as LoadEntitiesKeyedConfig<Entity> &\n          PaginationKeyedConfig &\n          SortKeyedConfig<Entity>,\n      ),\n  });\n}\n","import { createAction, props } from '@ngrx/store';\nimport { SingleSelectionActions } from './single-selection.model';\n\nexport function createSingleSelectionTraitActions(\n  actionsGroupKey: string,\n): SingleSelectionActions {\n  return {\n    select: createAction(\n      `${actionsGroupKey} Select`,\n      props<{ id: string | number }>(),\n    ),\n    deselect: createAction(`${actionsGroupKey} Deselect`),\n    toggleSelect: createAction(\n      `${actionsGroupKey} Toggle Select`,\n      props<{ id: string | number }>(),\n    ),\n  };\n}\n","import {\n  EntityAndSingleSelectionState,\n  SingleSelectionSelectors,\n  SingleSelectionState,\n} from './single-selection.model';\n\nexport function createSingleSelectionTraitSelectors<\n  Entity,\n>(): SingleSelectionSelectors<Entity> {\n  function selectIdSelected(state: SingleSelectionState) {\n    return state.selectedId;\n  }\n  function selectEntitySelected<Entity>(\n    state: EntityAndSingleSelectionState<Entity>,\n  ) {\n    return (state.selectedId && state.entities[state.selectedId]) || undefined;\n  }\n\n  return {\n    selectIdSelected,\n    selectEntitySelected,\n  };\n}\n","import { createReducer, on } from '@ngrx/store';\nimport {\n  LoadEntitiesActions,\n  LoadEntitiesKeyedConfig,\n} from '../load-entities/load-entities.model';\nimport { SortActions, SortKeyedConfig } from '../sort/sort.model';\nimport {\n  EntityAndSingleSelectionState,\n  SingleSelectionActions,\n  SingleSelectionKeyedConfig,\n  SingleSelectionMutators,\n} from './single-selection.model';\nimport { CrudActions } from '../crud/crud.model';\nimport { insertIf } from 'ngrx-traits';\nimport {\n  PaginationActions,\n  PaginationKeyedConfig,\n} from '../pagination/pagination.model';\nimport { FilterActions } from '../filter';\n\nexport function createSingleSelectionInitialState<Entity>(\n  previousInitialState: any,\n  allConfigs: SingleSelectionKeyedConfig,\n): EntityAndSingleSelectionState<Entity> {\n  const selectedId = allConfigs.singleSelection?.selectedId;\n  return {\n    ...previousInitialState,\n    selectedId,\n  };\n}\nexport function createSingleSelectionTraitReducer<\n  Entity,\n  S extends EntityAndSingleSelectionState<Entity>,\n>(\n  initialState: S,\n  allActions: SingleSelectionActions &\n    CrudActions<Entity> &\n    SortActions<Entity> &\n    PaginationActions &\n    FilterActions<any> &\n    LoadEntitiesActions<Entity>,\n  allMutators: SingleSelectionMutators<Entity>,\n  allConfigs: SingleSelectionKeyedConfig &\n    LoadEntitiesKeyedConfig<Entity> &\n    PaginationKeyedConfig &\n    SortKeyedConfig<Entity>,\n) {\n  const { adapter } = allConfigs.loadEntities!;\n\n  const sortRemote = allConfigs.sort?.remote;\n  const paginationCacheType = allConfigs.pagination?.cacheType;\n\n  return createReducer(\n    initialState,\n    on(allActions.select, (state, { id }) => allMutators.select(id, state)),\n    on(allActions.deselect, (state) => allMutators.deselect(state)),\n    on(allActions.toggleSelect, (state, { id }) =>\n      allMutators.toggleSelect(id, state),\n    ),\n    ...insertIf<S>(allActions.removeAll, () =>\n      on(allActions.removeAll, (state) => allMutators.deselect(state)),\n    ),\n    ...insertIf<S>(sortRemote, () =>\n      on(allActions.sort, (state) => allMutators.deselect(state)),\n    ),\n    ...insertIf<S>(allActions.filter, () =>\n      on(allActions.filter, (state) => allMutators.deselect(state)),\n    ),\n    ...insertIf<S>(!allActions.loadPageSuccess, () =>\n      on(allActions.fetchSuccess, (state) => allMutators.deselect(state)),\n    ),\n    ...insertIf<S>(\n      allActions.loadPageSuccess && paginationCacheType === 'partial',\n      () =>\n        on(allActions.loadPageSuccess, (state) => allMutators.deselect(state)),\n    ),\n    ...insertIf<S>(allActions.remove, () =>\n      on(allActions.remove, (state, { keys }) => {\n        const shouldDeselect = keys.some(\n          (v: string | number) => v === state.selectedId,\n        );\n        return shouldDeselect\n          ? {\n              ...state,\n              selectedId: undefined,\n            }\n          : state;\n      }),\n    ),\n    ...insertIf<S>(allActions.update, () =>\n      on(allActions.update, (state, { updates }) => {\n        const change = updates.find((updated) => {\n          const id = adapter.selectId(updated.changes as Entity);\n          return id && id !== updated.id && state.selectedId === updated.id;\n        });\n        return change\n          ? {\n              ...state,\n              selectedId: adapter.selectId(change.changes as Entity),\n            }\n          : state;\n      }),\n    ),\n  );\n}\n","import {\n  EntityAndSingleSelectionState,\n  SingleSelectionMutators,\n} from './single-selection.model';\n\nexport function createSingleSelectionTraitMutators<\n  Entity,\n>(): SingleSelectionMutators<Entity> {\n  function select<S extends EntityAndSingleSelectionState<Entity>>(\n    id: string | number,\n    state: S,\n  ) {\n    return {\n      ...state,\n      selectedId: id,\n    };\n  }\n  function deselect<S extends EntityAndSingleSelectionState<Entity>>(state: S) {\n    return {\n      ...state,\n      selectedId: undefined,\n    };\n  }\n  function toggleSelect<S extends EntityAndSingleSelectionState<Entity>>(\n    id: string | number,\n    state: S,\n  ) {\n    return {\n      ...state,\n      selectedId: state.selectedId === id ? undefined : id,\n    };\n  }\n\n  return {\n    select,\n    deselect,\n    toggleSelect,\n  };\n}\n","import {\n  createTraitFactory,\n  TraitActionsFactoryConfig,\n  TraitInitialStateFactoryConfig,\n} from 'ngrx-traits';\n\nimport { createSingleSelectionTraitActions } from './single-selection.trait.actions';\nimport { createSingleSelectionTraitSelectors } from './single-selection.trait.selectors';\nimport {\n  createSingleSelectionInitialState,\n  createSingleSelectionTraitReducer,\n} from './single-selection.trait.reducer';\nimport { createSingleSelectionTraitMutators } from './single-selection.trait.mutators';\nimport {\n  LoadEntitiesActions,\n  LoadEntitiesKeyedConfig,\n  loadEntitiesTraitKey,\n} from '../load-entities/load-entities.model';\nimport { SortActions, SortKeyedConfig } from '../sort/sort.model';\nimport {\n  SingleSelectionActions,\n  SingleSelectionConfig,\n  SingleSelectionKeyedConfig,\n} from './single-selection.model';\nimport { CrudActions } from '../crud/crud.model';\nimport {\n  PaginationActions,\n  PaginationKeyedConfig,\n} from '../pagination/pagination.model';\nimport { FilterActions } from '../filter';\n\nexport function addSingleSelection<Entity>(config?: SingleSelectionConfig) {\n  return createTraitFactory({\n    key: 'singleSelection',\n    depends: [loadEntitiesTraitKey],\n    config,\n    actions: ({ actionsGroupKey }: TraitActionsFactoryConfig) =>\n      createSingleSelectionTraitActions(actionsGroupKey),\n    selectors: () => createSingleSelectionTraitSelectors<Entity>(),\n    mutators: () => createSingleSelectionTraitMutators(),\n    initialState: ({\n      previousInitialState,\n      allConfigs,\n    }: TraitInitialStateFactoryConfig) =>\n      createSingleSelectionInitialState<Entity>(\n        previousInitialState,\n        allConfigs as SingleSelectionKeyedConfig,\n      ),\n    reducer: ({ initialState, allActions, allMutators, allConfigs }) =>\n      createSingleSelectionTraitReducer(\n        initialState,\n        allActions as SingleSelectionActions &\n          CrudActions<Entity> &\n          SortActions<Entity> &\n          PaginationActions &\n          FilterActions<any> &\n          LoadEntitiesActions<Entity>,\n        allMutators,\n        allConfigs as SingleSelectionKeyedConfig &\n          LoadEntitiesKeyedConfig<Entity> &\n          PaginationKeyedConfig &\n          SortKeyedConfig<Entity>,\n      ),\n  });\n}\n","import { ActionCreator, TypedAction } from '@ngrx/store/src/models';\nimport { KeyedConfig } from 'ngrx-traits';\nimport { EntityAndStatusState } from '../load-entities/load-entities.model';\n\nexport interface SingleSelectionState {\n  selectedId?: number | string;\n}\nexport interface EntityAndSingleSelectionState<T>\n  extends EntityAndStatusState<T>,\n    SingleSelectionState {}\n\nexport type SingleSelectionActions = {\n  select: ActionCreator<\n    string,\n    (props: {\n      id: number | string;\n    }) => { id: number | string } & TypedAction<string>\n  >;\n  deselect: ActionCreator<string, () => TypedAction<string>>;\n  toggleSelect: ActionCreator<\n    string,\n    (props: {\n      id: number | string;\n    }) => { id: number | string } & TypedAction<string>\n  >;\n};\n\nexport type SingleSelectionSelectors<T> = {\n  selectIdSelected: (\n    state: EntityAndSingleSelectionState<T>,\n  ) => string | number | undefined;\n  selectEntitySelected: (\n    state: EntityAndSingleSelectionState<T>,\n  ) => T | undefined;\n};\n\nexport type SingleSelectionMutators<T> = {\n  select<S extends EntityAndSingleSelectionState<T>>(\n    id: string | number,\n    state: S,\n  ): S;\n  deselect<S extends EntityAndSingleSelectionState<T>>(state: S): S;\n  toggleSelect<S extends EntityAndSingleSelectionState<T>>(\n    id: string | number,\n    state: S,\n  ): S;\n};\n\nexport interface SingleSelectionConfig {\n  selectedId?: string | number;\n}\n\nexport const singleSelectionTraitKey = 'singleSelection';\nexport type SingleSelectionKeyedConfig = KeyedConfig<\n  typeof singleSelectionTraitKey,\n  SingleSelectionConfig\n>;\n","import { Predicate, Update } from '@ngrx/entity/src/models';\nimport { EntityAndStatusState } from '../load-entities/load-entities.model';\nimport { ActionCreator } from '@ngrx/store';\nimport { TypedAction } from '@ngrx/store/src/models';\n\nexport enum ChangeType {\n  CREATED = 'c',\n  UPDATED = 'u',\n  DELETED = 'd',\n}\nexport interface Change<T> {\n  id: string | number;\n  changeType: ChangeType;\n  entityChanges?: Partial<T>;\n}\nexport interface EntityChange<T> {\n  entity: T;\n  changeType: ChangeType;\n}\nexport interface CrudState<T> {\n  changes: Change<T>[];\n}\nexport interface EntityAndCrudState<T>\n  extends EntityAndStatusState<T>,\n    CrudState<T> {}\n\nexport type CrudActions<T> = {\n  add: ActionCreator<\n    string,\n    (...entities: T[]) => { entities: T[] } & TypedAction<string>\n  >;\n  remove: ActionCreator<\n    string,\n    (\n      ...keys: string[] | number[]\n    ) => { keys: string[] | number[] } & TypedAction<string>\n  >;\n  update: ActionCreator<\n    string,\n    (...updates: Update<T>[]) => { updates: Update<T>[] } & TypedAction<string>\n  >;\n  upsert: ActionCreator<\n    string,\n    (...entities: T[]) => { entities: T[] } & TypedAction<string>\n  >;\n\n  removeAll: ActionCreator<\n    string,\n    (\n      predicate?: Predicate<T>,\n    ) => { predicate?: Predicate<T> } & TypedAction<string>\n  >;\n  clearChanges: ActionCreator<string, () => TypedAction<string>>;\n};\n\nexport type CrudSelectors<T> = {\n  selectChanges: (state: EntityAndCrudState<T>) => Change<T>[];\n  selectAllChanges: (\n    state: EntityAndCrudState<T>,\n    props: { type: ChangeType },\n  ) => EntityChange<T>[];\n  /**\n   * filters redundant changes ideal for a batch update\n   * if you add and remove the same and items this changes are remove from the list\n   * if you add and then update one or more time, the updates are discarded\n   * if you update one or more time and then remove, the updates are discarded\n   * @param state\n   */\n  selectFilteredChanges: (state: EntityAndCrudState<T>) => Change<T>[];\n  /**\n   * Returns the entities plus the kind of change\n   * @param state\n   */\n  selectAllFilteredChanges: (state: EntityAndCrudState<T>) => EntityChange<T>[];\n};\n\nexport type CrudMutators<T> = {\n  add<S extends EntityAndCrudState<T>>(entities: T[], state: S): S;\n\n  remove<S extends EntityAndCrudState<T>>(keys: string[], state: S): S;\n  remove<S extends EntityAndCrudState<T>>(keys: number[], state: S): S;\n  remove<S extends EntityAndCrudState<T>>(predicate: Predicate<T>, state: S): S;\n\n  removeAll<S extends EntityAndCrudState<T>>(state: S): S;\n\n  clearChanges<S extends EntityAndCrudState<T>>(state: S): S;\n\n  update<S extends EntityAndCrudState<T>>(updates: Update<T>[], state: S): S;\n  upsert<S extends EntityAndCrudState<T>>(entities: T[], state: S): S;\n};\n\nexport interface CrudConfig {\n  storeChanges?: boolean;\n}\nexport const crudTraitKey = 'crud';\n\nexport interface CrudKeyedConfig {\n  crud?: CrudConfig;\n}\n","import { CrudActions } from './crud.model';\nimport { createAction } from '@ngrx/store';\nimport { Predicate, Update } from '@ngrx/entity';\n\nexport function createCrudTraitActions<Entity>(\n  actionsGroupKey: string,\n): CrudActions<Entity> {\n  return {\n    add: createAction(`${actionsGroupKey} Add`, (...entities: Entity[]) => ({\n      entities,\n    })),\n    remove: createAction(\n      `${actionsGroupKey} Remove`,\n      (...keys: string[] | number[]) => ({\n        keys,\n      }),\n    ),\n    update: createAction(\n      `${actionsGroupKey} Update`,\n      (...updates: Update<Entity>[]) => ({\n        updates,\n      }),\n    ),\n    upsert: createAction(\n      `${actionsGroupKey} Upsert`,\n      (...entities: Entity[]) => ({\n        entities,\n      }),\n    ),\n    removeAll: createAction(\n      `${actionsGroupKey} Remove All`,\n      (predicate?: Predicate<Entity>) => ({ predicate }),\n    ),\n    clearChanges: createAction(`${actionsGroupKey} Clear Changes`),\n  };\n}\n","import { createSelector } from '@ngrx/store';\nimport {\n  Change,\n  ChangeType,\n  CrudSelectors,\n  CrudState,\n  EntityAndCrudState,\n  EntityChange,\n} from './crud.model';\nimport { LoadEntitiesSelectors } from '../load-entities/load-entities.model';\nimport { Dictionary } from '@ngrx/entity';\n\nexport function createCrudTraitSelectors<Entity>(\n  previousSelectors: LoadEntitiesSelectors<Entity>,\n): CrudSelectors<Entity> {\n  function selectChanges<S extends CrudState<Entity>>(state: S) {\n    return state.changes;\n  }\n\n  function selectFilteredChanges<S extends CrudState<Entity>>(state: S) {\n    const cache: { [id: string]: ChangeType[] } = {};\n    return state.changes.reduce((acc, value) => {\n      const changes = cache[value.id];\n      if (!changes) {\n        cache[value.id] = [value.changeType];\n        acc.push(value);\n        return acc;\n      }\n\n      if (value.changeType === ChangeType.UPDATED) {\n        return acc;\n      }\n\n      if (\n        value.changeType === ChangeType.DELETED &&\n        changes.includes(ChangeType.CREATED)\n      ) {\n        delete cache[value.id];\n        return acc.filter((v) => v.id !== value.id);\n      }\n\n      if (value.changeType === ChangeType.DELETED) {\n        delete cache[value.id];\n        const newAcc = acc.filter((v) => v.id !== value.id);\n        newAcc.push(value);\n        return newAcc;\n      }\n      return acc;\n    }, [] as Change<Entity>[]);\n  }\n\n  const { selectEntities } = previousSelectors;\n\n  const selectAllChanges = createSelector(\n    (state: EntityAndCrudState<Entity>) => selectEntities(state),\n    selectChanges,\n    (\n      entities: Dictionary<Entity>,\n      changed: Change<Entity>[],\n      { type }: { type: ChangeType },\n    ) => {\n      if (type)\n        return changed\n          .filter((c) => c.changeType === type)\n          .map(\n            (change) =>\n              ({\n                changeType: change.changeType,\n                entity: entities[change.id] ?? {\n                  id: change.id,\n                },\n              } as EntityChange<Entity>),\n          );\n\n      const map = changed.map(\n        (change) =>\n          ({\n            changeType: change.changeType,\n            entity: entities[change.id] ?? {\n              id: change.id,\n            },\n          } as EntityChange<Entity>),\n      );\n      return map;\n    },\n  );\n\n  const selectAllFilteredChanges = createSelector(\n    selectFilteredChanges,\n    (state: EntityAndCrudState<Entity>) => selectEntities(state),\n    (changes, entities) =>\n      changes.map((c) => {\n        return {\n          entity: entities[c.id] ?? { id: c.id },\n          changeType: c.changeType,\n        } as EntityChange<Entity>;\n      }),\n  );\n\n  return {\n    selectAllChanges,\n    selectAllFilteredChanges,\n    selectChanges,\n    selectFilteredChanges,\n  };\n}\n","import { FilterActions, FilterKeyedConfig } from '../filter/filter.model';\nimport { createReducer, on } from '@ngrx/store';\nimport {\n  CrudActions,\n  CrudKeyedConfig,\n  CrudMutators,\n  EntityAndCrudState,\n} from './crud.model';\nimport { LoadEntitiesActions, LoadEntitiesKeyedConfig } from '../load-entities';\nimport { SortActions, SortKeyedConfig } from '../sort';\nimport { PaginationActions, PaginationKeyedConfig } from '../pagination';\nimport { insertIf } from 'ngrx-traits';\n\nexport function createCrudInitialState<Entity>(\n  previousInitialState: any,\n): EntityAndCrudState<Entity> {\n  return {\n    ...previousInitialState,\n    changes: [],\n  };\n}\nexport function createCrudTraitReducer<\n  Entity,\n  S extends EntityAndCrudState<Entity>,\n>(\n  initialState: S,\n  allActions: CrudActions<Entity> &\n    LoadEntitiesActions<Entity> &\n    SortActions<Entity> &\n    FilterActions<any> &\n    PaginationActions,\n  allMutators: CrudMutators<Entity>,\n  allConfigs: CrudKeyedConfig &\n    FilterKeyedConfig<Entity, unknown> &\n    LoadEntitiesKeyedConfig<Entity> &\n    SortKeyedConfig<Entity> &\n    PaginationKeyedConfig,\n) {\n  const sortRemote = allConfigs.sort?.remote;\n  const filterRemote = allConfigs.filter && !allConfigs.filter?.filterFn;\n  const paginationCacheType = allConfigs.pagination?.cacheType;\n\n  return createReducer(\n    initialState,\n    on(allActions.add, (state, { entities }) =>\n      allMutators.add(entities, state),\n    ),\n    on(allActions.update, (state, { updates }) =>\n      allMutators.update(updates, state),\n    ),\n    on(allActions.upsert, (state, { entities }) =>\n      allMutators.upsert(entities, state),\n    ),\n    on(allActions.remove, (state, { keys }) =>\n      allMutators.remove(keys as any[], state),\n    ),\n    on(allActions.removeAll, (state, { predicate }) =>\n      predicate\n        ? allMutators.remove(predicate, state)\n        : allMutators.removeAll(state),\n    ),\n    on(allActions.clearChanges, (state) => allMutators.clearChanges(state)),\n    ...insertIf<S>(sortRemote, () =>\n      on(allActions.sort, (state) => allMutators.clearChanges(state)),\n    ),\n    ...insertIf<S>(filterRemote, () =>\n      on(allActions.filter, (state) => allMutators.clearChanges(state)),\n    ),\n    ...insertIf<S>(!allActions.loadPageSuccess, () =>\n      on(allActions.fetchSuccess, (state) => allMutators.clearChanges(state)),\n    ),\n    ...insertIf<S>(\n      allActions.loadPageSuccess && paginationCacheType === 'partial',\n      () =>\n        on(allActions.loadPageSuccess, (state) =>\n          allMutators.clearChanges(state),\n        ),\n    ),\n  );\n}\n","import {\n  Change,\n  ChangeType,\n  CrudKeyedConfig,\n  CrudMutators,\n  EntityAndCrudState,\n} from '../crud/crud.model';\nimport { Predicate, Update } from '@ngrx/entity';\nimport { LoadEntitiesKeyedConfig } from '../load-entities/load-entities.model';\n\nexport function createCrudTraitMutators<Entity>(\n  allConfigs: CrudKeyedConfig & LoadEntitiesKeyedConfig<Entity>,\n): CrudMutators<Entity> {\n  const { storeChanges } = allConfigs.crud || {};\n  const adapter = allConfigs!.loadEntities!.adapter;\n\n  function generateChangeEntry(\n    entity: Entity,\n    changeType: ChangeType,\n    customId?: string | number,\n  ) {\n    return {\n      id: customId ?? adapter.selectId(entity),\n      changeType,\n      entityChanges: (storeChanges && entity) || undefined,\n    };\n  }\n\n  function add<S extends EntityAndCrudState<Entity>>(\n    entities: Entity[],\n    state: S,\n    addFirst = false,\n  ) {\n    const changes = [\n      ...state.changes,\n      ...entities.map((entity) =>\n        generateChangeEntry(entity, ChangeType.CREATED),\n      ),\n    ];\n    if (!addFirst)\n      return adapter.addMany(entities, {\n        ...state,\n        changes,\n      });\n\n    const newIds = entities.map((e) => adapter.selectId(e));\n    const newEntities = { ...state.entities };\n    entities.forEach((e) => {\n      const id = adapter.selectId(e);\n      newEntities[id] = e;\n    });\n    return {\n      ...state,\n      ids: [...newIds, ...state.ids],\n      entities: newEntities,\n      changes,\n    };\n  }\n\n  function upsert<S extends EntityAndCrudState<Entity>>(\n    entities: Entity[],\n    state: S,\n  ) {\n    const oldChanges = [...state.changes];\n    const existingIds = adapter.getSelectors().selectIds(state) as string[];\n\n    const [additions, updates] = entities.reduce(\n      ([a, u], entity) =>\n        existingIds.indexOf(adapter.selectId(entity as Entity) as string) !== -1\n          ? [a, [...u, entity]]\n          : [[...a, entity], u],\n      [new Array<Entity>(), new Array<Entity>()],\n    );\n\n    return adapter.upsertMany(entities, {\n      ...state,\n      changes: [\n        ...oldChanges,\n\n        ...additions.map((entity) =>\n          generateChangeEntry(entity, ChangeType.CREATED),\n        ),\n        ...updates.map((entity) =>\n          generateChangeEntry(entity, ChangeType.UPDATED),\n        ),\n      ],\n    });\n  }\n\n  function remove<S extends EntityAndCrudState<Entity>>(\n    keys: number[],\n    state: S,\n  ): S;\n  function remove<S extends EntityAndCrudState<Entity>>(\n    keys: string[],\n    state: S,\n  ): S;\n  function remove<S extends EntityAndCrudState<Entity>>(\n    predicate: Predicate<Entity>,\n    state: S,\n  ): S;\n  function remove<S extends EntityAndCrudState<Entity>>(\n    keysOrPredicate: Predicate<Entity> | string[] | number[],\n    state: S,\n  ): S {\n    if (typeof keysOrPredicate === 'function') {\n      return adapter.removeMany(keysOrPredicate, {\n        ...state,\n        changes: [\n          ...state.changes,\n          ...(state.ids as any[]).map((id) => ({\n            id,\n            changeType: ChangeType.DELETED,\n          })),\n        ],\n      });\n    }\n\n    return adapter.removeMany(keysOrPredicate as string[], {\n      ...state,\n      changes: [\n        ...state.changes,\n        ...(keysOrPredicate as string[]).map((key: string) => ({\n          id: key,\n          changeType: ChangeType.DELETED,\n        })),\n      ],\n    });\n  }\n  function removeAll<S extends EntityAndCrudState<Entity>>(state: S): S {\n    return adapter.removeAll({\n      ...state,\n      changes: [\n        ...state.changes,\n        ...(state.ids as any[]).map((id) => ({\n          id,\n          changeType: ChangeType.DELETED,\n        })),\n      ],\n    });\n  }\n  function clearChanges<S extends EntityAndCrudState<Entity>>(state: S) {\n    return { ...state, changes: [] };\n  }\n\n  function update<S extends EntityAndCrudState<Entity>>(\n    updates: Update<Entity>[],\n    state: S,\n  ) {\n    const oldChanges = [...state.changes];\n    updates.forEach((updated) => {\n      const id = adapter.selectId(updated.changes as Entity);\n      if (id && id !== updated.id) {\n        // if the id changes update the id of pold changes\n        const index = oldChanges.findIndex((v) => v.id === updated.id);\n        const oldChange = oldChanges[index];\n        oldChanges[index] = { ...oldChange, id };\n      }\n    });\n    return adapter.updateMany(updates, {\n      ...state,\n      changes: [\n        ...oldChanges,\n        ...updates.map(\n          (updated) =>\n            ({\n              id: adapter.selectId(updated.changes as Entity) ?? updated.id,\n              changeType: ChangeType.UPDATED,\n              entityChanges: (storeChanges && updated.changes) || undefined,\n            } as Change<Entity>),\n        ),\n      ],\n    });\n  }\n\n  return {\n    add,\n    remove,\n    update,\n    removeAll,\n    clearChanges,\n    upsert,\n  };\n}\n","import {\n  createTraitFactory,\n  TraitActionsFactoryConfig,\n  TraitInitialStateFactoryConfig,\n  TraitSelectorsFactoryConfig,\n  TraitStateMutatorsFactoryConfig,\n} from 'ngrx-traits';\nimport { createCrudTraitActions } from '../crud/crud.trait.actions';\nimport { createCrudTraitSelectors } from '../crud/crud.trait.selectors';\nimport {\n  createCrudInitialState,\n  createCrudTraitReducer,\n} from '../crud/crud.trait.reducer';\nimport { SortActions, SortKeyedConfig } from '../sort/sort.model';\nimport {\n  CrudActions,\n  CrudConfig,\n  CrudKeyedConfig,\n  crudTraitKey,\n} from './crud.model';\nimport { FilterActions, FilterKeyedConfig } from '../filter/filter.model';\nimport {\n  LoadEntitiesActions,\n  LoadEntitiesKeyedConfig,\n  LoadEntitiesSelectors,\n  loadEntitiesTraitKey,\n} from '../load-entities/load-entities.model';\nimport {\n  PaginationActions,\n  PaginationKeyedConfig,\n} from '../pagination/pagination.model';\nimport { createCrudTraitMutators } from './crud.trait.mutators';\n\nexport function addCrudEntities<Entity>({\n  storeChanges = false,\n}: CrudConfig = {}) {\n  return createTraitFactory({\n    key: crudTraitKey,\n    depends: [loadEntitiesTraitKey],\n    config: { storeChanges } as CrudConfig,\n    actions: ({ actionsGroupKey }: TraitActionsFactoryConfig) =>\n      createCrudTraitActions<Entity>(actionsGroupKey),\n    selectors: ({ previousSelectors }: TraitSelectorsFactoryConfig) =>\n      createCrudTraitSelectors<Entity>(\n        previousSelectors as LoadEntitiesSelectors<Entity>,\n      ),\n    mutators: ({ allConfigs }: TraitStateMutatorsFactoryConfig) =>\n      createCrudTraitMutators<Entity>(\n        allConfigs as CrudKeyedConfig & LoadEntitiesKeyedConfig<Entity>,\n      ),\n    initialState: ({ previousInitialState }: TraitInitialStateFactoryConfig) =>\n      createCrudInitialState<Entity>(previousInitialState),\n    reducer: ({ initialState, allActions, allMutators, allConfigs }) =>\n      createCrudTraitReducer(\n        initialState,\n        allActions as CrudActions<Entity> &\n          LoadEntitiesActions<Entity> &\n          SortActions<Entity> &\n          FilterActions<any> &\n          PaginationActions,\n        allMutators,\n        allConfigs as CrudKeyedConfig &\n          FilterKeyedConfig<Entity, unknown> &\n          LoadEntitiesKeyedConfig<Entity> &\n          SortKeyedConfig<Entity> &\n          PaginationKeyedConfig,\n      ),\n  });\n}\n","import { EntityAndStatusState } from '../load-entities/load-entities.model';\n\nimport { ActionCreator, TypedAction } from '@ngrx/store/src/models';\nimport { KeyedConfig } from 'ngrx-traits';\n\nexport declare type SortDirection = 'asc' | 'desc' | '';\n\nexport interface Sort<T> {\n  /** The id of the column being sorted. */\n  active: keyof T;\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\nexport interface SortState<T> {\n  sort?: {\n    current: Sort<T>;\n    default: Sort<T>;\n  };\n}\nexport interface EntityAndSortState<T>\n  extends EntityAndStatusState<T>,\n    SortState<T> {}\n\nexport type SortActions<T> = {\n  sort: ActionCreator<\n    string,\n    (props: Sort<T>) => Sort<T> & TypedAction<string>\n  >;\n  resetSort: ActionCreator<string, () => TypedAction<string>>;\n};\n\nexport type SortSelectors<T> = {\n  selectSort: (state: EntityAndSortState<T>) => Sort<T> | undefined;\n};\n\nexport type SortMutators<T> = {\n  sortEntities<S extends EntityAndSortState<T>>(\n    { active, direction }: Sort<T>,\n    state: S,\n  ): S;\n};\n\nexport const sortTraitKey = 'sort';\n\nexport interface SortConfig<T> {\n  defaultSort?: Sort<T>;\n  remote?: boolean;\n}\n\nexport type SortKeyedConfig<T> = KeyedConfig<\n  typeof sortTraitKey,\n  SortConfig<T>\n>;\n","import { _isNumberValue } from '@angular/cdk/coercion';\nimport { Sort } from './sort.model';\n\nconst MAX_SAFE_INTEGER = 9007199254740991;\nfunction sortingDataAccessor<T>(\n  data: T,\n  sortHeaderId: string,\n): string | number {\n  const value = (data as { [key: string]: any })[sortHeaderId];\n\n  if (_isNumberValue(value)) {\n    const numberValue = Number(value);\n\n    // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n    // leave them as strings. For more info: https://goo.gl/y5vbSg\n    return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n  }\n\n  return value;\n}\n\n/**\n * Gets a sorted copy of the data array based on the state of the Sort.\n * @param data The array of data that should be sorted.\n * @param sort The connected MatSort that holds the current sort state.\n */\nexport function sortData<T>(data: T[], sort: Sort<T>): T[] {\n  const active = sort.active;\n  const direction = sort.direction;\n  if (!active || direction === '') {\n    return data;\n  }\n\n  return data.sort((a, b) => {\n    const valueA = sortingDataAccessor(a, active as string);\n    const valueB = sortingDataAccessor(b, active as string);\n\n    // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n    // one value exists while the other doesn't. In this case, existing value should come last.\n    // This avoids inconsistent results when comparing values to undefined/null.\n    // If neither value exists, return 0 (equal).\n    let comparatorResult = 0;\n    if (valueA != null && valueB != null) {\n      // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n\n      if (typeof valueA === 'string' || typeof valueB === 'string') {\n        // if either values are a string, then force both to be strings before localCompare\n        comparatorResult = valueA.toString().localeCompare(valueB.toString());\n      } else {\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      }\n    } else if (valueA != null) {\n      comparatorResult = 1;\n    } else if (valueB != null) {\n      comparatorResult = -1;\n    }\n\n    return comparatorResult * (direction === 'asc' ? 1 : -1);\n  });\n}\n","import {\n  LoadEntitiesKeyedConfig,\n  LoadEntitiesSelectors,\n} from '../load-entities/load-entities.model';\nimport { EntityAndSortState, Sort, SortMutators } from './sort.model';\nimport { sortData } from './sort.utils';\n\nexport function createSortTraitMutators<Entity>(\n  { selectAll }: LoadEntitiesSelectors<Entity>,\n  allConfigs: LoadEntitiesKeyedConfig<Entity>,\n): SortMutators<Entity> {\n  function sortEntities<S extends EntityAndSortState<Entity>>(\n    { active, direction }: Sort<Entity>,\n    state: S,\n  ) {\n    const { adapter } = allConfigs.loadEntities!;\n    const entities = selectAll(state);\n    const sortedIds = sortData(entities, { active, direction }).map((v) =>\n      adapter.selectId(v),\n    );\n    return {\n      ...state,\n      ids: sortedIds,\n      sort: { ...state.sort, current: { active, direction } },\n    };\n  }\n  return {\n    sortEntities,\n  };\n}\n","import { createReducer, on } from '@ngrx/store';\nimport { LoadEntitiesActions, LoadEntitiesKeyedConfig } from '../load-entities';\nimport {\n  EntityAndSortState,\n  SortActions,\n  SortKeyedConfig,\n  SortMutators,\n} from './sort.model';\n\nexport function createSortInitialState<Entity>(\n  previousInitialState: any,\n  allConfigs: SortKeyedConfig<Entity>,\n): EntityAndSortState<Entity> {\n  const { defaultSort } = allConfigs.sort!;\n\n  return {\n    ...previousInitialState,\n    sort: {\n      current: defaultSort,\n      default: defaultSort,\n    },\n  };\n}\n\nexport function createSortTraitReducer<\n  Entity,\n  S extends EntityAndSortState<Entity> = EntityAndSortState<Entity>,\n>(\n  initialState: S,\n  allActions: SortActions<Entity> & LoadEntitiesActions<Entity>,\n  allMutators: SortMutators<Entity>,\n  allConfigs: LoadEntitiesKeyedConfig<Entity> & SortKeyedConfig<Entity>,\n) {\n  const { remote } = allConfigs.sort!;\n\n  return createReducer(\n    initialState,\n    on(allActions.sort, (state, { active, direction }) =>\n      !remote\n        ? allMutators.sortEntities({ active, direction }, state)\n        : {\n            ...state,\n            sort: { ...state.sort, current: { active, direction } },\n          },\n    ),\n    on(allActions.resetSort, (state) =>\n      state.sort?.default\n        ? !remote\n          ? allMutators.sortEntities(state.sort?.default, state)\n          : {\n              ...state,\n              sort: { ...state.sort, current: state.sort?.default },\n            }\n        : state,\n    ),\n  );\n}\n","import { SortSelectors, SortState } from './sort.model';\n\nexport function createSortTraitSelectors<Entity>(): SortSelectors<Entity> {\n  function selectSort(state: SortState<Entity>) {\n    return state.sort?.current;\n  }\n  return {\n    selectSort,\n  };\n}\n","import { Injectable } from '@angular/core';\nimport { TraitEffect } from 'ngrx-traits';\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { concatMap } from 'rxjs/operators';\nimport { Type } from 'ngrx-traits';\nimport {\n  LoadEntitiesActions,\n  LoadEntitiesKeyedConfig,\n} from '../load-entities/load-entities.model';\nimport { SortActions, SortKeyedConfig } from './sort.model';\nimport { PaginationActions } from '../pagination/pagination.model';\n\nexport function createSortTraitEffect<Entity>(\n  allActions: LoadEntitiesActions<Entity> &\n    SortActions<Entity> &\n    PaginationActions,\n  allConfigs: LoadEntitiesKeyedConfig<Entity> & SortKeyedConfig<Entity>,\n): Type<TraitEffect>[] {\n  const { remote } = allConfigs.sort!;\n\n  @Injectable()\n  class SortEffect extends TraitEffect {\n    remoteSort$ = createEffect(() => {\n      return this.actions$.pipe(\n        ofType(allActions.sort, allActions.resetSort),\n        concatMap(() =>\n          allActions.loadFirstPage\n            ? [allActions.clearPagesCache(), allActions.loadFirstPage()]\n            : [allActions.fetch()],\n        ),\n      );\n    });\n  }\n  return remote ? [SortEffect] : [];\n}\n","import { createAction, props } from '@ngrx/store';\nimport { Sort, SortActions } from './sort.model';\n\nexport function createSortTraitActions<Entity>(\n  actionsGroupKey: string,\n): SortActions<Entity> {\n  return {\n    sort: createAction(`${actionsGroupKey} sort`, props<Sort<Entity>>()),\n    resetSort: createAction(`${actionsGroupKey} default sort`),\n  };\n}\n","import { createSortTraitMutators } from './sort.trait.mutators';\nimport {\n  createSortInitialState,\n  createSortTraitReducer,\n} from './sort.trait.reducer';\nimport { createSortTraitSelectors } from './sort.trait.selectors';\nimport { createSortTraitEffect } from './sort.trait.effect';\nimport {\n  SortActions,\n  SortConfig,\n  SortKeyedConfig,\n  SortSelectors,\n  sortTraitKey,\n} from './sort.model';\nimport {\n  LoadEntitiesActions,\n  LoadEntitiesKeyedConfig,\n  LoadEntitiesSelectors,\n  loadEntitiesTraitKey,\n} from '../load-entities/load-entities.model';\nimport {\n  PaginationActions,\n  PaginationKeyedConfig,\n} from '../pagination/pagination.model';\nimport { createTraitFactory } from 'ngrx-traits';\nimport { createSortTraitActions } from './sort.trait.actions';\nimport {\n  TraitActionsFactoryConfig,\n  TraitInitialStateFactoryConfig,\n  TraitStateMutatorsFactoryConfig,\n} from 'ngrx-traits';\n\nexport function addSort<Entity>({\n  remote = false,\n  defaultSort,\n}: SortConfig<Entity> = {}) {\n  return createTraitFactory({\n    key: sortTraitKey,\n    depends: [loadEntitiesTraitKey],\n    config: { remote, defaultSort } as SortConfig<Entity>,\n    actions: ({ actionsGroupKey }: TraitActionsFactoryConfig) =>\n      createSortTraitActions<Entity>(actionsGroupKey),\n    selectors: () => createSortTraitSelectors<Entity>(),\n    mutators: ({ allSelectors, allConfigs }: TraitStateMutatorsFactoryConfig) =>\n      createSortTraitMutators<Entity>(\n        allSelectors as SortSelectors<Entity> & LoadEntitiesSelectors<Entity>,\n        allConfigs,\n      ),\n    initialState: ({\n      previousInitialState,\n      allConfigs,\n    }: TraitInitialStateFactoryConfig) =>\n      createSortInitialState<Entity>(previousInitialState, allConfigs),\n    reducer: ({ initialState, allActions, allMutators, allConfigs }) =>\n      createSortTraitReducer<Entity>(\n        initialState,\n        allActions as SortActions<Entity> & LoadEntitiesActions<Entity>,\n        allMutators,\n        allConfigs as LoadEntitiesKeyedConfig<Entity> &\n          PaginationKeyedConfig &\n          SortKeyedConfig<Entity>,\n      ),\n    effects: ({ allActions, allConfigs }) =>\n      createSortTraitEffect(\n        allActions as LoadEntitiesActions<Entity> &\n          SortActions<Entity> &\n          PaginationActions,\n        allConfigs as LoadEntitiesKeyedConfig<Entity> & SortKeyedConfig<Entity>,\n      ),\n  });\n}\n","import { createTraitFactory } from 'ngrx-traits';\nimport { GenericActionCreator } from '../load-entities';\nimport { TraitActionsFactoryConfig } from 'ngrx-traits';\nimport { createAction, createReducer, on } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport { TraitEffect } from 'ngrx-traits';\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { mapTo } from 'rxjs/operators';\n\nexport function addReset(\n  traitConfig: {\n    resetOn?: GenericActionCreator[];\n  } = {},\n) {\n  return createTraitFactory({\n    key: 'reset',\n    config: traitConfig,\n    actions: ({ actionsGroupKey }: TraitActionsFactoryConfig) => ({\n      reset: createAction(`${actionsGroupKey} Reset State`),\n    }),\n    reducer: ({ allActions, initialState }) =>\n      createReducer(\n        initialState,\n        on(allActions.reset, () => initialState),\n      ),\n    effects: ({ allActions }) => {\n      @Injectable()\n      class ResetEffect extends TraitEffect {\n        externalReset$ =\n          traitConfig?.resetOn?.length &&\n          createEffect(() => {\n            return this.actions$.pipe(\n              ofType(...traitConfig?.resetOn),\n              mapTo(allActions.reset()),\n            );\n          });\n      }\n      return traitConfig?.resetOn?.length ? [ResetEffect] : [];\n    },\n  });\n}\n","import { createAction, createReducer, on } from '@ngrx/store';\nimport { ActionCreatorProps } from '@ngrx/store/src/models';\nimport { createTraitFactory } from 'ngrx-traits';\nimport {\n  ActionCreatorWithOptionalProps,\n  AsyncActionActions,\n  AsyncActionSelectors,\n  AsyncActionState,\n} from './async-action.model';\nimport {\n  TraitActionsFactoryConfig,\n  TraitInitialStateFactoryConfig,\n} from 'ngrx-traits';\n\n/**\n * Generates the typical ngrx code need to make a async action with\n * a request, success and failure actions, plus a status property to track its progress\n * and selectors to query the status.\n *\n * @param options - Config object for the trait factory\n * @param options.name - Name of the main request action, should be in camel case\n * @param options.actionProps - Optional param for the main request action, use the props()\n * function for its value, if not present action will have no params,\n * @param options.actionSuccessProps - Optional param for the request success action,\n * use the props() function for its value, if not present action success will have no params\n * @param options.actionFailProps - Optional param for the request fail action,\n * use the props() function for its value, if not present action fail will have no params\n * @returns the trait factory\n *\n * @example\n * // The following trait config\n * const traits = createEntityFeatureFactory(\n * addAsyncAction({\n *        name: 'createClient',\n *        actionProps: props<{ name: string }>(),\n *        actionSuccessProps: props<{ id: string }>(),\n *      }),\n * )({\n *      actionsGroupKey: 'Client',\n *      featureSelector: createFeatureSelector<AsyncActionState<'createClient'>>(\n *        'client',\n *      ),\n *    });\n * // will generate the actions and selectors\n * traits.actions.createClient({name:'Pedro'})\n * traits.actions.createClientSuccess({id:'123'})\n * traits.actions.createClientFail();\n * traits.selectors.isLoadingCreateClient\n * traits.selectors.isSuccessCreateClient\n * traits.selectors.isFailCreateClient\n */\nexport function addAsyncAction<\n  J extends string,\n  Request extends object | undefined = undefined,\n  Response extends object | undefined = undefined,\n  Failure extends object | undefined = undefined,\n>({\n  name,\n  actionProps,\n  actionSuccessProps,\n  actionFailProps,\n}: {\n  name: J;\n  actionProps?: ActionCreatorProps<Request>;\n  actionSuccessProps?: ActionCreatorProps<Response>;\n  actionFailProps?: ActionCreatorProps<Failure>;\n}) {\n  const nameAsSentence = camelCaseToSentence(name);\n\n  let internalActions: AsyncActionActions<\n    Request,\n    Response,\n    Failure,\n    'request'\n  >;\n  return createTraitFactory({\n    key: name + '-call',\n    config: {\n      name,\n      actionProps,\n      actionSuccessProps,\n      actionFailProps,\n    },\n    actions: ({\n      actionsGroupKey,\n    }: TraitActionsFactoryConfig): AsyncActionActions<\n      Request,\n      Response,\n      Failure,\n      J\n    > => {\n      internalActions = {\n        request: (actionProps\n          ? createAction(\n              `${actionsGroupKey} ${nameAsSentence}`,\n              actionProps as any,\n            )\n          : createAction(\n              `${actionsGroupKey} ${nameAsSentence}`,\n            )) as ActionCreatorWithOptionalProps<Request>,\n        requestSuccess: (actionSuccessProps\n          ? createAction(\n              `${actionsGroupKey} ${nameAsSentence} Success`,\n              actionSuccessProps as any,\n            )\n          : createAction(\n              `${actionsGroupKey} ${nameAsSentence} Success`,\n            )) as ActionCreatorWithOptionalProps<Response>,\n        requestFail: (actionFailProps\n          ? createAction(\n              `${actionsGroupKey} ${nameAsSentence} Failure`,\n              actionFailProps as any,\n            )\n          : createAction(\n              `${actionsGroupKey} ${nameAsSentence} Failure`,\n            )) as ActionCreatorWithOptionalProps<Failure>,\n      };\n      if (name) {\n        return {\n          [`${name}`]: internalActions.request,\n          [`${name}Success`]: internalActions.requestSuccess,\n          [`${name}Fail`]: internalActions.requestFail,\n        } as AsyncActionActions<Request, Response, Failure, J>;\n      }\n      return internalActions;\n    },\n    selectors: () => {\n      function isLoadingEntity<S extends AsyncActionState<J>>(state: S) {\n        return (state as any)[`${name}Status`] === 'loading';\n      }\n      function isSuccessEntity<S extends AsyncActionState<J>>(state: S) {\n        return (state as any)[`${name}Status`] === 'success';\n      }\n      function isFailEntity<S extends AsyncActionState<J>>(state: S) {\n        return (state as any)[`${name}Status`] === 'fail';\n      }\n      const capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\n      return {\n        [`isLoading${capitalizedName}`]: isLoadingEntity,\n        [`isSuccess${capitalizedName}`]: isSuccessEntity,\n        [`isFail${capitalizedName}`]: isFailEntity,\n      } as AsyncActionSelectors<J, AsyncActionState<J>>;\n    },\n    initialState: ({ previousInitialState }: TraitInitialStateFactoryConfig) =>\n      previousInitialState as AsyncActionState<J>,\n    reducer: ({ initialState }) => {\n      return createReducer(\n        initialState,\n        on(\n          internalActions.request,\n          (state) =>\n            ({\n              ...state,\n              [`${name}Status`]: 'loading',\n            } as AsyncActionState<J>),\n        ),\n        on(\n          internalActions.requestFail,\n          (state) =>\n            ({\n              ...state,\n              [`${name}Status`]: 'fail',\n            } as AsyncActionState<J>),\n        ),\n        on(\n          internalActions.requestSuccess,\n          (state) =>\n            ({\n              ...state,\n              [`${name}Status`]: 'success',\n            } as AsyncActionState<J>),\n        ),\n      );\n    },\n  });\n}\n\nfunction camelCaseToSentence(text: string) {\n  const result = text.replace(/([A-Z])/g, ' $1');\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n","import { ActionCreatorProps } from '@ngrx/store/src/models';\nimport { createTraitFactory } from 'ngrx-traits';\nimport { createReducer, on } from '@ngrx/store';\n\nimport { addAsyncAction } from '../async-action/async-action.trait';\nimport { LoadEntitySelectors, LoadEntityState } from './load-entity.model';\nimport { TraitInitialStateFactoryConfig } from 'ngrx-traits';\n\ntype RecordEntity<T> = T extends Record<string, infer J> ? J : never;\n\n/**\n * Generates ngrx code needed to load and entity and store it in a state\n * @param entityName - Entity name, should be in camel case\n * @param options.actionProps - Optional param for the main request action,\n * use the props() function for its value, if not present action will have no params,\n * @param options.actionSuccessProps - Optional param for the request success\n * action, use the props() function for its value, if not present action success will have no params\n * @param options.actionFailProps - Optional param for the request fail action,\n * use the props() function for its value, if not present action fail will have no params\n * @returns the trait factory\n *\n * @example\n * const traits = createEntityFeatureFactory(\n * ...addLoadEntity({\n *        entityName: 'client',\n *        requestProps: props<{ id: string }>(),\n *        responseProps: props<{ client: Client }>(),\n *      }),\n * )({\n *      actionsGroupKey: 'Client',\n *      featureSelector: createFeatureSelector<\n *        LoadEntityState<Client, 'client'>\n *        >('client'),\n *    });\n *\n * // will generate\n * traits.actions.loadClient({id:123});\n * traits.actions.loadClientSuccess({client: {id: '123', name: 'gabs'}});\n * traits.actions.loadClientFail();\n * traits.selectors.selectClient\n * traits.selectors.isLoadingLoadClient\n * traits.selectors.isSuccessLoadClient\n * traits.selectors.isFailLoadClient\n */\nexport function addLoadEntity<\n  J extends string,\n  Request extends object | undefined = undefined,\n  Response extends Record<J, any> | undefined = undefined,\n  Failure extends object | undefined = undefined,\n  Entity = RecordEntity<Response>,\n  State = LoadEntityState<Entity, J>,\n>({\n  entityName,\n  actionProps,\n  actionSuccessProps,\n  actionFailProps,\n}: {\n  entityName: J;\n  actionProps?: ActionCreatorProps<Request>;\n  actionSuccessProps?: ActionCreatorProps<Response>;\n  actionFailProps?: ActionCreatorProps<Failure>;\n}) {\n  const capitalizedName =\n    entityName.charAt(0).toUpperCase() + entityName.slice(1);\n\n  type K = `load${Capitalize<J & string>}`;\n\n  return [\n    addAsyncAction<K, Request, Response, Failure>({\n      name: ('load' + capitalizedName) as K,\n      actionProps,\n      actionSuccessProps,\n      actionFailProps,\n    }),\n    createTraitFactory({\n      key: `load${capitalizedName}`,\n      config: { entityName, actionProps, actionSuccessProps, actionFailProps },\n      selectors: () => {\n        function selectEntity(state: State) {\n          return (state as any)[`${entityName}`] as Entity;\n        }\n\n        return {\n          [`select${capitalizedName}`]: selectEntity,\n        } as LoadEntitySelectors<Entity, J>;\n      },\n      initialState: ({\n        previousInitialState,\n      }: TraitInitialStateFactoryConfig) => previousInitialState as State,\n      reducer: ({ initialState, allActions }) => {\n        return createReducer(\n          initialState,\n          on(\n            (allActions as any)[`load${capitalizedName}Success`],\n            (state: any, action: any) => ({\n              ...state,\n              [entityName]: action[entityName],\n            }),\n          ),\n        );\n      },\n    }),\n  ] as const;\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":";;;;;;;;;;MAgDa,oBAAoB,GAAG;;SCrCpB,8BAA8B,CAC5C,oBAAoB,GAAG,EAAE,EACzB,UAA2C;IAE3C,MAAM,WAAW,GAAG,UAAU,CAAC,YAAY,CAAC;IAC5C,MAAM,OAAO,GAAG,WAAY,CAAC,OAAO,CAAC;IAErC,qDACK,oBAAoB,GACpB,OAAQ,CAAC,eAAe,EAAE,KAC7B,MAAM,EAAE,SAAS,IACjB;AACJ,CAAC;SAEe,8BAA8B,CAI5C,YAAe,EACf,OAA+B,EAC/B,WAAoC,EACpC,UAA8D;IAE9D,MAAM,mBAAmB,GAAG,EAAC,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,UAAU,CAAA,CAAC;IAEpD,OAAO,aAAa,CAClB,YAAY,EACZ,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,KAAK,sCACnB,KAAK,KACR,MAAM,EAAE,SAAS,IACjB,CAAC,EACH,EAAE,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,KAAK,sCACvB,KAAK,KACR,MAAM,EAAE,MAAM,IACd,CAAC,EACH,EAAE,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC,KAAK,sCAC1B,KAAK,KACR,MAAM,EAAE,SAAS,IACjB,CAAC,EACH,GAAG,QAAQ,CAAI,mBAAmB,EAAE,MAClC,EAAE,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC,KAAK,EAAE,EAAE,QAAQ,EAAE,KAC3C,WAAW,CAAC,MAAM,CAAC,QAAQ,oBACtB,KAAK,EACR,CACH,CACF,CACF,CAAC;AACJ;;SCpDgB,+BAA+B,CAC7C,UAAmE;;IAEnE,MAAM,OAAO,SAAG,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,YAAY,0CAAE,OAAO,CAAC;IAElD,OAAO;QACL,MAAM,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM;KACQ,CAAC;AACpC;;SCXgB,8BAA8B,CAC5C,eAAuB;IAEvB,MAAM,OAAO,GAAG;QACd,KAAK,EAAE,YAAY,CAAC,GAAG,eAAe,iBAAiB,CAAC;QACxD,YAAY,EAAE,YAAY,CACxB,GAAG,eAAe,yBAAyB,EAC3C,KAAK,EAA0C,CAChD;QACD,SAAS,EAAE,YAAY,CACrB,GAAG,eAAe,sBAAsB,EACxC,KAAK,EAAsB,CAC5B;KACF,CAAC;IAEF,OAAO,OAAO,CAAC;AACjB;;SCjBgB,SAAS,CAAwB,KAAQ;IACvD,OAAO,KAAK,CAAC,MAAM,KAAK,SAAS,CAAC;AACpC,CAAC;SACe,SAAS,CAAwB,KAAQ;IACvD,OAAO,KAAK,CAAC,MAAM,KAAK,SAAS,CAAC;AACpC,CAAC;SACe,MAAM,CAAwB,KAAQ;IACpD,OAAO,KAAK,CAAC,MAAM,KAAK,MAAM,CAAC;AACjC;;SCTgB,YAAY,CAC1B,KAAsC;IAEtC,OAAO,KAAK,CAAC,OAAO,CAAC;AACvB,CAAC;SAEe,0BAA0B;IAIxC,OAAO;QACL,YAAY;KACb,CAAC;AACJ;;SCJgB,gCAAgC,CAC9C,UACoC;;IAEpC,MAAM,OAAO,SAAG,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,YAAY,0CAAE,OAAO,CAAC;IAClD,MAAM,eAAe,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,YAAY,EAAE,CAAC;IAEhD,MAAM,cAAc,SAAG,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,MAAM,0CAAE,QAAQ,CAAC;IACpD,IAAI,SAAS,GAAG,eAAe,CAAC;IAChC,IAAI,cAAc,IAAI,eAAe,EAAE;QACrC,MAAM,SAAS,GAAG,cAAc,CAC9B,eAAe,CAAC,SAAS,EACzB,YAAY,EACZ,CAAC,QAAQ,EAAE,OAAO,KAChB,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,cAAc,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,GAAG,QAAQ,CAC1E,CAAC;QAEF,SAAS,GAAG;YACV,SAAS;YACT,cAAc,EAAE,cAAc,CAC5B,eAAe,CAAC,cAAc,EAC9B,YAAY,EACZ,CAAC,QAAQ,EAAE,OAAO;gBAChB,MAAM,MAAM,GAAuB,EAAE,CAAC;gBACtC,KAAK,MAAM,EAAE,IAAI,QAAQ,EAAE;oBACzB,MAAM,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;oBACvB,IAAI,cAAc,CAAC,OAAO,EAAE,CAAE,CAAC,EAAE;wBAC/B,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;qBAChB;iBACF;gBACD,OAAO,MAAM,CAAC;aACf,CACF;YACD,WAAW,EAAE,cAAc,CAAC,SAAS,EAAE,CAAC,QAAQ,KAAK,QAAQ,CAAC,MAAM,CAAC;YACrE,SAAS,EAAE,cAAc,CACvB,SAAS,EACT,CAAC,QAAQ,KACP,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,CAAC,CAAC,CAAC,CAAwB,CACnE;SACF,CAAC;KACH;IACD,OAAO,gCACF,SAAS,KACZ,MAAM;QACN,SAAS;QACT,SAAS,GACuB,CAAC;AACrC;;SClCgB,eAAe,CAC7B,WAAyD;IAEzD,MAAM,OAAO,GAA0B,mBAAmB,CAAC,WAAW,CAAC,CAAC;IAExE,OAAO,kBAAkB,CAAC;QACxB,GAAG,EAAE,oBAAoB;QACzB,MAAM,EAAE,gCAAK,WAAW,KAAE,OAAO,GAAgC;QACjE,OAAO,EAAE,CAAC,EAAE,eAAe,EAA6B,KACtD,8BAA8B,CAAS,eAAe,CAAC;QACzD,SAAS,EAAE,CAAC,EAAE,UAAU,EAA+B,KACrD,gCAAgC,CAC9B,UAAqE,CACtE;QACH,QAAQ,EAAE,CAAC,EAAE,UAAU,EAAmC,KACxD,+BAA+B,CAC7B,UAAqE,CACtE;QACH,YAAY,EAAE,CAAC,EACb,oBAAoB,EACpB,UAAU,GACqB,KAC/B,8BAA8B,CAAS,oBAAoB,EAAE,UAAU,CAAC;QAC1E,OAAO,EAAE,CAAC,EAAE,YAAY,EAAE,UAAU,EAAE,WAAW,EAAE,UAAU,EAAE,KAC7D,8BAA8B,CAC5B,YAAY,EACZ,UAAU,EACV,WAAW,EACX,UAAqE,CACtE;KACJ,CAAC,CAAC;AACL;;MCwCa,kBAAkB,GAAG;;SC1ElB,wBAAwB,CACtC,UAEmB,EACnB,YAAwE,EACxE,UAAwC;IAExC,MAAM,WAAW,GAAG,UAAU,CAAC,MAAM,CAAC;IACtC,MACM,YAAa,SAAQ,WAAW;QADtC;;YAEE,iBAAY,GAAG,YAAY,CACzB,MACE,CAAC,EACC,QAAQ,EAAE,YAAY,GAAG,WAAY,CAAC,mBAAmB,EACzD,SAAS,GAAG,cAAc,MACxB,EAAE,KACJ,IAAI,CAAC,QAAQ,CAAC,IAAI,CAChB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,EACzB,QAAQ,CAAC,CAAC,KAAK,KACb,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,SAAS,IAAG,KAAK,GAAG,KAAK,CAAC,YAAY,EAAE,SAAS,CAAC,CAC1D,EACD,SAAS,CAAC,CAAC,OAAO,KAChB,OAAO,CAAC,KAAK;kBACT,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,IAAI,CAC/C,KAAK,EAAE,EACP,GAAG,CAAC,CAAC,aAAa,sCACb,OAAO,KACV,OAAO,kCAAO,aAAa,GAAK,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,KAChD,CAAC,CACJ;kBACD,EAAE,CAAC,OAAO,CAAC,CAChB,EACD,oBAAoB,CAClB,CAAC,QAAQ,EAAE,OAAO,KAChB,EAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAA;gBACnB,IAAI,CAAC,SAAS,CAAC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,OAAO,CAAC;oBAC/B,IAAI,CAAC,SAAS,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,CAAC,CACrC,EACD,GAAG,CAAC,CAAC,MAAM,KACT,UAAU,CAAC,WAAW,CAAC;gBACrB,OAAO,EAAE,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO;gBACxB,KAAK,EAAE,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,KAAK;aACrB,CAAC,CACH,CACF,CACN,CAAC;YAEF,WAAM,GACJ,EAAC,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,QAAQ,CAAA;gBACtB,YAAY,CAAC;oBACX,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CACvB,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,EACjC,SAAS,CAAC,MACR,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,aAAa,IACrB,CAAC,UAAU,CAAC,eAAe,EAAE,EAAE,UAAU,CAAC,aAAa,EAAE,CAAC;0BAC1D,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,CACzB,CACF,CAAC;iBACH,CAAC,CAAC;SACN;;;gBAnDA,UAAU;;IAqDX,OAAO,CAAC,YAAY,CAAC,CAAC;AACxB;;SCzEgB,wBAAwB,CACtC,oBAAyB,EACzB,UAAwC;;IAExC,uCACK,oBAAoB,KACvB,OAAO,QAAE,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,MAAM,0CAAE,aAAa,IAC1C;AACJ,CAAC;SAEe,wBAAwB,CAKtC,YAAe,EACf,UAAsD,EACtD,WAAiC;IAEjC,OAAO,aAAa,CAClB,YAAY,EACZ,EAAE,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,KAC5C,WAAW,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,CAAC,CACvC,CACF,CAAC;AACJ;;MCUa,cAAc,GAAG;;SC1Cd,yBAAyB;IAIvC,SAAS,UAAU,CACjB,OAAU,EACV,KAAQ;QAER,uCACK,KAAK,KACR,OAAO,IACP;KACH;IACD,OAAO,EAAE,UAAU,EAAE,CAAC;AACxB;;SCXgB,wBAAwB,CACtC,eAAuB;IAEvB,MAAM,OAAO,GAAsB;QACjC,MAAM,EAAE,YAAY,CAClB,GAAG,eAAe,SAAS,EAC3B,CAAC,KAIA,MAAM;YACL,OAAO,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO;YACvB,SAAS,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,SAAS;YAC3B,KAAK,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,KAAK;SACpB,CAAC,CAC+C;QACnD,WAAW,EAAE,YAAY,CACvB,GAAG,eAAe,eAAe,EACjC,CAAC,KAAuC,MAAM;YAC5C,OAAO,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO;YACvB,KAAK,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,KAAK;SACpB,CAAC,CACH;KACF,CAAC;IACF,OAAO,OAAO,CAAC;AACjB;;SCAgB,SAAS,CAAY,EACnC,mBAAmB,GAAG,GAAG,EACzB,aAAa,EACb,QAAQ,MACmB,EAAE;IAC7B,OAAO,kBAAkB,CAAC;QACxB,GAAG,EAAE,cAAc;QACnB,OAAO,EAAE,CAAC,kBAAkB,EAAE,oBAAoB,CAAC;QACnD,MAAM,EAAE,EAAE,mBAAmB,EAAE,aAAa,EAAE,QAAQ,EAGrD;QACD,OAAO,EAAE,CAAC,EAAE,eAAe,EAA6B,KACtD,wBAAwB,CAAI,eAAe,CAAC;QAC9C,SAAS,EAAE,MAAM,0BAA0B,EAAa;QACxD,QAAQ,EAAE,MAAM,yBAAyB,EAAa;QACtD,YAAY,EAAE,CAAC,EACb,oBAAoB,EACpB,UAAU,GACqB,KAC/B,wBAAwB,CACtB,oBAAoB,EACpB,UAA0C,CAC3C;QACH,OAAO,EAAE,CAAC,EAAE,YAAY,EAAE,UAAU,EAAE,WAAW,EAAE,KACjD,wBAAwB,CACtB,YAAY,EACZ,UAA6D,EAC7D,WAAW,CACZ;QACH,OAAO,EAAE,CAAC,EAAE,UAAU,EAAE,YAAY,EAAE,UAAU,EAAE,KAChD,wBAAwB,CACtB,UAEmB,EACnB,YAC+B,EAC/B,UAAU,CACX;KACJ,CAAC,CAAC;AACL;;SC7DgB,8BAA8B,CAC5C,iBAAgD,EAChD,UAA8C;;IAE9C,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,iBAAiB,CAAC;IAEnD,MAAM,cAAc,SAAG,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,MAAM,0CAAE,QAAQ,CAAC;IAEpD,SAAS,gBAAgB,CAAC,KAAuC;QAC/D,OAAO,KAAK,CAAC,UAAU,CAAC;KACzB;IACD,MAAM,wBAAwB,GAEO,cAAc;UAC/C,cAAc,CAAC,SAAS,EAAE,gBAAgB,EAAE,CAAC,QAAQ,EAAE,UAAU;YAC/D,uCACK,UAAU,KACb,KAAK,EAAE,QAAQ,CAAC,MAAM,EACtB,KAAK,kCACA,UAAU,CAAC,KAAK,KACnB,KAAK,EAAE,CAAC,EACR,GAAG,EAAE,QAAQ,CAAC,MAAM,OAEtB;SACH,CAAC;UACF,gBAAgB,CAAC;IAErB,MAAM,kBAAkB,GAAG,cAAc,CACvC,SAAS,EACT,wBAAwB,EACxB,CACE,QAAkB,EAClB,UAAU,EACV,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,CAAC,WAAW,EAAE;QAE3C,MAAM,UAAU,GAAG,IAAI,GAAG,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC;QACvE,IAAI,QAAQ,GAAG,UAAU,GAAG,UAAU,CAAC,QAAQ,CAAC;QAChD,QAAQ;YACN,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,GAAG,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC;QACpE,OAAO,QAAQ,CAAC,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;KAC7C,CACF,CAAC;IAEF,MAAM,cAAc,GAAG,cAAc,CACnC,wBAAwB,EACxB,CAAC,UAAU;QACT,MAAM,UAAU,GACd,UAAU,CAAC,KAAK,IAAI,UAAU,CAAC,KAAK,GAAG,CAAC;cACpC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,QAAQ,CAAC;cACjD,SAAS,CAAC;QAChB,OAAO;YACL,SAAS,EAAE,UAAU,CAAC,WAAW;YACjC,KAAK,EAAE,UAAU,CAAC,KAAK;YACvB,QAAQ,EAAE,UAAU,CAAC,QAAQ;YAC7B,UAAU;YACV,WAAW,EAAE,UAAU,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC;YAC5C,OAAO,EACL,UAAU,CAAC,KAAK,IAAI,UAAU,CAAC,KAAK,GAAG,CAAC;kBACpC,UAAU,CAAC,WAAW,GAAG,CAAC,GAAG,UAAW;kBACxC,IAAI;YACV,SAAS,EAAE,UAAU,CAAC,KAAK,CAAC,IAAI;SACjC,CAAC;KACH,CACF,CAAC;IAEF,MAAM,aAAa,GAAG,cAAc,CAClC,wBAAwB,EACxB,CAAC,UAAU,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,CAAC,WAAW,EAAE;QACtD,MAAM,UAAU,GAAG,IAAI,GAAG,UAAU,CAAC,QAAQ,CAAC;QAC9C,IAAI,QAAQ,GAAG,UAAU,GAAG,UAAU,CAAC,QAAQ,GAAG,CAAC,CAAC;QACpD,QAAQ;YACN,UAAU,CAAC,KAAK,IAAI,QAAQ,GAAG,UAAU,CAAC,KAAK;kBAC3C,UAAU,CAAC,KAAK,GAAG,CAAC;kBACpB,QAAQ,CAAC;QACf,QACE,UAAU,IAAI,UAAU,CAAC,KAAK,CAAC,KAAK,IAAI,QAAQ,IAAI,UAAU,CAAC,KAAK,CAAC,GAAG,EACxE;KACH,CACF,CAAC;IAEF,MAAM,UAAU,GAAG,cAAc,CAC/B,kBAAkB,EAClB,cAAc;;;IAGd,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,GAAG,EAAE,IAAI,EAAE,QAAQ,CAAC,SAAS,EAAE,sBACvD,QAAQ,IACL,QAAQ,EACX,CACH,CAAC;IAEF,MAAM,kBAAkB,GAAG,cAAc,CAAC,gBAAgB,EAAE,CAAC,UAAU,MAAM;QAC3E,UAAU,EAAE,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,WAAW;QACxD,IAAI,EAAE,UAAU,CAAC,QAAQ,GAAG,UAAU,CAAC,YAAY;QACnD,IAAI,EAAE,UAAU,CAAC,WAAW;KAC7B,CAAC,CAAC,CAAC;IAEJ,MAAM,aAAa,GAAG,cAAc,CAClC,SAAS,EACT,gBAAgB,EAChB,CAAC,SAAS,EAAE,UAAU,KACpB,SAAS,IAAI,UAAU,CAAC,WAAW,KAAK,UAAU,CAAC,WAAW,CACjE,CAAC;IAEF,OAAO;QACL,kBAAkB;QAClB,aAAa;QACb,UAAU;QACV,kBAAkB;QAClB,cAAc;QACd,aAAa;KACd,CAAC;AACJ;;SCrHgB,4BAA4B,CAC1C,eAAuB;IAEvB,MAAM,OAAO,GAAuB;QAClC,QAAQ,EAAE,YAAY,CACpB,GAAG,eAAe,YAAY,EAC9B,CAAC,EAAE,KAAK,EAAE,SAAS,EAA0C,MAAM;YACjE,KAAK;YACL,SAAS;SACV,CAAC,CACH;QACD,eAAe,EAAE,YAAY,CAC3B,GAAG,eAAe;uBACD,CAClB;QACD,YAAY,EAAE,YAAY,CAAC,GAAG,eAAe,iBAAiB,CAAC;QAC/D,gBAAgB,EAAE,YAAY,CAAC,GAAG,eAAe,qBAAqB,CAAC;QACvE,YAAY,EAAE,YAAY,CAAC,GAAG,eAAe,iBAAiB,CAAC;QAC/D,aAAa,EAAE,YAAY,CACzB,GAAG,eAAe,kBAAkB,EACpC,CAAC,SAAmB,MAAM,EAAE,SAAS,EAAE,CAAC,CACzC;QACD,YAAY,EAAE,YAAY,CAAC,GAAG,eAAe,iBAAiB,CAAC;QAC/D,eAAe,EAAE,YAAY,CAAC,GAAG,eAAe,cAAc,CAAC;QAC/D,cAAc,EAAE,YAAY,CAC1B,GAAG,eAAe,mBAAmB,EACrC,KAAK,EAAqB,CAC3B;KACF,CAAC;IACF,OAAO,OAAO,CAAC;AACjB;;SChBgB,4BAA4B,CAC1C,oBAAyB,EACzB,UAAiC;IAEjC,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,SAAS,EAAE,YAAY,EAAE,GACtD,UAAU,CAAC,UAAW,CAAC;IAEzB,uCACK,oBAAoB,KACvB,UAAU,EAAE;YACV,QAAQ;YACR,WAAW;YACX,WAAW,EAAE,WAAW;YACxB,YAAY;YACZ,KAAK,EAAE;gBACL,IAAI,EAAE,SAAS;gBACf,KAAK,EAAE,CAAC;gBACR,GAAG,EAAE,CAAC;aACP;SACF,IACD;AACJ,CAAC;SAEe,4BAA4B,CAI1C,YAAe,EACf,UAGqB,EACrB,YAA2C,EAC3C,WAAsE,EACtE,UAEuB;;IAEvB,SAAS,eAAe,CACtB,KAAQ,EACR,GAAW;;QAEX,uCACK,KAAK,KACR,UAAU,kCACL,KAAK,CAAC,UAAU,KACnB,KAAK,EAAE,OAAC,KAAK,CAAC,UAAU,CAAC,KAAK,mCAAI,CAAC,IAAI,GAAG,OAE5C;KACH;IAED,SAAS,eAAe,CACtB,KAAQ;QAER,uCACK,KAAK,KACR,QAAQ,EAAE,EAAE,EACZ,GAAG,EAAE,EAAE,EACP,UAAU,kCACL,KAAK,CAAC,UAAU,KACnB,WAAW,EAAE,CAAC,EACd,KAAK,EAAE,CAAC,EACR,KAAK,kCAAO,KAAK,CAAC,UAAU,CAAC,KAAK,KAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,UAEtD;KACH;IAED,SAAS,gBAAgB,CACvB,KAAQ;QAER,MAAM,KAAK,GAAG,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC9C,uCACK,KAAK,KACR,MAAM,EAAE,SAAS,EACjB,UAAU,kCACL,KAAK,CAAC,UAAU,KACnB,WAAW,EAAE,CAAC,EACd,KAAK,EACL,KAAK,kCACA,KAAK,CAAC,UAAU,CAAC,KAAK,KACzB,KAAK,EAAE,CAAC,EACR,GAAG,EAAE,KAAK,UAGd;KACH;IAED,MAAM,YAAY,GAAG,QAAC,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,MAAM,0CAAE,QAAQ,CAAA,CAAC;IAEnD,OAAO,aAAa,CAClB,YAAY,EACZ,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,sCACpC,KAAK,KACR,UAAU,kCACL,KAAK,CAAC,UAAU,KACnB,WAAW,EAAE,KAAK,EAClB,WAAW,EAAE,KAAK,KAEpB,MAAM,EAAE,SAAS,IACjB,CAAC,EACH,EAAE,CAAC,UAAU,CAAC,cAAc,EAAE,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,sCAC1C,KAAK,KACR,UAAU,kCACL,KAAK,CAAC,UAAU,KACnB,WAAW,EAAE,KAAK,KAEpB,MAAM,EAAE,SAAS,IACjB,CAAC,EACH,EAAE,CAAC,UAAU,CAAC,eAAe,EAAE,CAAC,KAAK,sCAChC,KAAK,KACR,MAAM,EAAE,SAAS,IACjB,CAAC,EACH,EAAE,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC,KAAK,sCAC7B,KAAK,KACR,MAAM,EAAE,MAAM,IACd,CAAC,EACH,EAAE,CAAC,UAAU,CAAC,eAAe,EAAE,CAAC,KAAK,KAAK,eAAe,CAAC,KAAK,CAAC,CAAC,EACjE,EAAE,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC,KAAK,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,KACrD,WAAW,CAAC,sBAAsB,CAAI,QAAQ,EAAE,KAAK,kCAChD,KAAK,KACR,MAAM,EAAE,SAAS,IACjB,CACH,EACD,GAAG,QAAQ,CAAI,UAAU,CAAC,GAAG,EAAE,MAC7B,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,EAAE,QAAQ,EAAE,KACrC,eAAe,CAAC,KAAK,EAAE,QAAQ,CAAC,MAAM,CAAC,CACxC,CACF,EACD,GAAG,QAAQ,CAAI,UAAU,CAAC,MAAM,EAAE,MAChC,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,KACpC,eAAe,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CACrC,CACF,EACD,GAAG,QAAQ,CAAI,YAAY,IAAI,UAAU,CAAC,MAAM,EAAE,MAChD,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,KAAK,KAAK,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAC1D,EACD,GAAG,QAAQ,CAAI,UAAU,CAAC,SAAS,EAAE,MACnC,EAAE,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,KAAK,KAAK,eAAe,CAAC,KAAK,CAAC,CAAC,CAC5D,CACF,CAAC;AACJ;;SCnJgB,4BAA4B,CAC1C,UAGqB,EACrB,YAAyE;IAEzE,MACM,gBAAiB,SAAQ,WAAW;QAD1C;;YAEE,cAAS,GAAG,YAAY,CAAC;gBACvB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CACvB,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,EAC3B,gBAAgB,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,EACrE,GAAG,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,EAAE,SAAS,CAAC,KAC7B,CAAC,SAAS,IAAI,SAAS;sBACnB,UAAU,CAAC,eAAe,EAAE;sBAC5B,UAAU,CAAC,KAAK,EAAE,CACvB,CACF,CAAC;aACH,CAAC,CAAC;YAEH,qBAAgB,GAAG,YAAY,CAAC;gBAC9B,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CACvB,MAAM,CAAC,UAAU,CAAC,eAAe,CAAC,EAClC,WAAW,CACT,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAC7D,EACD,MAAM,CACJ,CAAC,QAAQ,KACP,CAAC,CAAC,QAAQ,CAAC,KAAK;oBAChB,QAAQ,CAAC,OAAO;oBAChB,QAAQ,CAAC,SAAS,KAAK,MAAM,CAChC,EACD,SAAS,CAAC,CAAC,QAAQ,KACjB,IAAI,CAAC,KAAK;qBACP,MAAM,CAAC,YAAY,CAAC,aAAa,EAAE;oBAClC,IAAI,EAAE,QAAQ,CAAC,SAAS,GAAG,CAAC;iBAC7B,CAAC;qBACD,IAAI,CACH,KAAK,EAAE,EACP,GAAG,CAAC,CAAC,SAAS,KAAK,CAAC,CAAC,SAAS,IAAI,QAAQ,KAAK,SAAS,CAAC,CAC1D,CACJ,EACD,MAAM,CAAC,CAAC,QAAQ,KAAK,CAAC,CAAC,QAAQ,CAAC,EAChC,SAAS,CAAC,CAAC,QAAQ,KAAK;oBACtB,UAAU,CAAC,cAAc,CAAC,EAAE,KAAK,EAAE,QAAS,CAAC,SAAS,GAAG,CAAC,EAAE,CAAC;oBAC7D,UAAU,CAAC,KAAK,EAAE;iBACnB,CAAC,CACH,CAAC;aACH,CAAC,CAAC;YAEH,mBAAc,GAAG,YAAY,CAAC;gBAC5B,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CACvB,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC,EAChC,GAAG,CAAC,MAAM,UAAU,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAC7C,CAAC;aACH,CAAC,CAAC;YAEH,sBAAiB,GAAG,YAAY,CAAC;gBAC/B,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CACvB,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,EACnC,WAAW,CACT,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAC7D,EACD,GAAG,CAAC,CAAC,IAAI,KACP,IAAI,CAAC,WAAW;sBACZ,UAAU,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,GAAG,CAAC,EAAE,CAAC;sBAClD,UAAU,CAAC,YAAY,EAAE,CAC9B,CACF,CAAC;aACH,CAAC,CAAC;YAEH,kBAAa,GAAG,YAAY,CAAC;gBAC3B,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CACvB,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,EAC/B,WAAW,CACT,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAC7D,EACD,GAAG,CAAC,CAAC,IAAI,KACP,IAAI,CAAC,OAAO;sBACR,UAAU,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,SAAS,GAAG,CAAC,EAAE,CAAC;sBAClD,UAAU,CAAC,YAAY,EAAE,CAC9B,CACF,CAAC;aACH,CAAC,CAAC;YAEH,kBAAa,GAAG,YAAY,CAAC;gBAC3B,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CACvB,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,EAC/B,WAAW,CACT,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAC7D,EACD,GAAG,CAAC,CAAC,IAAI,KACP,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,UAAU;sBAC3B,UAAU,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,UAAU,GAAG,CAAC,EAAE,CAAC;sBACnD,UAAU,CAAC,YAAY,EAAE,CAC9B,CACF,CAAC;aACH,CAAC,CAAC;SACJ;;;gBA5FA,UAAU;;IA6FX,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC5B;;SCzGgB,6BAA6B,CAC3C,YAAyC,EACzC,UAA2C;IAE3C,MAAM,OAAO,GAAG,UAAU,CAAC,YAAa,CAAC,OAAO,CAAC;IAEjD,SAAS,sBAAsB,CAC7B,QAAkB,EAClB,KAAK,GAAG,SAAS,EACjB,KAAQ;QAER,MAAM,SAAS,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC;QAE9C,QAAQ,SAAS;YACf,KAAK,MAAM;gBACT,OAAO,OAAO,CAAC,MAAM,CAAC,QAAQ,kCACzB,KAAK,KACR,UAAU,kCACL,KAAK,CAAC,UAAU,KACnB,KAAK,EAAE,QAAQ,CAAC,MAAM,EACtB,KAAK,kCACA,KAAK,CAAC,UAAU,CAAC,KAAK,KACzB,KAAK,EAAE,CAAC,EACR,GAAG,EAAE,QAAQ,CAAC,MAAM,UAGxB,CAAC;YACL,KAAK,SAAS,EAAE;gBACd,MAAM,kBAAkB,GACtB,KAAK,CAAC,UAAU,CAAC,WAAW,GAAG,CAAC,KAAK,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC;gBAEpE,MAAM,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,WAAW,GAAG,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC;gBACvE,MAAM,WAAW,GAAG,kBAAkB;sBAClC,CAAC,GAAG,YAAY,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE,GAAG,QAAQ,CAAC;sBACxD,QAAQ,CAAC;gBACb,OAAO,OAAO,CAAC,MAAM,CAAC,WAAW,kCAC5B,KAAK,KACR,UAAU,kCACL,KAAK,CAAC,UAAU,KACnB,KAAK,EACL,KAAK,kCACA,KAAK,CAAC,UAAU,CAAC,KAAK,KACzB,KAAK,EACL,GAAG,EAAE,KAAK,GAAG,QAAQ,CAAC,MAAM,UAGhC,CAAC;aACJ;YACD,KAAK,MAAM;gBACT,OAAO,OAAO,CAAC,OAAO,CAAC,QAAQ,kCAC1B,KAAK,KACR,UAAU,kCACL,KAAK,CAAC,UAAU,KACnB,KAAK,EACL,KAAK,kCACA,KAAK,CAAC,UAAU,CAAC,KAAK,KACzB,GAAG,EAAE,KAAK,CAAC,GAAG,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,UAG3C,CAAC;SACN;QAED,OAAO,KAAK,CAAC;KACd;IACD,OAAO,EAAE,sBAAsB,EAAE,CAAC;AACpC;;SCxCgB,aAAa,CAAS,EACpC,SAAS,GAAG,MAAM,EAClB,QAAQ,GAAG,EAAE,EACb,WAAW,GAAG,CAAC,EACf,YAAY,GAAG,CAAC,MACI,EAAE;IACtB,OAAO,kBAAkB,CAAC;QACxB,GAAG,EAAE,kBAAkB;QACvB,OAAO,EAAE,CAAC,oBAAoB,CAAC;QAC/B,MAAM,EAAE;YACN,SAAS;YACT,QAAQ;YACR,WAAW;YACX,YAAY;SACO;QACrB,OAAO,EAAE,CAAC,EAAE,eAAe,EAA6B,KACtD,4BAA4B,CAAC,eAAe,CAAC;QAC/C,SAAS,EAAE,CAAC,EACV,iBAAiB,EACjB,UAAU,GACkB,KAC5B,8BAA8B,CAC5B,iBAAkD,EAClD,UACoC,CACrC;QACH,QAAQ,EAAE,CAAC,EAAE,YAAY,EAAE,UAAU,EAAE,KACrC,6BAA6B,CAC3B,YAC+B,EAC/B,UAAqE,CACtE;QACH,YAAY,EAAE,CAAC,EACb,oBAAoB,EACpB,UAAU,GACqB,KAC/B,4BAA4B,CAC1B,oBAAoB,EACpB,UAAmC,CACpC;QACH,OAAO,EAAE,CAAC,EACR,YAAY,EACZ,UAAU,EACV,YAAY,EACZ,WAAW,EACX,UAAU,GACX,KACC,4BAA4B,CAC1B,YAAY,EACZ,UAGqB,EACrB,YAC+B,EAC/B,WAC8B,EAC9B,UAEuB,CACxB;QACH,OAAO,EAAE,CAAC,EAAE,UAAU,EAAE,YAAY,EAAE,KACpC,4BAA4B,CAC1B,UAGqB,EACrB,YAC+B,CAChC;KACJ,CAAC,CAAC;AACL;;SCpGgB,gCAAgC,CAC9C,eAAuB;IAEvB,OAAO;QACL,WAAW,EAAE,YAAY,CACvB,GAAG,eAAe,SAAS,EAC3B,KAAK,EAA2B,CACjC;QACD,aAAa,EAAE,YAAY,CACzB,GAAG,eAAe,WAAW,EAC7B,KAAK,EAA2B,CACjC;QACD,iBAAiB,EAAE,YAAY,CAC7B,GAAG,eAAe,gBAAgB,EAClC,KAAK,EAA2B,CACjC;QACD,eAAe,EAAE,YAAY,CAAC,GAAG,eAAe,oBAAoB,CAAC;QACrE,mBAAmB,EAAE,YAAY,CAAC,GAAG,eAAe,kBAAkB,CAAC;KACxE,CAAC;AACJ;;SCjBgB,aAAa,CAC3B,EAAmB,EACnB,KAAQ;;IAGR,MAAyC,KAAA,KAAK,CAAC,WAAW,EAAlD,KAAC,EAAG,EAAE,MAAM,SAAA,EAAK,WAAW,cAA9B,uCAAgC,CAAoB,CAAC;IAC3D,uCACK,KAAK,KACR,WAAW,EAAE,WAAW,IACxB;AACJ,CAAC;SAEe,WAAW,CACzB,EAAmB,EACnB,KAAQ;IAER,uCACK,KAAK,KACR,WAAW,kCAAO,KAAK,CAAC,WAAW,KAAE,CAAC,EAAE,GAAG,IAAI,OAC/C;AACJ,CAAC;SAEe,iBAAiB,CAC/B,EAAmB,EACnB,KAAQ;IAER,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IACvC,IAAI,QAAQ,EAAE;QACZ,OAAO,aAAa,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;KACjC;SAAM;QACL,OAAO,WAAW,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;KAC/B;AACH,CAAC;SACe,mBAAmB,CACjC,KAAQ;IAER,uCAAY,KAAK,KAAE,WAAW,EAAE,EAAE,IAAG;AACvC,CAAC;SAEe,mBAAmB,CAGjC,KAAQ;IACR,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC;AAC/C;;SCxCgB,kCAAkC,CAChD,iBAAgD;IAEhD,MAAM,EAAE,cAAc,EAAE,WAAW,EAAE,GAAG,iBAAiB,CAAC;IAE1D,SAAS,iBAAiB,CAAC,KAA8C;QACvE,OAAO,KAAK,CAAC,WAAW,CAAC;KAC1B;IACD,MAAM,oBAAoB,GAAG,cAAc,CACzC,iBAAiB,EACjB,CAAC,GAAwB,KAAK,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAC/C,CAAC;IACF,MAAM,sBAAsB,GAAG,cAAc,CAC3C,oBAAoB,EACpB,cAAc,EACd,CAAC,WAAW,EAAE,QAAQ,KACpB,WAAW,CAAC,MAAM,CAAC,CAAC,IAA0C,EAAE,EAAE;QAChE,IAAI,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;QACxB,OAAO,IAAI,CAAC;KACb,EAAE,EAAE,CAAC,CACT,CAAC;IACF,MAAM,iBAAiB,GAAG,cAAc,CACtC,oBAAoB,EACpB,cAAc,EACd,CAAC,WAAW,EAAE,QAAQ,KAAK,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,QAAQ,CAAC,EAAE,CAAE,CAAC,CAClE,CAAC;IAEF,MAAM,aAAa,GAAG,cAAc,CAClC,CAAC,KAA8C,KAAK,WAAW,CAAC,KAAK,CAAC,EACtE,mBAAmB,EACnB,CAAC,KAAK,EAAE,aAAa,KACnB,aAAa,KAAK,KAAK,GAAG,KAAK,GAAG,aAAa,KAAK,CAAC,GAAG,MAAM,GAAG,MAAM,CAC1E,CAAC;IAEF,OAAO;QACL,iBAAiB;QACjB,oBAAoB;QACpB,sBAAsB;QACtB,iBAAiB;QACjB,mBAAmB;QACnB,aAAa;KACd,CAAC;AACJ;;SC/BgB,gCAAgC,CAC9C,oBAAyB;IAEzB,uCACK,oBAAoB,KACvB,WAAW,EAAE,EAAE,IACf;AACJ,CAAC;SAEe,gCAAgC,CAI9C,YAAe,EACf,UAKmB,EACnB,WAA8C,EAC9C,UAEyB;;IAEzB,MAAM,EAAE,OAAO,EAAE,GAAG,UAAU,CAAC,YAAa,CAAC;IAC7C,MAAM,UAAU,SAAG,UAAU,CAAC,IAAI,0CAAE,MAAM,CAAC;IAC3C,MAAM,mBAAmB,SAAG,UAAU,CAAC,UAAU,0CAAE,SAAS,CAAC;IAE7D,SAAS,wBAAwB,CAE/B,KAAQ,EAAE,OAAyB;QACnC,MAAM,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,OAAO;YAC7C,MAAM,EAAE,GAAG,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAiB,CAAC,CAAC;YACvD,IAAI,EAAE,IAAI,EAAE,KAAK,OAAO,CAAC,EAAE,IAAI,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,IAAI,EAAE;gBACpE,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAClB,OAAO,GAAG,CAAC;aACZ;YACD,OAAO,GAAG,CAAC;SACZ,EAAE,EAAsB,CAAC,CAAC;QAC3B,IAAI,UAAU,CAAC,MAAM,EAAE;YACrB,MAAM,WAAW,qBAAQ,KAAK,CAAC,WAAW,CAAE,CAAC;YAC7C,UAAU,CAAC,OAAO,CAAC,CAAC,OAAO;gBACzB,MAAM,EAAE,GAAG,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAiB,CAAC,CAAC;gBACvD,MAAM,KAAK,GAAG,WAAW,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBACtC,OAAO,WAAW,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBAC/B,WAAW,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;aACzB,CAAC,CAAC;YACH,uCAAY,KAAK,KAAE,WAAW,IAAG;SAClC;QAED,OAAO,KAAK,CAAC;KACd;IAED,OAAO,aAAa,CAClB,YAAY,EACZ,EAAE,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,KACvC,WAAW,CAAC,WAAW,CAAC,EAAE,EAAE,KAAK,CAAC,CACnC,EACD,EAAE,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,KACzC,WAAW,CAAC,aAAa,CAAC,EAAE,EAAE,KAAK,CAAC,CACrC,EACD,EAAE,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,KAC7C,WAAW,CAAC,iBAAiB,CAAC,EAAE,EAAE,KAAK,CAAC,CACzC,EACD,EAAE,CAAC,UAAU,CAAC,eAAe,EAAE,CAAC,KAAK,KACnC,WAAW,CAAC,eAAe,CAAC,KAAK,CAAC,CACnC,EACD,GAAG,QAAQ,CAAI,UAAU,CAAC,MAAM,EAAE,MAChC,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE;QACpC,MAAM,WAAW,qBAAQ,KAAK,CAAC,WAAW,CAAE,CAAC;QAC7C,IAAI,CAAC,OAAO,CAAC,CAAC,CAAkB;YAC9B,OAAO,WAAW,CAAC,CAAC,CAAC,CAAC;SACvB,CAAC,CAAC;QACH,uCAAY,KAAK,KAAE,WAAW,IAAG;KAClC,CAAC,CACH,EACD,GAAG,QAAQ,CAAI,UAAU,CAAC,MAAM,EAAE,MAChC,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,KACvC,wBAAwB,CAAC,KAAK,EAAE,OAAO,CAAC,CACzC,CACF,EACD,EAAE,CAAC,UAAU,CAAC,mBAAmB,EAAE,CAAC,KAAK,KACvC,WAAW,CAAC,mBAAmB,CAAC,KAAK,CAAC,CACvC,EACD,GAAG,QAAQ,CAAI,UAAU,CAAC,SAAS,EAAE,MACnC,EAAE,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,KAAK,KAC7B,WAAW,CAAC,mBAAmB,CAAC,KAAK,CAAC,CACvC,CACF,EACD,GAAG,QAAQ,CAAI,UAAU,EAAE,MACzB,EAAE,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,KAAK,KAAK,WAAW,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CACvE,EACD,GAAG,QAAQ,CAAI,UAAU,CAAC,MAAM,EAAE,MAChC,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,KAAK,KAAK,WAAW,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CACzE,EACD,GAAG,QAAQ,CAAI,CAAC,UAAU,CAAC,eAAe,EAAE,MAC1C,EAAE,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC,KAAK,KAChC,WAAW,CAAC,mBAAmB,CAAC,KAAK,CAAC,CACvC,CACF,EACD,GAAG,QAAQ,CACT,UAAU,CAAC,eAAe,IAAI,mBAAmB,KAAK,SAAS,EAC/D,MACE,EAAE,CAAC,UAAU,CAAC,eAAe,EAAE,CAAC,KAAK,KACnC,WAAW,CAAC,mBAAmB,CAAC,KAAK,CAAC,CACvC,CACJ,CACF,CAAC;AACJ;;SCpHgB,iCAAiC,CAAS,EACxD,aAAa,GACsB;IACnC,SAAS,eAAe,CACtB,KAAQ;QAER,MAAM,WAAW,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,WAAW,KAAK,KAAK,EAAE;YACzB,uCACK,KAAK,KACR,WAAW,EAAE,EAAE,IACf;SACH;aAAM;YACL,uCACK,KAAK,KACR,WAAW,EAAE,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAC7B;SACH;KACF;IAED,OAAO;QACL,aAAa;QACb,WAAW;QACX,iBAAiB;QACjB,eAAe;QACf,mBAAmB;KACpB,CAAC;AACJ;;SCRgB,iBAAiB;IAC/B,OAAO,kBAAkB,CAAC;QACxB,GAAG,EAAE,gBAAgB;QACrB,OAAO,EAAE,CAAC,oBAAoB,CAAC;QAC/B,OAAO,EAAE,CAAC,EAAE,eAAe,EAA6B,KACtD,gCAAgC,CAAC,eAAe,CAAC;QACnD,SAAS,EAAE,CAAC,EAAE,iBAAiB,EAA+B,KAC5D,kCAAkC,CAChC,iBAAkD,CACnD;QACH,YAAY,EAAE,CAAC,EAAE,oBAAoB,EAAkC,KACrE,gCAAgC,CAAS,oBAAoB,CAAC;QAChE,QAAQ,EAAE,CAAC,EAAE,YAAY,EAAmC,KAC1D,iCAAiC,CAC/B,YAAkD,CACnD;QACH,OAAO,EAAE,CAAC,EAAE,YAAY,EAAE,UAAU,EAAE,WAAW,EAAE,UAAU,EAAE,KAC7D,gCAAgC,CAC9B,YAAY,EACZ,UAKmB,EACnB,WAAW,EACX,UAEyB,CAC1B;KACJ,CAAC,CAAC;AACL;;SC5DgB,iCAAiC,CAC/C,eAAuB;IAEvB,OAAO;QACL,MAAM,EAAE,YAAY,CAClB,GAAG,eAAe,SAAS,EAC3B,KAAK,EAA2B,CACjC;QACD,QAAQ,EAAE,YAAY,CAAC,GAAG,eAAe,WAAW,CAAC;QACrD,YAAY,EAAE,YAAY,CACxB,GAAG,eAAe,gBAAgB,EAClC,KAAK,EAA2B,CACjC;KACF,CAAC;AACJ;;SCXgB,mCAAmC;IAGjD,SAAS,gBAAgB,CAAC,KAA2B;QACnD,OAAO,KAAK,CAAC,UAAU,CAAC;KACzB;IACD,SAAS,oBAAoB,CAC3B,KAA4C;QAE5C,OAAO,CAAC,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,SAAS,CAAC;KAC5E;IAED,OAAO;QACL,gBAAgB;QAChB,oBAAoB;KACrB,CAAC;AACJ;;SCFgB,iCAAiC,CAC/C,oBAAyB,EACzB,UAAsC;;IAEtC,MAAM,UAAU,SAAG,UAAU,CAAC,eAAe,0CAAE,UAAU,CAAC;IAC1D,uCACK,oBAAoB,KACvB,UAAU,IACV;AACJ,CAAC;SACe,iCAAiC,CAI/C,YAAe,EACf,UAK6B,EAC7B,WAA4C,EAC5C,UAGyB;;IAEzB,MAAM,EAAE,OAAO,EAAE,GAAG,UAAU,CAAC,YAAa,CAAC;IAE7C,MAAM,UAAU,SAAG,UAAU,CAAC,IAAI,0CAAE,MAAM,CAAC;IAC3C,MAAM,mBAAmB,SAAG,UAAU,CAAC,UAAU,0CAAE,SAAS,CAAC;IAE7D,OAAO,aAAa,CAClB,YAAY,EACZ,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,KAAK,WAAW,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,EACvE,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,KAAK,KAAK,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAC/D,EAAE,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,KACxC,WAAW,CAAC,YAAY,CAAC,EAAE,EAAE,KAAK,CAAC,CACpC,EACD,GAAG,QAAQ,CAAI,UAAU,CAAC,SAAS,EAAE,MACnC,EAAE,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,KAAK,KAAK,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CACjE,EACD,GAAG,QAAQ,CAAI,UAAU,EAAE,MACzB,EAAE,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,KAAK,KAAK,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAC5D,EACD,GAAG,QAAQ,CAAI,UAAU,CAAC,MAAM,EAAE,MAChC,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,KAAK,KAAK,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAC9D,EACD,GAAG,QAAQ,CAAI,CAAC,UAAU,CAAC,eAAe,EAAE,MAC1C,EAAE,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC,KAAK,KAAK,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CACpE,EACD,GAAG,QAAQ,CACT,UAAU,CAAC,eAAe,IAAI,mBAAmB,KAAK,SAAS,EAC/D,MACE,EAAE,CAAC,UAAU,CAAC,eAAe,EAAE,CAAC,KAAK,KAAK,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CACzE,EACD,GAAG,QAAQ,CAAI,UAAU,CAAC,MAAM,EAAE,MAChC,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE;QACpC,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAC9B,CAAC,CAAkB,KAAK,CAAC,KAAK,KAAK,CAAC,UAAU,CAC/C,CAAC;QACF,OAAO,cAAc;8CAEZ,KAAK,KACR,UAAU,EAAE,SAAS,MAEvB,KAAK,CAAC;KACX,CAAC,CACH,EACD,GAAG,QAAQ,CAAI,UAAU,CAAC,MAAM,EAAE,MAChC,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE;QACvC,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO;YAClC,MAAM,EAAE,GAAG,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAiB,CAAC,CAAC;YACvD,OAAO,EAAE,IAAI,EAAE,KAAK,OAAO,CAAC,EAAE,IAAI,KAAK,CAAC,UAAU,KAAK,OAAO,CAAC,EAAE,CAAC;SACnE,CAAC,CAAC;QACH,OAAO,MAAM;8CAEJ,KAAK,KACR,UAAU,EAAE,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAiB,CAAC,MAExD,KAAK,CAAC;KACX,CAAC,CACH,CACF,CAAC;AACJ;;SCnGgB,kCAAkC;IAGhD,SAAS,MAAM,CACb,EAAmB,EACnB,KAAQ;QAER,uCACK,KAAK,KACR,UAAU,EAAE,EAAE,IACd;KACH;IACD,SAAS,QAAQ,CAAkD,KAAQ;QACzE,uCACK,KAAK,KACR,UAAU,EAAE,SAAS,IACrB;KACH;IACD,SAAS,YAAY,CACnB,EAAmB,EACnB,KAAQ;QAER,uCACK,KAAK,KACR,UAAU,EAAE,KAAK,CAAC,UAAU,KAAK,EAAE,GAAG,SAAS,GAAG,EAAE,IACpD;KACH;IAED,OAAO;QACL,MAAM;QACN,QAAQ;QACR,YAAY;KACb,CAAC;AACJ;;SCPgB,kBAAkB,CAAS,MAA8B;IACvE,OAAO,kBAAkB,CAAC;QACxB,GAAG,EAAE,iBAAiB;QACtB,OAAO,EAAE,CAAC,oBAAoB,CAAC;QAC/B,MAAM;QACN,OAAO,EAAE,CAAC,EAAE,eAAe,EAA6B,KACtD,iCAAiC,CAAC,eAAe,CAAC;QACpD,SAAS,EAAE,MAAM,mCAAmC,EAAU;QAC9D,QAAQ,EAAE,MAAM,kCAAkC,EAAE;QACpD,YAAY,EAAE,CAAC,EACb,oBAAoB,EACpB,UAAU,GACqB,KAC/B,iCAAiC,CAC/B,oBAAoB,EACpB,UAAwC,CACzC;QACH,OAAO,EAAE,CAAC,EAAE,YAAY,EAAE,UAAU,EAAE,WAAW,EAAE,UAAU,EAAE,KAC7D,iCAAiC,CAC/B,YAAY,EACZ,UAK6B,EAC7B,WAAW,EACX,UAGyB,CAC1B;KACJ,CAAC,CAAC;AACL;;MCZa,uBAAuB,GAAG;;IC/C3B;AAAZ,WAAY,UAAU;IACpB,2BAAa,CAAA;IACb,2BAAa,CAAA;IACb,2BAAa,CAAA;AACf,CAAC,EAJW,UAAU,KAAV,UAAU,QAIrB;MAqFY,YAAY,GAAG;;SC1FZ,sBAAsB,CACpC,eAAuB;IAEvB,OAAO;QACL,GAAG,EAAE,YAAY,CAAC,GAAG,eAAe,MAAM,EAAE,CAAC,GAAG,QAAkB,MAAM;YACtE,QAAQ;SACT,CAAC,CAAC;QACH,MAAM,EAAE,YAAY,CAClB,GAAG,eAAe,SAAS,EAC3B,CAAC,GAAG,IAAyB,MAAM;YACjC,IAAI;SACL,CAAC,CACH;QACD,MAAM,EAAE,YAAY,CAClB,GAAG,eAAe,SAAS,EAC3B,CAAC,GAAG,OAAyB,MAAM;YACjC,OAAO;SACR,CAAC,CACH;QACD,MAAM,EAAE,YAAY,CAClB,GAAG,eAAe,SAAS,EAC3B,CAAC,GAAG,QAAkB,MAAM;YAC1B,QAAQ;SACT,CAAC,CACH;QACD,SAAS,EAAE,YAAY,CACrB,GAAG,eAAe,aAAa,EAC/B,CAAC,SAA6B,MAAM,EAAE,SAAS,EAAE,CAAC,CACnD;QACD,YAAY,EAAE,YAAY,CAAC,GAAG,eAAe,gBAAgB,CAAC;KAC/D,CAAC;AACJ;;SCvBgB,wBAAwB,CACtC,iBAAgD;IAEhD,SAAS,aAAa,CAA8B,KAAQ;QAC1D,OAAO,KAAK,CAAC,OAAO,CAAC;KACtB;IAED,SAAS,qBAAqB,CAA8B,KAAQ;QAClE,MAAM,KAAK,GAAmC,EAAE,CAAC;QACjD,OAAO,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK;YACrC,MAAM,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YAChC,IAAI,CAAC,OAAO,EAAE;gBACZ,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;gBACrC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAChB,OAAO,GAAG,CAAC;aACZ;YAED,IAAI,KAAK,CAAC,UAAU,KAAK,UAAU,CAAC,OAAO,EAAE;gBAC3C,OAAO,GAAG,CAAC;aACZ;YAED,IACE,KAAK,CAAC,UAAU,KAAK,UAAU,CAAC,OAAO;gBACvC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,EACpC;gBACA,OAAO,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBACvB,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE,CAAC,CAAC;aAC7C;YAED,IAAI,KAAK,CAAC,UAAU,KAAK,UAAU,CAAC,OAAO,EAAE;gBAC3C,OAAO,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBACvB,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE,CAAC,CAAC;gBACpD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACnB,OAAO,MAAM,CAAC;aACf;YACD,OAAO,GAAG,CAAC;SACZ,EAAE,EAAsB,CAAC,CAAC;KAC5B;IAED,MAAM,EAAE,cAAc,EAAE,GAAG,iBAAiB,CAAC;IAE7C,MAAM,gBAAgB,GAAG,cAAc,CACrC,CAAC,KAAiC,KAAK,cAAc,CAAC,KAAK,CAAC,EAC5D,aAAa,EACb,CACE,QAA4B,EAC5B,OAAyB,EACzB,EAAE,IAAI,EAAwB;QAE9B,IAAI,IAAI;YACN,OAAO,OAAO;iBACX,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,KAAK,IAAI,CAAC;iBACpC,GAAG,CACF,CAAC,MAAM;;gBACL,QAAC;oBACC,UAAU,EAAE,MAAM,CAAC,UAAU;oBAC7B,MAAM,QAAE,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,mCAAI;wBAC7B,EAAE,EAAE,MAAM,CAAC,EAAE;qBACd;iBACuB,EAAA;aAAA,CAC7B,CAAC;QAEN,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CACrB,CAAC,MAAM;;YACL,QAAC;gBACC,UAAU,EAAE,MAAM,CAAC,UAAU;gBAC7B,MAAM,QAAE,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,mCAAI;oBAC7B,EAAE,EAAE,MAAM,CAAC,EAAE;iBACd;aACuB,EAAA;SAAA,CAC7B,CAAC;QACF,OAAO,GAAG,CAAC;KACZ,CACF,CAAC;IAEF,MAAM,wBAAwB,GAAG,cAAc,CAC7C,qBAAqB,EACrB,CAAC,KAAiC,KAAK,cAAc,CAAC,KAAK,CAAC,EAC5D,CAAC,OAAO,EAAE,QAAQ,KAChB,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;;QACZ,OAAO;YACL,MAAM,QAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,mCAAI,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE;YACtC,UAAU,EAAE,CAAC,CAAC,UAAU;SACD,CAAC;KAC3B,CAAC,CACL,CAAC;IAEF,OAAO;QACL,gBAAgB;QAChB,wBAAwB;QACxB,aAAa;QACb,qBAAqB;KACtB,CAAC;AACJ;;SC5FgB,sBAAsB,CACpC,oBAAyB;IAEzB,uCACK,oBAAoB,KACvB,OAAO,EAAE,EAAE,IACX;AACJ,CAAC;SACe,sBAAsB,CAIpC,YAAe,EACf,UAImB,EACnB,WAAiC,EACjC,UAIuB;;IAEvB,MAAM,UAAU,SAAG,UAAU,CAAC,IAAI,0CAAE,MAAM,CAAC;IAC3C,MAAM,YAAY,GAAG,UAAU,CAAC,MAAM,IAAI,QAAC,UAAU,CAAC,MAAM,0CAAE,QAAQ,CAAA,CAAC;IACvE,MAAM,mBAAmB,SAAG,UAAU,CAAC,UAAU,0CAAE,SAAS,CAAC;IAE7D,OAAO,aAAa,CAClB,YAAY,EACZ,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,EAAE,QAAQ,EAAE,KACrC,WAAW,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CACjC,EACD,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,KACvC,WAAW,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CACnC,EACD,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,QAAQ,EAAE,KACxC,WAAW,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,CACpC,EACD,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,KACpC,WAAW,CAAC,MAAM,CAAC,IAAa,EAAE,KAAK,CAAC,CACzC,EACD,EAAE,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,EAAE,SAAS,EAAE,KAC5C,SAAS;UACL,WAAW,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC;UACpC,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,CACjC,EACD,EAAE,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC,KAAK,KAAK,WAAW,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EACvE,GAAG,QAAQ,CAAI,UAAU,EAAE,MACzB,EAAE,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,KAAK,KAAK,WAAW,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAChE,EACD,GAAG,QAAQ,CAAI,YAAY,EAAE,MAC3B,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,KAAK,KAAK,WAAW,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAClE,EACD,GAAG,QAAQ,CAAI,CAAC,UAAU,CAAC,eAAe,EAAE,MAC1C,EAAE,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC,KAAK,KAAK,WAAW,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CACxE,EACD,GAAG,QAAQ,CACT,UAAU,CAAC,eAAe,IAAI,mBAAmB,KAAK,SAAS,EAC/D,MACE,EAAE,CAAC,UAAU,CAAC,eAAe,EAAE,CAAC,KAAK,KACnC,WAAW,CAAC,YAAY,CAAC,KAAK,CAAC,CAChC,CACJ,CACF,CAAC;AACJ;;SCrEgB,uBAAuB,CACrC,UAA6D;IAE7D,MAAM,EAAE,YAAY,EAAE,GAAG,UAAU,CAAC,IAAI,IAAI,EAAE,CAAC;IAC/C,MAAM,OAAO,GAAG,UAAW,CAAC,YAAa,CAAC,OAAO,CAAC;IAElD,SAAS,mBAAmB,CAC1B,MAAc,EACd,UAAsB,EACtB,QAA0B;QAE1B,OAAO;YACL,EAAE,EAAE,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC;YACxC,UAAU;YACV,aAAa,EAAE,CAAC,YAAY,IAAI,MAAM,KAAK,SAAS;SACrD,CAAC;KACH;IAED,SAAS,GAAG,CACV,QAAkB,EAClB,KAAQ,EACR,QAAQ,GAAG,KAAK;QAEhB,MAAM,OAAO,GAAG;YACd,GAAG,KAAK,CAAC,OAAO;YAChB,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,MAAM,KACrB,mBAAmB,CAAC,MAAM,EAAE,UAAU,CAAC,OAAO,CAAC,CAChD;SACF,CAAC;QACF,IAAI,CAAC,QAAQ;YACX,OAAO,OAAO,CAAC,OAAO,CAAC,QAAQ,kCAC1B,KAAK,KACR,OAAO,IACP,CAAC;QAEL,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACxD,MAAM,WAAW,qBAAQ,KAAK,CAAC,QAAQ,CAAE,CAAC;QAC1C,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,MAAM,EAAE,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC/B,WAAW,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;SACrB,CAAC,CAAC;QACH,uCACK,KAAK,KACR,GAAG,EAAE,CAAC,GAAG,MAAM,EAAE,GAAG,KAAK,CAAC,GAAG,CAAC,EAC9B,QAAQ,EAAE,WAAW,EACrB,OAAO,IACP;KACH;IAED,SAAS,MAAM,CACb,QAAkB,EAClB,KAAQ;QAER,MAAM,UAAU,GAAG,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;QACtC,MAAM,WAAW,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,SAAS,CAAC,KAAK,CAAa,CAAC;QAExE,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,GAAG,QAAQ,CAAC,MAAM,CAC1C,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,KACb,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAgB,CAAW,CAAC,KAAK,CAAC,CAAC;cACpE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC;cACnB,CAAC,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,EACzB,CAAC,IAAI,KAAK,EAAU,EAAE,IAAI,KAAK,EAAU,CAAC,CAC3C,CAAC;QAEF,OAAO,OAAO,CAAC,UAAU,CAAC,QAAQ,kCAC7B,KAAK,KACR,OAAO,EAAE;gBACP,GAAG,UAAU;gBAEb,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,MAAM,KACtB,mBAAmB,CAAC,MAAM,EAAE,UAAU,CAAC,OAAO,CAAC,CAChD;gBACD,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,KACpB,mBAAmB,CAAC,MAAM,EAAE,UAAU,CAAC,OAAO,CAAC,CAChD;aACF,IACD,CAAC;KACJ;IAcD,SAAS,MAAM,CACb,eAAwD,EACxD,KAAQ;QAER,IAAI,OAAO,eAAe,KAAK,UAAU,EAAE;YACzC,OAAO,OAAO,CAAC,UAAU,CAAC,eAAe,kCACpC,KAAK,KACR,OAAO,EAAE;oBACP,GAAG,KAAK,CAAC,OAAO;oBAChB,GAAI,KAAK,CAAC,GAAa,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM;wBACnC,EAAE;wBACF,UAAU,EAAE,UAAU,CAAC,OAAO;qBAC/B,CAAC,CAAC;iBACJ,IACD,CAAC;SACJ;QAED,OAAO,OAAO,CAAC,UAAU,CAAC,eAA2B,kCAChD,KAAK,KACR,OAAO,EAAE;gBACP,GAAG,KAAK,CAAC,OAAO;gBAChB,GAAI,eAA4B,CAAC,GAAG,CAAC,CAAC,GAAW,MAAM;oBACrD,EAAE,EAAE,GAAG;oBACP,UAAU,EAAE,UAAU,CAAC,OAAO;iBAC/B,CAAC,CAAC;aACJ,IACD,CAAC;KACJ;IACD,SAAS,SAAS,CAAuC,KAAQ;QAC/D,OAAO,OAAO,CAAC,SAAS,iCACnB,KAAK,KACR,OAAO,EAAE;gBACP,GAAG,KAAK,CAAC,OAAO;gBAChB,GAAI,KAAK,CAAC,GAAa,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM;oBACnC,EAAE;oBACF,UAAU,EAAE,UAAU,CAAC,OAAO;iBAC/B,CAAC,CAAC;aACJ,IACD,CAAC;KACJ;IACD,SAAS,YAAY,CAAuC,KAAQ;QAClE,uCAAY,KAAK,KAAE,OAAO,EAAE,EAAE,IAAG;KAClC;IAED,SAAS,MAAM,CACb,OAAyB,EACzB,KAAQ;QAER,MAAM,UAAU,GAAG,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;QACtC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO;YACtB,MAAM,EAAE,GAAG,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAiB,CAAC,CAAC;YACvD,IAAI,EAAE,IAAI,EAAE,KAAK,OAAO,CAAC,EAAE,EAAE;;gBAE3B,MAAM,KAAK,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,OAAO,CAAC,EAAE,CAAC,CAAC;gBAC/D,MAAM,SAAS,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;gBACpC,UAAU,CAAC,KAAK,CAAC,mCAAQ,SAAS,KAAE,EAAE,GAAE,CAAC;aAC1C;SACF,CAAC,CAAC;QACH,OAAO,OAAO,CAAC,UAAU,CAAC,OAAO,kCAC5B,KAAK,KACR,OAAO,EAAE;gBACP,GAAG,UAAU;gBACb,GAAG,OAAO,CAAC,GAAG,CACZ,CAAC,OAAO;;oBACN,QAAC;wBACC,EAAE,QAAE,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAiB,CAAC,mCAAI,OAAO,CAAC,EAAE;wBAC7D,UAAU,EAAE,UAAU,CAAC,OAAO;wBAC9B,aAAa,EAAE,CAAC,YAAY,IAAI,OAAO,CAAC,OAAO,KAAK,SAAS;qBAC3C,EAAA;iBAAA,CACvB;aACF,IACD,CAAC;KACJ;IAED,OAAO;QACL,GAAG;QACH,MAAM;QACN,MAAM;QACN,SAAS;QACT,YAAY;QACZ,MAAM;KACP,CAAC;AACJ;;SCtJgB,eAAe,CAAS,EACtC,YAAY,GAAG,KAAK,MACN,EAAE;IAChB,OAAO,kBAAkB,CAAC;QACxB,GAAG,EAAE,YAAY;QACjB,OAAO,EAAE,CAAC,oBAAoB,CAAC;QAC/B,MAAM,EAAE,EAAE,YAAY,EAAgB;QACtC,OAAO,EAAE,CAAC,EAAE,eAAe,EAA6B,KACtD,sBAAsB,CAAS,eAAe,CAAC;QACjD,SAAS,EAAE,CAAC,EAAE,iBAAiB,EAA+B,KAC5D,wBAAwB,CACtB,iBAAkD,CACnD;QACH,QAAQ,EAAE,CAAC,EAAE,UAAU,EAAmC,KACxD,uBAAuB,CACrB,UAA+D,CAChE;QACH,YAAY,EAAE,CAAC,EAAE,oBAAoB,EAAkC,KACrE,sBAAsB,CAAS,oBAAoB,CAAC;QACtD,OAAO,EAAE,CAAC,EAAE,YAAY,EAAE,UAAU,EAAE,WAAW,EAAE,UAAU,EAAE,KAC7D,sBAAsB,CACpB,YAAY,EACZ,UAImB,EACnB,WAAW,EACX,UAIuB,CACxB;KACJ,CAAC,CAAC;AACL;;MCzBa,YAAY,GAAG;;ACxC5B,MAAM,gBAAgB,GAAG,gBAAgB,CAAC;AAC1C,SAAS,mBAAmB,CAC1B,IAAO,EACP,YAAoB;IAEpB,MAAM,KAAK,GAAI,IAA+B,CAAC,YAAY,CAAC,CAAC;IAE7D,IAAI,cAAc,CAAC,KAAK,CAAC,EAAE;QACzB,MAAM,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;;;QAIlC,OAAO,WAAW,GAAG,gBAAgB,GAAG,WAAW,GAAG,KAAK,CAAC;KAC7D;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAED;;;;;SAKgB,QAAQ,CAAI,IAAS,EAAE,IAAa;IAClD,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IAC3B,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;IACjC,IAAI,CAAC,MAAM,IAAI,SAAS,KAAK,EAAE,EAAE;QAC/B,OAAO,IAAI,CAAC;KACb;IAED,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;QACpB,MAAM,MAAM,GAAG,mBAAmB,CAAC,CAAC,EAAE,MAAgB,CAAC,CAAC;QACxD,MAAM,MAAM,GAAG,mBAAmB,CAAC,CAAC,EAAE,MAAgB,CAAC,CAAC;;;;;QAMxD,IAAI,gBAAgB,GAAG,CAAC,CAAC;QACzB,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM,IAAI,IAAI,EAAE;;YAGpC,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;;gBAE5D,gBAAgB,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;aACvE;iBAAM;gBACL,IAAI,MAAM,GAAG,MAAM,EAAE;oBACnB,gBAAgB,GAAG,CAAC,CAAC;iBACtB;qBAAM,IAAI,MAAM,GAAG,MAAM,EAAE;oBAC1B,gBAAgB,GAAG,CAAC,CAAC,CAAC;iBACvB;aACF;SACF;aAAM,IAAI,MAAM,IAAI,IAAI,EAAE;YACzB,gBAAgB,GAAG,CAAC,CAAC;SACtB;aAAM,IAAI,MAAM,IAAI,IAAI,EAAE;YACzB,gBAAgB,GAAG,CAAC,CAAC,CAAC;SACvB;QAED,OAAO,gBAAgB,IAAI,SAAS,KAAK,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KAC1D,CAAC,CAAC;AACL;;SCxDgB,uBAAuB,CACrC,EAAE,SAAS,EAAiC,EAC5C,UAA2C;IAE3C,SAAS,YAAY,CACnB,EAAE,MAAM,EAAE,SAAS,EAAgB,EACnC,KAAQ;QAER,MAAM,EAAE,OAAO,EAAE,GAAG,UAAU,CAAC,YAAa,CAAC;QAC7C,MAAM,QAAQ,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;QAClC,MAAM,SAAS,GAAG,QAAQ,CAAC,QAAQ,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAChE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CACpB,CAAC;QACF,uCACK,KAAK,KACR,GAAG,EAAE,SAAS,EACd,IAAI,kCAAO,KAAK,CAAC,IAAI,KAAE,OAAO,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,OACrD;KACH;IACD,OAAO;QACL,YAAY;KACb,CAAC;AACJ;;SCpBgB,sBAAsB,CACpC,oBAAyB,EACzB,UAAmC;IAEnC,MAAM,EAAE,WAAW,EAAE,GAAG,UAAU,CAAC,IAAK,CAAC;IAEzC,uCACK,oBAAoB,KACvB,IAAI,EAAE;YACJ,OAAO,EAAE,WAAW;YACpB,OAAO,EAAE,WAAW;SACrB,IACD;AACJ,CAAC;SAEe,sBAAsB,CAIpC,YAAe,EACf,UAA6D,EAC7D,WAAiC,EACjC,UAAqE;IAErE,MAAM,EAAE,MAAM,EAAE,GAAG,UAAU,CAAC,IAAK,CAAC;IAEpC,OAAO,aAAa,CAClB,YAAY,EACZ,EAAE,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,KAC/C,CAAC,MAAM;UACH,WAAW,CAAC,YAAY,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE,KAAK,CAAC;0CAEjD,KAAK,KACR,IAAI,kCAAO,KAAK,CAAC,IAAI,KAAE,OAAO,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,MACtD,CACN,EACD,EAAE,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,KAAK;;QAC7B,OAAA,OAAA,KAAK,CAAC,IAAI,0CAAE,OAAO,IACf,CAAC,MAAM;cACL,WAAW,CAAC,YAAY,OAAC,KAAK,CAAC,IAAI,0CAAE,OAAO,EAAE,KAAK,CAAC;8CAE/C,KAAK,KACR,IAAI,kCAAO,KAAK,CAAC,IAAI,KAAE,OAAO,QAAE,KAAK,CAAC,IAAI,0CAAE,OAAO,MACpD;cACH,KAAK,CAAA;KAAA,CACV,CACF,CAAC;AACJ;;SCtDgB,wBAAwB;IACtC,SAAS,UAAU,CAAC,KAAwB;;QAC1C,aAAO,KAAK,CAAC,IAAI,0CAAE,OAAO,CAAC;KAC5B;IACD,OAAO;QACL,UAAU;KACX,CAAC;AACJ;;SCGgB,qBAAqB,CACnC,UAEmB,EACnB,UAAqE;IAErE,MAAM,EAAE,MAAM,EAAE,GAAG,UAAU,CAAC,IAAK,CAAC;IAEpC,MACM,UAAW,SAAQ,WAAW;QADpC;;YAEE,gBAAW,GAAG,YAAY,CAAC;gBACzB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CACvB,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,SAAS,CAAC,EAC7C,SAAS,CAAC,MACR,UAAU,CAAC,aAAa;sBACpB,CAAC,UAAU,CAAC,eAAe,EAAE,EAAE,UAAU,CAAC,aAAa,EAAE,CAAC;sBAC1D,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,CACzB,CACF,CAAC;aACH,CAAC,CAAC;SACJ;;;gBAZA,UAAU;;IAaX,OAAO,MAAM,GAAG,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;AACpC;;SC/BgB,sBAAsB,CACpC,eAAuB;IAEvB,OAAO;QACL,IAAI,EAAE,YAAY,CAAC,GAAG,eAAe,OAAO,EAAE,KAAK,EAAgB,CAAC;QACpE,SAAS,EAAE,YAAY,CAAC,GAAG,eAAe,eAAe,CAAC;KAC3D,CAAC;AACJ;;SCsBgB,OAAO,CAAS,EAC9B,MAAM,GAAG,KAAK,EACd,WAAW,MACW,EAAE;IACxB,OAAO,kBAAkB,CAAC;QACxB,GAAG,EAAE,YAAY;QACjB,OAAO,EAAE,CAAC,oBAAoB,CAAC;QAC/B,MAAM,EAAE,EAAE,MAAM,EAAE,WAAW,EAAwB;QACrD,OAAO,EAAE,CAAC,EAAE,eAAe,EAA6B,KACtD,sBAAsB,CAAS,eAAe,CAAC;QACjD,SAAS,EAAE,MAAM,wBAAwB,EAAU;QACnD,QAAQ,EAAE,CAAC,EAAE,YAAY,EAAE,UAAU,EAAmC,KACtE,uBAAuB,CACrB,YAAqE,EACrE,UAAU,CACX;QACH,YAAY,EAAE,CAAC,EACb,oBAAoB,EACpB,UAAU,GACqB,KAC/B,sBAAsB,CAAS,oBAAoB,EAAE,UAAU,CAAC;QAClE,OAAO,EAAE,CAAC,EAAE,YAAY,EAAE,UAAU,EAAE,WAAW,EAAE,UAAU,EAAE,KAC7D,sBAAsB,CACpB,YAAY,EACZ,UAA+D,EAC/D,WAAW,EACX,UAEyB,CAC1B;QACH,OAAO,EAAE,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,KAClC,qBAAqB,CACnB,UAEmB,EACnB,UAAuE,CACxE;KACJ,CAAC,CAAC;AACL;;SC7DgB,QAAQ,CACtB,cAEI,EAAE;IAEN,OAAO,kBAAkB,CAAC;QACxB,GAAG,EAAE,OAAO;QACZ,MAAM,EAAE,WAAW;QACnB,OAAO,EAAE,CAAC,EAAE,eAAe,EAA6B,MAAM;YAC5D,KAAK,EAAE,YAAY,CAAC,GAAG,eAAe,cAAc,CAAC;SACtD,CAAC;QACF,OAAO,EAAE,CAAC,EAAE,UAAU,EAAE,YAAY,EAAE,KACpC,aAAa,CACX,YAAY,EACZ,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,YAAY,CAAC,CACzC;QACH,OAAO,EAAE,CAAC,EAAE,UAAU,EAAE;;YACtB,MACM,WAAY,SAAQ,WAAW;gBADrC;;;oBAEE,mBAAc,GACZ,OAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO,0CAAE,MAAM;wBAC5B,YAAY,CAAC;4BACX,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CACvB,MAAM,CAAC,GAAG,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO,CAAC,EAC/B,KAAK,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,CAC1B,CAAC;yBACH,CAAC,CAAC;iBACN;;;wBAVA,UAAU;;YAWX,OAAO,OAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO,0CAAE,MAAM,IAAG,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;SAC1D;KACF,CAAC,CAAC;AACL;;AC1BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAqCgB,cAAc,CAK5B,EACA,IAAI,EACJ,WAAW,EACX,kBAAkB,EAClB,eAAe,GAMhB;IACC,MAAM,cAAc,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC;IAEjD,IAAI,eAKH,CAAC;IACF,OAAO,kBAAkB,CAAC;QACxB,GAAG,EAAE,IAAI,GAAG,OAAO;QACnB,MAAM,EAAE;YACN,IAAI;YACJ,WAAW;YACX,kBAAkB;YAClB,eAAe;SAChB;QACD,OAAO,EAAE,CAAC,EACR,eAAe,GACW;YAM1B,eAAe,GAAG;gBAChB,OAAO,GAAG,WAAW;sBACjB,YAAY,CACV,GAAG,eAAe,IAAI,cAAc,EAAE,EACtC,WAAkB,CACnB;sBACD,YAAY,CACV,GAAG,eAAe,IAAI,cAAc,EAAE,CACvC,CAA4C;gBACjD,cAAc,GAAG,kBAAkB;sBAC/B,YAAY,CACV,GAAG,eAAe,IAAI,cAAc,UAAU,EAC9C,kBAAyB,CAC1B;sBACD,YAAY,CACV,GAAG,eAAe,IAAI,cAAc,UAAU,CAC/C,CAA6C;gBAClD,WAAW,GAAG,eAAe;sBACzB,YAAY,CACV,GAAG,eAAe,IAAI,cAAc,UAAU,EAC9C,eAAsB,CACvB;sBACD,YAAY,CACV,GAAG,eAAe,IAAI,cAAc,UAAU,CAC/C,CAA4C;aAClD,CAAC;YACF,IAAI,IAAI,EAAE;gBACR,OAAO;oBACL,CAAC,GAAG,IAAI,EAAE,GAAG,eAAe,CAAC,OAAO;oBACpC,CAAC,GAAG,IAAI,SAAS,GAAG,eAAe,CAAC,cAAc;oBAClD,CAAC,GAAG,IAAI,MAAM,GAAG,eAAe,CAAC,WAAW;iBACQ,CAAC;aACxD;YACD,OAAO,eAAe,CAAC;SACxB;QACD,SAAS,EAAE;YACT,SAAS,eAAe,CAAgC,KAAQ;gBAC9D,OAAQ,KAAa,CAAC,GAAG,IAAI,QAAQ,CAAC,KAAK,SAAS,CAAC;aACtD;YACD,SAAS,eAAe,CAAgC,KAAQ;gBAC9D,OAAQ,KAAa,CAAC,GAAG,IAAI,QAAQ,CAAC,KAAK,SAAS,CAAC;aACtD;YACD,SAAS,YAAY,CAAgC,KAAQ;gBAC3D,OAAQ,KAAa,CAAC,GAAG,IAAI,QAAQ,CAAC,KAAK,MAAM,CAAC;aACnD;YACD,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACrE,OAAO;gBACL,CAAC,YAAY,eAAe,EAAE,GAAG,eAAe;gBAChD,CAAC,YAAY,eAAe,EAAE,GAAG,eAAe;gBAChD,CAAC,SAAS,eAAe,EAAE,GAAG,YAAY;aACK,CAAC;SACnD;QACD,YAAY,EAAE,CAAC,EAAE,oBAAoB,EAAkC,KACrE,oBAA2C;QAC7C,OAAO,EAAE,CAAC,EAAE,YAAY,EAAE;YACxB,OAAO,aAAa,CAClB,YAAY,EACZ,EAAE,CACA,eAAe,CAAC,OAAO,EACvB,CAAC,KAAK,MACH,gCACI,KAAK,KACR,CAAC,GAAG,IAAI,QAAQ,GAAG,SAAS,GACL,CAAA,CAC5B,EACD,EAAE,CACA,eAAe,CAAC,WAAW,EAC3B,CAAC,KAAK,MACH,gCACI,KAAK,KACR,CAAC,GAAG,IAAI,QAAQ,GAAG,MAAM,GACF,CAAA,CAC5B,EACD,EAAE,CACA,eAAe,CAAC,cAAc,EAC9B,CAAC,KAAK,MACH,gCACI,KAAK,KACR,CAAC,GAAG,IAAI,QAAQ,GAAG,SAAS,GACL,CAAA,CAC5B,CACF,CAAC;SACH;KACF,CAAC,CAAC;AACL,CAAC;AAED,SAAS,mBAAmB,CAAC,IAAY;IACvC,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IAC/C,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC1D;;AC1KA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAkCgB,aAAa,CAO3B,EACA,UAAU,EACV,WAAW,EACX,kBAAkB,EAClB,eAAe,GAMhB;IACC,MAAM,eAAe,GACnB,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAI3D,OAAO;QACL,cAAc,CAAgC;YAC5C,IAAI,GAAG,MAAM,GAAG,eAAe,CAAM;YACrC,WAAW;YACX,kBAAkB;YAClB,eAAe;SAChB,CAAC;QACF,kBAAkB,CAAC;YACjB,GAAG,EAAE,OAAO,eAAe,EAAE;YAC7B,MAAM,EAAE,EAAE,UAAU,EAAE,WAAW,EAAE,kBAAkB,EAAE,eAAe,EAAE;YACxE,SAAS,EAAE;gBACT,SAAS,YAAY,CAAC,KAAY;oBAChC,OAAQ,KAAa,CAAC,GAAG,UAAU,EAAE,CAAW,CAAC;iBAClD;gBAED,OAAO;oBACL,CAAC,SAAS,eAAe,EAAE,GAAG,YAAY;iBACT,CAAC;aACrC;YACD,YAAY,EAAE,CAAC,EACb,oBAAoB,GACW,KAAK,oBAA6B;YACnE,OAAO,EAAE,CAAC,EAAE,YAAY,EAAE,UAAU,EAAE;gBACpC,OAAO,aAAa,CAClB,YAAY,EACZ,EAAE,CACC,UAAkB,CAAC,OAAO,eAAe,SAAS,CAAC,EACpD,CAAC,KAAU,EAAE,MAAW,sCACnB,KAAK,KACR,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,IAChC,CACH,CACF,CAAC;aACH;SACF,CAAC;KACM,CAAC;AACb;;ACvGA;;;;;;"}